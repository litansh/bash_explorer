#!/bin/bash
#!/bin/sh -
## --------------------------------------
# Step #1: Define variables
# --------------------------------------
#EDITOR=vim
#PASSWD=/etc/passwd
RED='\033[0;41;30m'
STD='\033[0;0;39m'
mkdir -p /tmp/mysql-tmp
chmod 777 /tmp/mysql-tmp
#Tmp for pass
TMP=/tmp/mysql-tmp/mysql-tmp23455.log
#Tmp for user
TMP0=/tmp/mysql-tmp/mysql-tmp-validator.log
TMP1=/tmp/mysql-tmp/mysql-tmp455.log
TMP2=/tmp/mysql-tmp
HISTORY=/tmp/mysql-tmp/script_history
mkdir -p /tmp/findme/
mkdir -p /tmp/findme/cron
CRONDIR=/tmp/findme/cron
findmepath=/tmp/findme/
CATTMP1=/tmp/findme/.srch.log
EDITORTMP1=/tmp/findme/.editorfind.log
LOGO=/tmp/findme/.logo.log
LOGO1=/tmp/findme/.logo1.log
export normal=`echo "\033[m"`
export menu=`echo "\033[36m"` #Blue
export number=`echo "\033[33m"` #yellow
export bgred=`echo "\033[41m"`
export fgred=`echo "\033[31m"`
export green=`echo "\033[32m"`
export blink=`echo "\033[5m" `
export lightbggrey=`echo "\033[47m" `
export bggrey=`echo "\033[100m" ` 
export grey=`echo "\033[90m" ` 
export menu1=`echo -e "\033[100m"`
export black=`echo -e "\033[30m"`
export bggreen=`echo -e "\033[42m"`
export bgwhite=`echo -e "\033[100m"`
whoami=`whoami`
h1=`date +%R:%M%p`
#true > script_history
history -w script_history
hostname=`hostname | cut -d"." -f1`
SRVLIST=pwd/serverlist.log
export  du=`df -h /`
PATH1=/
export EDITORTMP1=/tmp/findme/.editorfind.log
export ROOTUSERSTMPLOG=/tmp/findme/.rootuserstmplog.log
export ROOTUSERSTMPLOG1=/tmp/findme/.rootuserstmplog1.log
export TIMETMPLOG=/tmp/findme/.timetmplog.log
export TIMETMPLOG1=/tmp/findme/.timetmplog1.log
export EDIPREF=`cat $EDITORTMP1`
export VIM=`ls /usr/bin | grep "vim$" | wc -l`
export NANO=`ls /usr/bin | grep nano | wc -l`
export UBUNTU=`awk -F= '/^NAME/{print $2}' /etc/os-release | grep -o Ubuntu | wc -l`
export CENTOS=`awk -F= '/^NAME/{print $2}' /etc/os-release | grep -o CentOS | wc -l`
export CENTOS1=`awk -F= '/^NAME/{print $2}' /etc/os-release | grep -o CentOS `
export UBUNTU1=`awk -F= '/^NAME/{print $2}' /etc/os-release | grep -o Ubuntu `
HIDENOFFBAN="${menu}OFF${normal}"
HIDENONBAN="${menu}ON${normal}"
 DIRLOCATION="$(printf "[$whoami@$hostname $PWD]#")"
MAIN="\n${number}1.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}6.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}2.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}7.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}3.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}8.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}4.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}9.${menu}Hidden items  ON [${number}H${menu}] or [${number}L${menu}] OFF\n${number}5.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]\n${number}*.${menu}Editor    [${number}a${menu}] ${normal}VI${menu} [${number}b${menu}] ${normal}VIM${menu} [${number}c${menu}] ${normal}NANO${menu}${normal}" 
D="$(date +"Date:%d.%m.%Y")"
T="$(date +"Time:%H:%M:%S")"
# MAIN="\n${number}1.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}6.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}2.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}7.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}3.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}8.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}4.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}9.${menu}Hidden items  ON [${number}H${menu}] or [${number}L${menu}] OFF\n${number}5.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]"
#MAIN="\n${number}1.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}6.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}2.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}7.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}3.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}8.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}4.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}9.${menu}Hidden items  ON [${number}H${menu}] or [${number}L${menu}] OFF\n${number}5.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]\n${number}*.${menu}Editor ${normal}VI${menu} [${number}a${menu}] ${normal}VIM${menu} [${number}b${menu}] "$NANO"${menu} [${number}c${menu}]"               
lockedusers=/tmp/findme/.lockedusers.log
ITEMS50="\n${normal}This folder have more then ${menu}50 ${normal}items.\nPlease use ${menu}mouse left click${normal} to select and paste item or ${menu}type${normal} item name.${normal}\n\n"
C1itemchoice=`printf "${menu}Press [${number}Enter${menu}] to back / \n\n${menu}Use mouse to ${number}paste ${menu}or ${number}type ${menu}item use ${number}TAB${menu}:${normal}"`
n=100
history -r script_history
#SLEEP2=`sleep 2`
SLEEP2=`echo`
export SYNCCHK=`timedatectl status | grep -o -P '(?<=(synchronized: )).*(?=$)' | sed  's/ //g' | wc -m`
#General
function greetgusr_ () {
local h=`date +%H`
if [ $h -lt 12 ]; 
 then
    greet=" Good morning"
    #echo $greet
elif [ $h -lt 18 ]; 
 then
     greet=" Good afternoon"
    # echo $greet
 else
     greet=" Good evening"
    # echo $greet
fi

}

function back_to_root_ () {
if [[ "$counter" == 0 ]] && [[ "$selector" == 0 ]] ;
    # whatever you want to do when arr contains value
   then
   
         menu0_
elif [[ "$counter" == 0 ]] && [[ "$selector" == 1 ]];
   then	
         menu0_
		 
		 elif [[ "$counter" == 0 ]] && [[ "$selector" == 2 ]];
   then	
         menu1_
		 elif [[ "$counter" == 0 ]] && [[ "$selector" == 3 ]];
   then	
         menu2_
		elif [[ "$counter" == 0 ]] && [[ "$selector" == 4 ]];
   then	
         menu3_
		 elif [[ "$counter" == 0 ]] && [[ "$selector" == 5 ]];
   then	
         menu4_
		 	 elif [[ "$counter" == 0 ]] && [[ "$selector" == 6 ]];
   then	
         menu5_
		 	 elif [[ "$counter" == 0 ]] && [[ "$selector" == 7 ]];
   then	
         menu6_
		 	 elif [[ "$counter" == 0 ]] && [[ "$selector" == 8 ]];
   then	
         menu7_
		 	 elif [[ "$counter" == 0 ]] && [[ "$selector" == 9 ]];
   then	
         menu8_
		 	 	 elif [[ "$counter" == 0 ]] && [[ "$selector" == 10 ]];
   then	
         menu9_
		 	 	 elif [[ "$counter" == 0 ]] && [[ "$selector" == 11 ]];
   then	
         menu10_
		 	 	 elif [[ "$counter" == 0 ]] && [[ "$selector" == 12 ]];
   then	
         menu11_
		 
fi
}

function color_ () {
printf %b '\033[m'
break
}

function kill_ () {
pkill -9 -P -f $$ > /dev/null 2>&1
pkill -9 -f $$ > /dev/null 2>&1
pkill -9 findme > /dev/null 2>&1
pkill -9 -f listdirubuntu.sh > /dev/null 2>&1
pkill -9 -f listdirubuntu.sh
pkill -9 -f listdir.sh

}

function exit_ () {

printf %b '\033[m'
echo
echo -e "${menu}Thank you ${number}"$whoami" ${menu}for use explorer managment system${normal}"
logo2_
echo
clear
clear
echo > $LOGO
printf "$EDITOR" > $EDITORTMP1
printf %b '\033[m'
clear && kill_ && exit 0 && kill_ && exit 0 && kill_
kill_ && clear
}

function confirm_ () {
local C1="$(printf "${menu} Please Confirm (y/n) or ${number}[ Enter ] ${menu}to Y ${menu}:${normal}\n")"
echo 
read -sn 1 -p "$C1 " confirmn
if [ "$confirmn" == "n" ];
then
menu0_
fi

}

function counter_ () {

echo -e "${fgred}"
secs=$((1 * 5))
while [ $secs -gt 0 ]; do
  echo -ne "${fgred} ${blink}"
   echo -ne "  You will be back in ... " && echo -ne "$secs\033[0K\r${normal}"
   sleep 1
   : $((secs--))
done
printf %b '\033[m'
}

function pause_ () {
local C1="$(printf "\n${menu}Press [ ${number}Enter ${menu}] ${menu}to continue... ${normal}\n")"

  read -s -p "$C1" fackEnterKey 
  if [ "$fackEnterKey" == "i" ] || [ "$fackEnterKey" == "6" ];then
		find_file_folder_
		else
		menu0_
		fi
  
}

function unset_banner_ (){
    unset BANNER
	unset FIND
	unset GREPBANN
	unset COUNTFIND
} 

function pause_find_ () {

if [ "$finds" == 0 ];
  then
     local C1="$(printf "\n${menu} Press [ ${number}Enter ${menu}] ${menu} to continue ..... \n Press [${number}0${menu}] or [${number}O${menu}] to search again ${normal}\n")"
     read -sn 1 -p "$C1" fackEnterKey 
 if [ "$fackEnterKey" == 0 ] ||  [ "$fackEnterKey" == "O" ] ;
  then 
     find_and_replace_
fi
fi
  
if [ "$finds" == 1 ];
  then
    local C1="$(printf "\n${menu} Press [ ${number}Enter ${menu}] ${menu}to continue .....\n Press [${number}7${menu}] or [${number}p${menu}] to search again ${normal}\n")"
     read -sn 1 -p "$C1" fackEnterKey 
 if [ "$fackEnterKey" == 7 ] ||  [ "$fackEnterKey" == "p" ] ;
  then 
    find_pattern_
fi
fi
  
if [ "$finds" == 2 ];
 then
     local C1="$(printf "\n${menu} Press [ ${number}Enter ${menu}] ${menu} to continue .....\n Press [${number}6${menu}] or [${number}i${menu}] to search again\n${normal}\n")"
      read -sn 1 -p "$C1" fackEnterKey 
if [ "$fackEnterKey" == 6 ] ||  [ "$fackEnterKey" == "i" ] ;
  then 
   find_file_folder_
fi
fi
}

function pause_witout_exit_ () {
  local C1="$(printf "\n${menu} Press [ ${number}Enter ${menu}] ${menu}key to continue .....${normal}\n")"

  read -sn 1 -p "$C1" fackEnterKey 
 
}

function pause_witout1_exit_ () {
 
  read -sn 1 -p "$C1" fackEnterKey 
 
}

function pause_find_old_ () {
echo
local C1="$(printf "${menu}Press [ ${number}Enter ${menu}] ${menu}key to continue...  or press [${fgred}i ${menu}or${fgred} 6${menu}] then press [ ${number}Enter ${menu}]: ${normal}\n")"

  read -n1 -p "$C1" fackEnterKey 
  if [ "$fackEnterKey" == "i" ] || [ "$fackEnterKey" == "6" ];then
		find_file_folder_
		else
		menu0_
		fi
  
}

function pause_file_check_ () {
local ENT=`echo -e "\n\n\n${menu}Press [${number}Enter${menu}] to continue or [${number}e${menu}] to edit file:${normal}\n"`
read  -n 1 -p "$ENT " choice
}
 
 
#System Over View 
function system_status_start_ () {
unset BANNERLOCKED
unset SSHPORTBAN
unset SELINUXBAN
unset FWBAN
unset IPTABLESBAN
unset FAIL2BAN
unset SAMBABAN
unset HTTPDBAN
unset NGINXBAN
unset TOMCATBAN
unset PHPBAN && unset MYSQLBAN && unset POSTGRESBAN && unset MONGOBAN && unset SAMBAUSERSBAN && unset SYSTEMUSERSBAN && unset ROOTUSERSBAN
unset UBUNTUBAN
unset CENTOSBAN
unset_banner_
chk_firewalld_
chk_selinux_
chk_iptables_
chk_fail2ban_
chk_ssh_port_
chk_httpd_port_
chk_php_v_
chk_mysql_
chk_mongo_
chk_postgres_
chk_samba_
chk_samba_users_
chk_sys_active_users_
chk_root_users_
chk_os_
BANNERLOCKED1=`cat $lockedusers | wc -l`
BANNERLOCKED=`echo -e "$BANNERLOCKED1"`
clear && echo && clear

	printf "${menu}      ***********************Over view ${menu}***********************${normal}\n"
	#logo2_
	echo

	echo -e "\n\n${menu}        ${menu1}-----------------------${bgwhite}${menu}OS${menu}${menu1}-------------------------${normal}"
	
	echo -e "\t${green}$CENTOSBAN$UBUNTUBAN${normal}"
	echo -e "${menu}        ${menu1}--------------------------------------------------${normal}\n"
	echo -e "\n${menu}        ${menu1}----------------------${bgwhite}${menu}Date${menu}${menu1}------------------------${normal}"
	get_server_time_
	echo -e "${menu}        ${menu1}--------------------------------------------------${normal}\n"
	echo -e "\n${menu}        ${menu1}---------------------${bgwhite}${menu}Security${menu}${menu1}---------------------${normal}"
	echo -e "\t${menu}$SSHPORTBAN $FWBAN $SELINUXBAN $IPTABLESBAN $FAIL2BAN${normal}"
	echo -e "${menu}        ${menu1}--------------------------------------------------${normal}\n"
	echo -e "\n${menu}        ${menu1}---------------------${bgwhite}${menu}Servers${menu}${menu1}----------------------${normal}"
	echo -e "\t${menu}$SAMBABAN $HTTPDBAN$NGINXBAN$TOMCATBAN $PHPBAN $MYSQLBAN $POSTGRESBAN $MONGOBAN ${normal}"
	echo -e "${menu}        ${menu1}--------------------------------------------------${normal}\n"
	echo -e "\n${menu}        ${menu1}----------------------${bgwhite}${menu}Users${menu}${menu1}-----------------------${normal}"
	echo -e "\t${green}[${fgred} $BANNERLOCKED${green}] Locked users${normal}\n\t$SAMBAUSERSBAN\n\t$SYSTEMUSERSBAN\n\t$ROOTUSERSBAN $CRONBANN     ${normal}"
	echo -e "${menu}        ${menu1}--------------------------------------------------${normal}\n"
	echo -e "${menu}${normal}"
	echo -e "\n\n\n\n\n"
	unset BANNER
	$SLEEP2
	
	start_
	#clear
}
 
function system_status_ () {
unset BANNERLOCKED
unset SSHPORTBAN
unset SELINUXBAN
unset FWBAN
unset IPTABLESBAN
unset FAIL2BAN
unset SAMBABAN
unset HTTPDBAN
unset NGINXBAN
unset TOMCATBAN
unset PHPBAN && unset MYSQLBAN && unset POSTGRESBAN && unset MONGOBAN && unset SAMBAUSERSBAN && unset SYSTEMUSERSBAN && unset ROOTUSERSBAN
unset UBUNTUBAN
unset CENTOSBAN
unset_banner_
chk_firewalld_
chk_selinux_
chk_iptables_
chk_fail2ban_
chk_ssh_port_
chk_httpd_port_
chk_php_v_
chk_mysql_
chk_mongo_
chk_postgres_
chk_samba_
chk_samba_users_
chk_sys_active_users_
chk_root_users_
chk_os_
BANNERLOCKED1=`cat $lockedusers | wc -l`
BANNERLOCKED=`echo -e "$BANNERLOCKED1"`
clear && echo && clear

	printf "${menu}      ***********************Over view ${menu}***********************${normal}\n"
	#logo2_
	echo

	echo -e "\n\n${menu}        ${menu1}-----------------------${bgwhite}${menu}OS${menu}${menu1}-------------------------${normal}"
	
	echo -e "\t${green}$CENTOSBAN$UBUNTUBAN${normal}"
	echo -e "${menu}        ${menu1}--------------------------------------------------${normal}\n"
	echo -e "\n${menu}        ${menu1}----------------------${bgwhite}${menu}Date${menu}${menu1}------------------------${normal}"
	get_server_time_
	echo -e "${menu}        ${menu1}--------------------------------------------------${normal}\n"
	echo -e "\n${menu}        ${menu1}---------------------${bgwhite}${menu}Security${menu}${menu1}---------------------${normal}"
	echo -e "\t${menu}$SSHPORTBAN $FWBAN $SELINUXBAN $IPTABLESBAN $FAIL2BAN${normal}"
	echo -e "${menu}        ${menu1}--------------------------------------------------${normal}\n"
	echo -e "\n${menu}        ${menu1}---------------------${bgwhite}${menu}Servers${menu}${menu1}----------------------${normal}"
	echo -e "\t${menu}$SAMBABAN $HTTPDBAN$NGINXBAN$TOMCATBAN $PHPBAN $MYSQLBAN $POSTGRESBAN $MONGOBAN ${normal}"
	echo -e "${menu}        ${menu1}--------------------------------------------------${normal}\n"
	echo -e "\n${menu}        ${menu1}----------------------${bgwhite}${menu}Users${menu}${menu1}-----------------------${normal}"
	echo -e "\t${green}[${fgred} $BANNERLOCKED${green}] Locked users${normal}\n\t$SAMBAUSERSBAN\n\t$SYSTEMUSERSBAN\n\t$ROOTUSERSBAN $CRONBANN     ${normal}"
	echo -e "${menu}        ${menu1}--------------------------------------------------${normal}\n"
	echo -e "${menu}${normal}"
	echo -e "\n\n\n\n\n"
	unset BANNER
	pause_witout1_exit_
	
	start_
	#clear
} 

current_server_time_centos_ () {
DATECHK=`date | awk '{print  $4, "  |  ", $3, "  |  ", $2,"  |  ", $6 }'`
CHKTIMEZONE=`ls -l /etc/localtime | grep --color=always -o -P '(?<=(/usr/share/zoneinfo/)).*(?=$)'`
longstr=`(echo -e "$DATECHK" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo -e "$longstr" | sed 's/./-/g') 
#echo -e "            Current Server Time   \n"

echo -e "\t${green}     Time       Day      Month      Year   ${normal}"
echo -e "\t+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "  |${normal}"
 else
  echo -e "  |${normal}"
 fi
done < <(printf '%s\n' "$DATECHK")
echo -e "\t+$edge---+${normal}"
echo -e "\t${green}[Timezone: $CHKTIMEZONE${green}]${normal}"
}

current_server_time_ubuntu_ () {
DATECHK=`date | awk '{print  $5, "  |  ", $2, "  |  ", $3,"  |  ", $4 }'`
CHKTIMEZONE=`ls -l /etc/localtime | grep --color=always -o -P '(?<=(/usr/share/zoneinfo/)).*(?=$)'`
longstr=`(echo "$DATECHK" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
#echo -e "            Current Server Time   \n"
echo -e "\t${green}     Time       Day      Month      Year   ${normal}"
echo -e "\t+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "  |${normal}"
 else
  echo -e "  |${normal}"
 fi
done < <(printf '%s\n' "$DATECHK")
echo -e "\t+$edge---+${normal}"
echo -e "\t${green}[Timezone: $CHKTIMEZONE${green}]${normal}"
 
}

get_server_time_ () {

if [ "$CENTOS" == 1 ];
  then
  
  
  current_server_time_centos_
 
elif [ "$UBUNTU" == 1 ];
    then
	current_server_time_ubuntu_
	fi
}

chk_firewalld_ () { 
#1 Checl firewall if up or down
if [ "$CENTOS" == 1 ];
  then
         UFWCHK=`systemctl status firewalld | grep -o "Active: active" | wc -l`
		 
if [ "$UFWCHK" == 0 ]; 
    then 
	return 0
        #FWBAN="${grey}[FIREWALL]${normal}"
      else
        FWBAN="${green}[FIREWALL]${normal}"
fi
		  
elif [ "$UBUNTU" == 1 ];
    then
	     UFWCHK=`systemctl status ufw | grep -o "Active: active" | wc -l`
if [ "$UFWCHK" == 0 ]; 
     then
		FWBAN="${green}[${RED}${blink}FIREWALL OFF${normal}${green}]${normal}"
     else
        FWBAN="${green}[FIREWALL]${normal}"
fi
			
fi
}

chk_selinux_ () { 
#1 Checl selinux if up or down
SESTATUS1=`ls  /etc/selinux | grep config | wc -l`


if [ "$SESTATUS1" != 0 ] ;
  then
  SESTATUS=`sestatus | grep -o disabled | wc -l`
  if [ "$SESTATUS" == 1 ];
  then
  return 0
    #SELINUXBAN="${grey}[SELINUX]${normal}"
      else
	  
    SELINUXBAN="${green}[SELINUX]${normal}"
	fi
fi
}

chk_iptables_ () { 
#1 Checl selinux if up or down
IPTABLESSTAT=`systemctl | grep iptables | wc -l`
if [ "$IPTABLESSTAT" != 0 ]  ;
  then
     IPTABLESSTAT1=`systemctl status iptables | grep -o "Active: active" | wc -l`
	 if [ "$IPTABLESSTAT1" == 1 ];
	 then
	 IPTABLESBAN="${green}[IPTABLES]${normal}"
    else
	IPTABLESBAN="${green}[${RED}${blink}IPTABLES OFF${normal}${green}]${normal}"
	fi
     else
	 IPTABLESBAN="${green}[${RED}${blink}IPTABLES OFF${normal}${green}]${normal}"
fi
}

chk_fail2ban_ () { 
#1 Checl selinux if up or down
FAIL2BANSTAT=`systemctl | grep fail2ban | wc -l`
if [ "$FAIL2BANSTAT" != 0 ] ;
  then
  FAIL2BANSTAT1=`systemctl status fail2ban | grep -o "Active: active" | wc -l`
  if [ "$FAIL2BANSTAT1" == 1 ];
	 then
	 FAIL2BAN="${green}[FAIL2BAN-ON]${normal}"
    else
	return 0
	 #FAIL2BAN="${grey}[FAIL2BAN-OFF]${normal}"
	fi
     else
	 return 0
	 # FAIL2BAN="${grey}[FAIL2BAN-OFF]${normal}"
fi
  }

chk_ssh_port_ () { 
#1 Checl selinux if up or down
SSHPORTCHK=`grep -e "^Port" /etc/ssh/sshd_config | wc -l`
SSHPORTCHK1=`grep -e "^Port" /etc/ssh/sshd_config`
if [ "$SSHPORTCHK" == 1 ] ;
  then
    SSHPORTBAN="${green}[SSH $SSHPORTCHK1]${normal}"
      else
    SSHPORTBAN="${green}[SSH Port 22]${normal}"
fi
}

chk_httpd_port_ () { 
#1 Checl selinux if up or down
UBUNTUHTTPD=`pgrep -x apache2 | wc -l`
CENTOSHTTPD=`pgrep -x httpd | wc -l`
CHKNGINX=`pgrep -x nginx | wc -l`
CHKTOMCAT=`ps -ef | awk '/[t]omcat/{print $2}' | wc -l`
if [ "$UBUNTUHTTPD" != 0 ] || [ "$CENTOSHTTPD" != 0 ]  || [ "$CHKTOMCAT" != 0 ]  ;
  then
    HTTPDBAN="${green}[APACHE]${normal}"
	elif  [ "$CHKNGINX" != 0 ] ;
	 then
	  HTTPDBAN="${green}[NGINX]${normal}"
	  elif  [ "$CHKTOMCAT" != 0 ] ;
	 then
	  HTTPDBAN="${green}[TOMCAT]${normal}"
	 else
	 return 0
      #HTTPDBAN="${grey}[WEB-SRV]${normal}"
fi
}

chk_php_v_ () { 
PHPCHK2=`ls /usr/bin | grep php | wc -l`
if [ "$PHPCHK2" != 0 ] ;
  then
  PHPCHK=`php -v | grep -Po '(?<=^PHP )[^ ]+'`
  PHPCHK1=`echo "PHP $PHPCHK"`
    PHPBAN="${green}[$PHPCHK1]${normal}"
      else
	  return 0
    #PHPBAN="${grey}[PHP]${normal}"
fi
} 

chk_mysql_ () { 
#1 Checl selinux if up or down
# MYSQLCHK=`ls /var/lib/mysql/ | wc -l`
# MYSQLCHK1=`systemctl status mariadb | grep -o "Active: active" | wc -l`
MYSQLCHK=`ps -ef | grep [m]ysql | wc -l`
if [ "$MYSQLCHK" != 0 ];
  then
    MYSQLBAN="${green}[MYSQL]${normal}"
      else
	  return 0
    #MYSQLBAN="${grey}[MYSQL]${normal}"
fi
}
 
chk_mongo_ () { 
#1 Checl selinux if up or down
MONGOCHK=`ps -ef | grep [m]ongo | wc -l`
if [ "$MONGOCHK" != 0 ];
  then
    MONGOBAN="${green}[MONGO]${normal}"
      else
	  return 0
    #MONGOBAN="${grey}[MONGO]${normal}"
	fi
} 

chk_postgres_ () { 
#1 Checl selinux if up or down
POSTGRESCHK=`ps -ef | grep [p]ostgres | wc -l`
if [ "$POSTGRESCHK" != 0 ];
  then
    POSTGRESBAN="${green}[POSTGRES]${normal}"
      else
	  return 0
    #POSTGRESBAN="${grey}[POSTGRES]${normal}"
	fi
} 

chk_samba_ () { 
#1 Checl selinux if up or down
SMBCHK=`ps -ef | grep [s]mb | wc -l`
if [ "$SMBCHK" != 0 ];
  then
    SAMBABAN="${green}[SAMBA]${normal}"
      else
    SAMBABAN="${grey}[SAMBA]${normal}"
	fi
} 

chk_os_ () { 
#1 Checl selinux if up or down


if [ "$CENTOS" == 1 ];
  then
    CENTOS1=`awk -F= '/^NAME/{print $2}' /etc/os-release | grep -o CentOS `
    CENTOSBAN=`echo -e "[$CENTOS1]"`
      else
    UBUNTU1=`awk -F= '/^NAME/{print $2}' /etc/os-release | grep -o Ubuntu `
	UBUNTUBAN=`echo -e "[$UBUNTU1]"`
	fi
} 

chk_samba_users_ () { 
#1 Checl selinux if up or down

SMBCHK=`ps -ef | grep [s]mb | wc -l`
if [ "$SMBCHK" != 0 ];
  then
  
SMBUSERS=`pdbedit -L | awk -F':' '{print $1 }' | wc -l`
SAMBAUSERSBAN=`echo "${green}[${fgred}$SMBUSERS${green}] ${green}Active SMB Users${normal}"`
fi

} 

chk_sys_active_users_ () { 
#1 Checl selinux if up or down
SYSUSERSCHK=`cat /etc/passwd | grep -v nologin | grep -v false | grep -v sync | awk -F':' '{ print $1 }' | wc -l`
SYSTEMUSERSBAN=`echo "${green}[${fgred}$SYSUSERSCHK${green}] Active SYS Users${normal}"`
} 

chk_root_users_ () {
echo  > $ROOTUSERSTMPLOG
echo  > $ROOTUSERSTMPLOG1
getu1=`getent group wheel | cut -d: -f4`
getu2=`getent group sudo | cut -d: -f4`
getu3=`getent group admin | cut -d: -f4`
getu4=`sudo cat /etc/sudoers | grep --color=always -o -P '(?<=(^)).*(?=ALL=)' | grep -v % | grep -v "#"`
echo $getu1 >> $ROOTUSERSTMPLOG
echo $getu2 >> $ROOTUSERSTMPLOG 
echo $getu3 >> $ROOTUSERSTMPLOG
echo $getu4 >> $ROOTUSERSTMPLOG
sed -i '/^$/d' $ROOTUSERSTMPLOG
sed -i "s/,/ /g" $ROOTUSERSTMPLOG
getu5=`cat stam1.log | tr ' ' "\n" > stam2.log`
sed '$d'  $ROOTUSERSTMPLOG1 >$ROOTUSERSTMPLOG
printf %b '\033[m'
ROOTUSERSCHK=`cat stam1.log | wc -l`
printf %b '\033[m'
ROOTUSERSBAN=`echo "${green}[ ${fgred}$ROOTUSERSCHK${green}] Active ROOT Users${normal}"`
}
 
 chk_time_ () {
 local CHKTIME=`date +"%M"`
 local CHKTIME1=`curl -s --head http://google.com | grep ^Date: | sed 's/Date: //g' | awk '{print  $5 }' | grep -o -P '(?<=(:)).*(?=:)'`
 if [ "$CHKTIME" != "$CHKTIME1" ];
 then 
logo_stop_time_
 else
 system_status_start_
fi
}

#Titles
function cyber_title_no_help01_ () {
#check_editor_pref_
unset BANNERLOCKED
nano_banner_
vim_banner_
vi_banner_
BANNERLOCKED1=`cat $lockedusers`
BANNERLOCKED=`echo -e "\n$BANNERLOCKED1"`  
 CAT=$GREP
clear && echo && clear
	printf "${menu}${menu1}-----------------------------------${normal}User Managment${menu}${menu1}------------------------------${normal}"
	echo -e  "\n${number} ${menu}Change passwd        [${number}1${menu}]${normal}                  ${menu}Lock user               [${number}a${menu}]\n${number} ${menu}Create user          [${number}insert${menu}]            ${number} ${menu}Unlock user             [${number}s${menu}]\n${number} ${menu}Delete user          [${number}delete${menu}] ${normal}           ${number} ${menu}Remove user from group  [${number}-${menu}]${normal}\n${number} ${menu}Create group for DEV [${number}g${menu}]                  ${menu}last user logins        [${number}enter${menu}]\n${menu} Back to explorer     [${number}esc${menu}]                ${menu}Add user to group       [${number}+${menu}]\n${menu} Create new group     [${number}f${menu}]                  ${menu}List SMB users & shares [${number}l/L${menu}]\n${menu} Add user to ${green}SMB ${menu}or ${green}Reset password${menu} [${number}==>${menu}]   ${menu}Exit [${fgred}q${menu}/${fgred}x${menu}]\n${menu} Add user to asterisk on ${green}FreePBX${menu}   [${number}0${menu}]                "         
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu} $BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}Locked users: ${number}$BANNERLOCKED${normal}        "
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	#echo -e "$DIRLOCATION ${green} $PATH1${normal}"
	#echo -e "$DIRLOCATION ${green} $CURLOCATION1 ${normal}"
	unset BANNER
	
	#clear
} 

function cyber_title1_ () {
clear && echo -e "" && clear
printf "\n\n${menu}*****${normal}Wellcom to FindMe${menu}*****${normal}\n\n"
logo2_
#IFS=$'\n' 
}

function cyber_title_no_help_ () {
#check_editor_pref_
 nano_banner_
 vim_banner_
 vi_banner_
IFS=$'\n' 
  set -f 
 CAT=$GREP
# CURDIR=`ls $lsopt $PATH1 -C -1`
clear && echo && clear
	printf "${menu}${menu1}------------------------------------------${normal}0${menu}${menu1}-------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}]${normal}"         
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$du"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	#echo -e "$DIRLOCATION ${green} $PATH1${normal}"
	echo -e "$DIRLOCATION ${green} $CURLOCATION1 ${normal}"
	
	echo
	echo -e "\n${menu} To exit press [${number}q${menu}] + [${number}Enter${menu}]\n To help press [${number}h${menu}] + [${number}Enter${menu}] ${normal}"
	logo_lets_do_this_
	unset BANNER
	
	#clear
} 

function cyber_title_ () {
#check_editor_pref_
 nano_banner_
 vim_banner_
 vi_banner_
IFS=$'\n' 
  set -f 
 CAT=$GREP
CURDIR=`ls $lsopt $PATH1 -C -1`
clear
	printf "${menu}${menu1}------------------------------------------${normal}0${menu}${menu1}-------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}]${normal}"         
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$du"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	#echo -e "$DIRLOCATION ${green} $PATH1${normal}"
	echo -e "$DIRLOCATION ${green} $CURLOCATION1 ${normal}"
	echo
	logo_p_
	echo -e "\n\n\n${menu} To exit press [${number}q${menu}] + [${number}Enter${menu}]\n To help press [${number}h${menu}] + [${number}Enter${menu}] ${normal}\n\n"
	unset BANNER
} 

function cyber_title_good_ () {
#check_editor_pref_
#
 nano_banner_
 vim_banner_
 vi_banner_
IFS=$'\n' 
  set -f 
 CAT=$GREP
 CURDIR=`ls $lsopt $PATH1 -C -1`
clear
	printf "${menu}${menu1}----------------------------------------${normal}FIND${menu}-----------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}]${normal}"         
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$du"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}${green}${blink}$COPYPASTE${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	#echo -e "$DIRLOCATION ${green} $PATH1${normal}"
	echo -e "$DIRLOCATION ${green} $CURLOCATION1 ${normal}"
	echo
	logo_p_good_
	#echo -e "\n\n\n${menu}To exit press [${number}q${menu}] + [${number}Enter${menu}]\nTo help press [${number}h${menu}] ${normal}\n\n"
	unset BANNER
	unset COPYPASTE
} 

function cyber_title_not_good_ () {
#check_editor_pref_
 nano_banner_
 vim_banner_
 vi_banner_
IFS=$'\n' 
  set -f 
 CAT=$GREP
CURDIR=`ls $lsopt $PATH1 -C -1`
clear
	printf "${menu}${menu1}------------------------------------------${normal}0${menu}-------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}]${normal}"         
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$du"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	#echo -e "$DIRLOCATION ${green} $PATH1${normal}"
	echo -e "$DIRLOCATION ${green} $CURLOCATION1 ${normal}"
	echo
	logo_p_not_good_
	#echo -e "\n\n\n${menu}To exit press [${number}q${menu}] + [${number}Enter${menu}]\nTo help press [${number}h${menu}] ${normal}\n\n"
	unset BANNER
} 

function cyber_title_good_folder_search_ () {
history -r script_history
 nano_banner_
 vim_banner_
 vi_banner_
IFS=$'\n' 
  set -f 
 CAT=$GREP
 CURDIR=`ls $lsopt $PATH1 -C -1`
clear
	printf "${menu}${menu1}----------------------------------------${normal}FIND${menu}-----------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}]${normal}"         
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$du"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}${green}${blink}$COPYPASTE${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	#echo -e "$DIRLOCATION ${green} $PATH1${normal}"
	echo -e "$DIRLOCATION ${green} $CURLOCATION1 ${normal}"
	echo
	logo_p_good_folder_search_
	#echo -e "\n\n\n${menu}To exit press [${number}q${menu}] + [${number}Enter${menu}]\nTo help press [${number}h${menu}] ${normal}\n\n"
	unset BANNER
	unset COPYPASTE
} 

#Logo
function logo_lets_do_this_ () {
greetgusr_ 
echo -e "\n\n"
echo -e ""$greet" Boss "$whoami", "
cat << "EOF"
 Lets do this
 ------------
  \
   \
        .--.   | 
       |o_o | ~@
       |:_/ |_/
      //   \ \
     (|  1  | )
    /'\_   _/`\
    \___)=(___/
EOF
}

function logo_p_0_ () {
greetgusr_ 
echo -e ""$greet" Boss "$whoami", "
cat << "EOF"
 Please give me chance to help you
 ---------------------------------
  \
   \
        .--.   | 
       |o_o | ~@
       |:_/ |_/
      //   \ \
     (|  1  | )
    /'\_   _/`\
    \___)=(___/
EOF
}

function logo_p_1_ () {
cat << "EOF"
 Hi Boss,
 How i understand your first try was not good.
 Please be more accurate.
 Lets try again.
 --------------------------------------------
   \
    \
        .--.   |/
       |o_o | ~@ 
       |:_/ |_/
      //   \ \
     (|  2  | )
    /'\_   _/`\
    \___)=(___/
EOF
}

function logo_p_2_ () {
cat << "EOF"
 Boss, 
 This is your third try.
 I belive in this time we will get good result.
 Lets go
 ---------------------------------------------
   \
    \
  \|/   .--.  \|/ 
   @~  |O_O | ~@ 
    \_ | _/ |_/ 
      //   \ \
     (|  3  | )
    /'\_   _/`\
    \___)=(___/
EOF
}

function logo_p_3_ () {
cat << "EOF"

 Dear Boss,
 That realy you? 
 Your limit for today is reached.
 Try in another day Ha Ha Ha
 -------------------------------
   \
    \
 \||/   .--.  \||/ 
   @~  |o o | ~@ 
    \_ | O  |_/ 
      //   \ \
     (|  4  | )
    /'\_   _/`\
    \___)=(___/
EOF
sleep 1
clear
cat << "EOF"
 Bay 
 --------
   \
    \
        .--.  \|/ 
       |o o | ~@ 
       | O  |_/ 
      //   \ \
     (|     | )
    /'\_   _/`\
    \___)=(___/
EOF
sleep 1
clear
cat << "EOF"
 Bay Bay
 --------
   \
    \
        .--.   
       |o o |  
       | O  |_ __ ~@/__
      //   \ \      \
     (|     | )
    /'\_   _/`\
    \___)=(___/
EOF
sleep 1
clear
cat << "EOF"
 Bay Bay Bay
 -----------
   \
    \
        .--.   
       |0 0 |  
       | )  |_
      //   \ \ \ 	  
     (|     | ) ~@ /__ 
    /'\_   _/`\    \
    \___)=(___/
EOF
sleep 1
clear
echo  > $LOGO
#menu0_
}
 
function logo_p_ () {
local chk=`cat $LOGO`

if [ -z "$chk" ]; 
then
 logo_p_0_
  echo 1 > $LOGO
  
fi

if [ "$chk" == 1 ]; 
then
logo_p_1_
echo 2 > $LOGO
fi

if [ "$chk" == 2 ]; 
then
echo 3 > $LOGO
 logo_p_2_
fi
if [ "$chk" == 3 ]; 
then
 logo_p_3_
fi
}

function logo_p_not_good_ () {
cat << "EOF"
 Somthing went wrong. Pleas try again
 ------------------------------------
   \
    \
        .--.
       |o_o |
       | 0  | 
      //   \ \
     (|     | )
    /'\_   _/`\
    \___)=(___/
EOF
}

function logo_p_good_ () {
export trychk1=`cat $LOGO`
cat << "EOF"
 Looks that we coped with not simple task
 ----------------------------------------
   \
    \
        .--.
       |o_o |
       |:_/ |
      //   \ \
     (|     | )
    /'\_   _/`\
    \___)=(___/
EOF
if [ -n "$LOGO"  ];
then
echo -e "\n You got good result after "$trychk1" tries"
echo > $LOGO
else
echo > $LOGO
fi
}

function logo_p_good_folder_search_ () {
cat << "EOF"
 Looks that we coped with not simple task
 ----------------------------------------
   \
    \
        .--.
       |o_o |
       |:_/ |
      //   \ \
     (|     | )
    /'\_   _/`\
    \___)=(___/
EOF
}

function logo_ () {
echo -e "\n\n"
cat << "EOF"
        \|/ ____ \|/       
         @~/ 00 \~@        
        /_( \__/ )_\       
           \__U_/
	
EOF
 
}

function logo_sad_ () {
echo -e ""
cat << "EOF"
      \|/   ____   \|/       
       @~  / 00 \  ~@        
        \_( '__' )_/       
           \'___/
	
EOF
 
}

function logo_big_ () {
echo -e "\n\n"
cat << "EOF"
                          oooo$$$$$$$$$$$$oooo
                      oo$$$$$$$$$$$$$$$$$$$$$$$$o
                   oo$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$o         o$   $$ o$
   o $ oo        o$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$o       $$ $$ $$o$
oo $ $ "$      o$$$$$$$$$    $$$$$$$$$$$$$    $$$$$$$$$o       $$$o$$o$
"$$$$$$o$     o$$$$$$$$$      $$$$$$$$$$$      $$$$$$$$$$o    $$$$$$$$
  $$$$$$$    $$$$$$$$$$$      $$$$$$$$$$$      $$$$$$$$$$$$$$$$$$$$$$$
  $$$$$$$$$$$$$$$$$$$$$$$    $$$$$$$$$$$$$    $$$$$$$$$$$$$$  """$$$
   "$$$""""$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$     "$$$
    $$$   o$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$     "$$$o
   o$$"   $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$       $$$o
   $$$    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$" "$$$$$$ooooo$$$$o
  o$$$oooo$$$$$  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$   o$$$$$$$$$$$$$$$$$
  $$$$$$$$"$$$$   $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$     $$$$""""""""
 """"       $$$$    "$$$$$$$$$$$$$$$$$$$$$$$$$$$$"      o$$$
            "$$$o     """$$$$$$$$$$$$$$$$$$"$$"         $$$
              $$$o          "$$""$$$$$$""""           o$$$
               $$$$o                                o$$$"
                "$$$$o      o$$$$$$o"$$$$o        o$$$$
                  "$$$$$oo     ""$$$$o$$$$$o   o$$$$""
                     ""$$$$$oooo  "$$$o$$$$$$$$$"""
                        ""$$$$$$$oo $$$$$$$$$$
                                """"$$$$$$$$$$$
                                    $$$$$$$$$$$$
                                     $$$$$$$$$$"
                                      "$$$""  
EOF
 
}

function logo_stop_time_ () {
clear 
echo -e "\n\n\n\n\n\n"
printf %b '\033[31m'
printf %b '\033[5m'

cat << "EOF"
         `-:-     .::.     -:-`                                                       .::.     -:-`    `::-             
         /MMN`    yMMh    `NMM+    :ohddhy+`    ``                                    dMMy    .NMM/    +MMN`            
         /MMM`    yMMh     NMM+   yMMmysydN/   sNNs                                   dMMs    `MMM:    +MMN             
         :MMN`    sMMy     NMM/  -MMM/   ``` -+dMMd++:   `:+osso/.    -++`./oso/`     hMMs    `MMM-    /MMN             
         -MMN     sMMy     mMM:  `mMMNs/-    /mNMMNmms  /mNMdhdNMNy`  sMMdNmdNMMm-    yMMo    `NMM.    :MMm             
         .MMm     oMMs     dMM:   .smMMMNds.  `yMMh``` :NMM:` `-mMMo  sMMN/``.hMMm    yMM+     NMM.    :MMd             
         .MMm     +MMo     hMM-     `-+yNMMm.  yMMy    sMMd     sMMd  sMMh    /MMM`   sMM/     mMM`    -MMh             
          +o:     .++.     -o+`  ``     /MMM/  yMMy    oMMm`    hMMy  sMMd`   oMMN    .o+`     :o/     `+o:             
         :dmd`    omms    `hmd/  ody+//+dMMd`  oMMN+/: .mMMh/:/yMMm.  sMMMd+/sNMMo    ymmo    .dmd-    /dmh`            
         :mmd`    smmy    `dmm/  -ydmNNmmh+`   `ymNNmo  .odmNNmmho.   sMMdymNNmh/     hmmo    .mNm:    /mmd`            
          ..`     `..`     `..     `....`        `...     `....`      sMMh `...       `..      `..      ..`             
                                                                      sMMh                                              
                                                                      .//-                                              
                                                                                                                        
                                                                                                                        
                                                                                                                        
                                                                                                                        
                                                                                                                        
                                                                                                                        
                  .-.                         ````                                                                      
     -hdddddddh` oMMN.                     :sdmmmdy:                                                                    
     /MMMhyyyys  .os+                     sMMNs+osmy                                                                    
     /MMM`       .sso  /sso`  `sss`       MMMs          `/syhys/    :ss.:yhs.sss`    :ss/   -oyhyy+.    os+`oyy:        
     /MMM.````   /MMN  `dMMh`.mMN/        yMMMds:`     +NMmooyMMm.  oMMmMNmN`mMMs   `NMM: .dMMyoodMMs   MMNNMmN+        
     /MMMMMMMMh  /MMN   `hMMdmMN:          :hNMMMMd/  :MMN````oMMh  oMMN+    :MMM-  yMMy  dMMo````NMM-  MMMd.           
     /MMM+////-  /MMN    `NMMMM+              -+dMMM+ sMMMMMMMMMMh  oMMd      yMMd :MMm`  MMMMMMMMMMM:  MMM/            
     /MMM`       /MMN   `hMMdMMN:         .     `NMMy +MMm```````   oMMd      `NMM+dMM/   NMM+``````    MMM/            
     /MMM`       /MMN  `dMMo +MMN/       :Ndyo+odMMm. `dMMd+///oy-  oMMd       /MMMMMy    /NMNs///+ss   MMM/            
     :ddh`       -ddh  sdd+   +ddh.      `oydmmmdy/`   `/ydmmmdhs`  /dds        sdddh.     .ohmmmmdh+   hdd-            
      ``          ``    ``     ```          `````         `````      ``          ```          `````      ``             
                                                                                                                        
                                                                                                                        
                                                                                                                        
                                                                                                                        
                                                                                                                        
                                                                                                                        
                                                                                                                        
                                                                                                                        
                               ````````````  -//.                                                                       
                              /mmmmmmmmmmmm/ mMMy                                                                       
                              .oooomMMmoooo. :+/.         ``     ``          ```                                        
                                   hMMh      ohh/  .hh+:shddy:./yddho.    .+ydddhs:                                     
                                   hMMh      dMMo  -MMNNdshMMMmNhymMMm`  :mMmo//hMMs                                    
                                   hMMh      dMMo  -MMM/   hMMd.  .MMM: `NMM+---:MMM.                                   
                                   hMMh      dMMo  -MMM`   sMMy   `NMM: .MMMmmmmmmmm.                                   
                                   hMMh      dMMo  -MMM`   sMMy   `NMM: `NMM/     ``                                    
                                   hMMh      dMMo  -MMM`   sMMy   `NMM:  /NMNyo+osho                                    
                                   +hh+      ohy:  .yhy`   /hh+    shy.   .+yhddhys-                                    
                                                                                     

EOF
printf %b '\033[m'
pause_witout_exit_
printf %b '\033[m'
start_
}

function logo2_ () {
cat << "EOF"
          _,.
        ,` -.)
       '( _/'-\\-.               
      /,|`--._,-^|            ,     
      \_| |`-._/||          ,'|       
        |  `-, / |         /  /      
        |     || |        /  /       
         `r-._||/   __   /  /  
     __,-<_     )`-/  `./  /
    '  \   `---'   \   /  / 
   /    |           |./  /  
   \    /  FindMe   //  /     
    \_/' \         |/  /         
     |    |   _,^-'/  /              
     |    , ``  (\/  /_        
      \,.->._    \X-=/^         
      (  /   `-._//^`  
       `Y-.____(__}              
        |     {__)           
              ()`     
Your Smart Cyber Assistent

EOF
}

function logo_clock_ () {
echo -e ""
cat << "EOF"
                                                                   
                        .:/osyhhmmmmmmdhys+/-`                        
                   `-+ymmhso/:-.``:.`..-/+oydmhs/.                    
                `/ymds+-`        :my        `.:ohmho-                 
              -smdo--+.          -ds           //./ymh/`              
            :ymy:`  -dm:          `          `yms   .oddo`            
          .ymy-      .o:         .ho         `o/      `+dd+`          
         +md:                    :Nh                    .smh.         
       `yms`                     -mh                      :dy:        
      `ymo`o+-`                  :Nh                   ./o:.hm/       
     `ymo  /yhs                  :Nh                  -hho. .dm:      
     oNy     ``                  :Nh                   ``    -mm.     
    .mm.                         :Nh                          +Ny     
    smo                          :Nh                          `mm.    
    dm.                          :mh                           sm+    
   .mm  ```                     `+dd-                     `.`` +Ny    
   -md +hhh/                    :d-+d-`                  `yyyy./Ny    
   .Nm `...`                    `/++ydho:`                `... /ms    
    mN.                              ./sdhs:.                  sN+    
    sN+                                 `:sdds/`              `mm.    
    -md`                                   `:os`              +Ny     
     sms     ``                                        ``    .mm.     
     `hN+  :shs                                       -hy+. `yd/      
      .hm+`ss:`                                        -/s/.yh/       
       `yms`                                              -dm/        
        `omh-                                           `omh-         
          -hms.      .+:                     `+/      `/dmo`          
            /hms-`  .dm/          `          `ymo   `+dms.            
              :ymh+.-o-          .hs           ++`:smdo.              
                .+hmhs/.         -dh         `./ymds:                 
                   `:ohmdyo+:-.```:- ``.:/oshhyo/-                    
                       `-/+syhdmmmmmmmmdhyo+:`                        
                                `````               
EOF
}



#Interface Otions

#Hiden
function enable-hiden_ () {
export lsopt=-la
HIDENONBAN="${fgred}ON${normal}"
}

function disable-hiden_ () {
HIDENONBAN="${menu}ON${normal}"
export lsopt=-l
HIDENOFFBAN="${menu}OFF${normal}"

}

#Editors
function vi_banner_ () {
VI=`ls /usr/bin | grep -e "vi$" | wc -l`
if [ "$VI" == 0 ]; 
 then
  VIB="${grey}VI${normal}"
  
elif [ "$EDITOR" == "vi" ]; 
 then
  VIB="${fgred}VI${normal}"
else
  VIB="${green}VI${normal}"
fi

}

function vim_banner_ () {
if [ "$VIM" == 0 ]; 
 then
   VIMB="${grey}VIM${normal}"  
elif [ "$EDITOR" == "vim" ]; 
 then
   VIMB="${fgred}VIM${normal}"
 else
   VIMB="${green}VIM${normal}"
fi
return 0
}

function nano_banner_ () {
NANO=`ls /usr/bin | grep nano | wc -l`
if [ "$NANO" == 0 ]; 
 then
  NANOB="${grey}NANO${normal}"
  
elif [ "$EDITOR" == "nano" ]; 
 then
  NANOB="${fgred}NANO${normal}"
else
  NANOB="${green}NANO${normal}"
fi
return 0
}

function nano_ () {
unset EDITOR
EDITORTMP1=/tmp/findme/.editorfind.log
EDIPREF=`cat $EDITORTMP1`
NANO=`ls /usr/bin | grep nano | wc -l`

if [ "$NANO" == 0 ]; 
then
cyber_title_
local C1="$(printf "\n${menu}Boss ${number}nano${menu} is not instaled on this machine to install it press [ ${fgred}y${menu} ] or [ ${number}Enter${menu} ] to skip: ${normal}\n")"
read  -e -n 1 -s -p "$C1" choice
if [ "$choice" == "y" ];
then
if [ "$CENTOS" != 0 ] ;
then
echo -e "\n${menu}${blink}Installing nano .......${normal}\n" && sleep 1
yum install nano -y 
export EDITOR=nano
printf nano > $EDITORTMP1
echo -e "\n${menu}I finish nano instalation now you can use it.${normal}\n"
sleep 2
elif [ "$UBUNTU" != 0 ] ;
then
echo -e "\n${menu}${blink}Installing nano .......${normal}\n" && sleep 1
apt-get install nano -y
export EDITOR=nano
printf nano > $EDITORTMP1
echo -e "\n${menu}I finish nano instalation now you can use it.${normal}\n"
sleep 2
else
return 0
fi
export EDITOR=nano
printf nano > $EDITORTMP1
menu0_
fi
fi
export EDITOR=nano
printf nano > $EDITORTMP1
menu0_

}

function vim_ () {
unset EDITOR
EDITORTMP1=/tmp/findme/.editorfind.log
EDIPREF=`cat $EDITORTMP1`
VIM=`ls /usr/bin | grep "vim$" | wc -l`
if [ "$VIM" == 0 ]; 
then
cyber_title_
local C1="$(printf "\n${menu}Boss ${number}vim${menu} is not instaled on this machine to install it press [ ${fgred}y${menu} ] or [ ${number}Enter${menu} ] to skip: ${normal}\n")"
read -e -n 1 -s -p "$C1" choice
if [ "$choice" == "y" ];
then
if [ "$CENTOS" != 0 ] ;
then
echo -e "\n${menu}${blink}Installing vim .......${normal}\n" && sleep 1
yum install vim -y 
export EDITOR=vim
printf vim > $EDITORTMP1
echo -e "\n${menu}I finish vim instalation now you can use it.${normal}\n"
sleep 2
elif [ "$UBUNTU" != 0 ] ;
then
echo -e "\n${menu}${blink}Installing vim .......${normal}\n" && sleep 1
apt-get install vim -y
export EDITOR=vim
printf vim > $EDITORTMP1
echo -e "\n${menu}I finish vim instalation now you can use it.${normal}\n"
sleep 2
else
return 0
fi
export EDITOR=vim
printf vim > $EDITORTMP1
menu0_
fi
fi
export EDITOR=vim
echo vim > $EDITORTMP1
menu0_
}

function vi_ () {
unset EDITOR
export EDITOR=vi
echo vi > $EDITORTMP1
}

function check_editor_pref_ () {
export EDITORTMP1=/tmp/findme/.editorfind.log
export EDIPREF=`cat $EDITORTMP1`
export VIM=`ls /usr/bin | grep "vim$" | wc -l`
export NANO=`ls /usr/bin | grep nano | wc -l`
local CHK=`ls -a /tmp/findme | grep .editorfind.log | wc -l`
if [ "$CHK" == 0 ];
then
echo vi > $EDITORTMP1
export EDITOR=vi
else
EDITOR=$EDIPREF
fi

if [ "$NANO" == 0 ] && [ "$VIM" == 0 ] ;
then
printf vi > $EDITORTMP1
export EDITOR=vi
elif [ "$EDIPREF" == "nano" ] && [ "$NANO" == 0 ];
then
printf vi > $EDITORTMP1
export EDITOR=vi
elif [ "$EDIPREF" == "vim" ] && [ "$VIM" == 0 ];
then
printf vi > $EDITORTMP1
export EDITOR=vi
elif [ "$EDIPREF" == "vi" ] && [ "$VI" == 0 ];
then
read -e -p "You dont have installed vi please install first"
else
return 0
fi

}

#Delete / Rename / Create new dir / file /permisions /
function delete_ () {
unset_banner_
#logo_lets_do_this_
 set -f 
#Menu 0
if [ "$selector" == "0" ] ; 
   then
           echo
		echo
		echo
		echo
          export DIR1=`echo "/${menu0_main[$counter]}"`
          local C1="$(printf "${menu}This ${fgred}$DIR1${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	      read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	        rm -rf $DIR1
	       	echo
	        echo -e "${blink}Delete in progres ..... ${normal}"
	        sleep 1
			export  BANNER=`echo -e "Dear "$whoami", \nYou just remove ${fgred}$DIR1${fgred}${menu0_main0[$counter]}${normal}"`
            menu0_
   else
	        menu0_
fi
fi
#Menu 1
if [ "$selector" == "1" ] ; 
   then
         echo
		echo
		echo
		echo
        export DIR2=`echo "$DIR1/${menu0_main1[$counter]}"`
        echo
        local C1="$(printf "${menu}This ${fgred}$DIR2${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR2
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just remove ${green}$DIR1${fgred}/${menu0_main1[$counter]}${normal}"`
         menu0_ && break;
	else
	     menu0_ && break;
fi
fi
#Menu 2
if [ "$selector" == "2" ] ; 
   then
         echo
		echo
		echo
		echo
        export DIR3=`echo "/${menu0_main2[$counter]}"`
        echo
        local C1="$(printf "${menu}This $DIR1$DIR2${fgred}/${menu0_main2[$counter]}${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR1$DIR2/${menu0_main2[$counter]}
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just remove ${green}$DIR1$DIR2/${fgred}${menu0_main2[$counter]} ${normal}"`
         menu1_ && break;
	else
	     menu1_ && break;
fi
fi
#Menu 3
if [ "$selector" == "3" ] ; 
   then
        echo
		echo
		echo
		echo
        export DIR4=`echo "/${menu0_main3[$counter]}"`
        echo
        local C1="$(printf "${menu}This $DIR1$DIR2$DIR3${fgred}$DIR4${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR1$DIR2$DIR3$DIR4
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just remove ${green}$DIR1$DIR2$DIR3${fgred}$DIR4${normal}"`
         menu2_ && break;
	else
	     menu2_ && break;
fi
fi
#Menu 4
if [ "$selector" == "4" ] ; 
   then
 echo
		echo
		echo
		echo
        export DIR5=`echo "/${menu0_main4[$counter]}"`
        echo
        local C1="$(printf "${menu}This $DIR1$DIR2$DIR3$$DIR4${fgred}$DIR5${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR1$DIR2$DIR3$DIR4$DIR5
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just remove ${green}$DIR1$DIR2$DIR3$DIR4${fgred}$DIR5${normal}"`
         menu3_ && break;
	else
	     menu3_ && break;
fi
fi

#Menu 5
if [ "$selector" == "5" ] ; 
   then
 echo
		echo
		echo
		echo
        export DIR6=`echo "/${menu0_main5[$counter]}"`
        echo
        local C1="$(printf "${menu}This $DIR1$DIR2$DIR3$DIR4$DIR5${fgred}$DIR6${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just remove ${green}$DIR1$DIR2$DIR3$DIR4$DIR5${fgred}$DIR6${normal}"`
         menu4_ && break;
	else
	     menu4_ && break;
fi
fi
#Menu 6
if [ "$selector" == "6" ] ; 
   then
 echo
		echo
		echo
		echo
        export DIR7=`echo "/${menu0_main6[$counter]}"`
        echo
        local C1="$(printf "${menu}This $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6${fgred}$DIR7${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just remove ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6${fgred}$DIR7${normal}"`
         menu5_ && break;
	else
	     menu5_ && break;
fi
fi

#Menu 6
if [ "$selector" == "7" ] ; 
   then
 echo
		echo
		echo
		echo
        export DIR8=`echo "/${menu0_main7[$counter]}"`
        echo
        local C1="$(printf "${menu}This $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7${fgred}$DIR8${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just remove ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7${fgred}$DIR8${normal}"`
         menu6_ && break;
	else
	     menu6_ && break;
fi
fi

#Menu 8
if [ "$selector" == "8" ] ; 
   then
 echo
		echo
		echo
		echo
        export DIR9=`echo "/${menu0_main8[$counter]}"`
        echo
        local C1="$(printf "${menu}This $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8${fgred}$DIR9${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just remove ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8${fgred}$DIR9${normal}"`
         menu7_ && break;
	else
	     menu7_ && break;
fi
fi

#Menu 9
if [ "$selector" == "9" ] ; 
   then
 echo
		echo
		echo
		echo
        export DIR10=`echo "/${menu0_main9[$counter]}"`
        echo
        local C1="$(printf "${menu}This $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9${fgred}$DIR10${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just remove ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9${fgred}$DIR10${normal}"`
         menu8_ && break;
	else
	     menu8_ && break;
fi
fi
#Menu 10
if [ "$selector" == "10" ] ; 
   then
 echo
		echo
		echo
		echo
        export DIR11=`echo "/${menu0_main10[$counter]}"`
        echo
        local C1="$(printf "${menu}This $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10${fgred}$DIR11${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just remove ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10${fgred}$DIR11${normal}"`
         menu9_ && break;
	else
	     menu9_ && break;
fi
fi
#Menu 11
if [ "$selector" == "11" ] ; 
   then
 echo
		echo
		echo
		echo
        export DIR12=`echo "/${menu0_main11[$counter]}"`
        echo
        local C1="$(printf "${menu}This $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11${fgred}$DIR12${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11$DIR12
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just remove ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11${fgred}$DIR12${normal}"`
         menu10_ && break;
	else
	     menu10_ && break;
fi
fi
}

function create_dir_ () {
unset_banner_
function read_ () {
logo_lets_do_this_
 set -f 

local C1="$(printf "${menu}Enter new folder name you wish to create: ${normal}\n")"
echo && read -e -p "$C1" foldername
local C2="$(printf "${menu}New folder ${number}"$foldername"${menu} will be created please confirm (${fgred}y${menu}/n) or [ ${fgred}Enter${menu} ]: ${normal}\n")"
echo && read -e -p "$C2" choice
export foldername=$foldername
}	       
#Menu 0
if [ "$selector" == "0" ] ; 
  then
export DIR1=`echo "/${menu0_main[$counter]}"`
PATH1=/
read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
	if [ -n "$foldername" ];
     	then
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new folder ${green}/${fgred}$foldername${normal}"`
	          #echo -e "Creating folder $foldername ........." && sleep 1
	          mkdir -p /$foldername
			  echo -e "${blink}${menu}Going to previuse folder ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
              menu0_ && break ; 
        else
              menu0_ && break ;
fi
fi
#Menu 1
if [ "$selector" == "1" ] ; 
  then
  #export DIR1=`echo "/${menu0_main[$counter]}"`
	export DIR2=`echo "/${menu0_main1[$counter]}"`
read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$foldername" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new folder ${green}$DIR1/${fgred}$foldername${normal}"`
	         
	          mkdir -p $DIR1/$foldername
			  echo -e "${blink}${menu}Going to previuse folder ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
		      menu0_ 
    else
              menu0_ 
fi
fi
#Menu 2
if [ "$selector" == "2" ] ; 
  then
	export DIR3=`echo "/${menu0_main2[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$foldername" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new folder ${green}$DIR1$DIR2/${fgred}$foldername${normal}"`
	          #echo -e "Creating folder $foldername ........." && sleep 1
	          mkdir -p $DIR1$DIR2/$foldername
			  echo -e "${blink}${menu}Going to previuse folder ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
		      menu1_ && break ;
    else
              menu1_ && break ;
fi
fi
#Menu 3
if [ "$selector" == "3" ] ; 
  then
	export DIR4=`echo "/${menu0_main3[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$foldername" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new folder ${green}$DIR1$DIR2$DIR3/${fgred}$foldername${normal}"`
	          #echo -e "Creating folder $foldername ........." && sleep 1
	          mkdir -p $DIR1$DIR2$DIR3/$foldername
			  echo -e "${blink}${menu}Going to previuse folder ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
		      menu2_ && break ;
    else
              menu2_ && break ;
fi
fi
#Menu 4
if [ "$selector" == "4" ] ; 
  then
	export DIR5=`echo "/${menu0_main4[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$foldername" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new folder ${green}$DIR1$DIR2$DIR3$DIR4/${fgred}$foldername${normal}"`
	          #echo -e "Creating folder $foldername ........." && sleep 1
	          mkdir -p $DIR1$DIR2$DIR3$DIR4/$foldername
			  echo -e "${blink}${menu}Going to previuse folder ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 2
fi
		      menu3_  && break ;
    else
              menu3_  && break ;
fi
fi
#Menu 5
if [ "$selector" == "5" ] ; 
  then 
	export DIR6=`echo "/${menu0_main5[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$foldername" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new folder ${green}$DIR1$DIR2$DIR3$DIR4$DIR5/${fgred}$foldername${normal}"`
	          #echo -e "Creating folder $foldername ........." && sleep 1
	          mkdir -p $DIR1$DIR2$DIR3$DIR4$DIR5/$foldername
			  echo -e "${blink}${menu}Going to previuse folder ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 2
fi
		      menu4_ && break ;
    else
              menu4_ && break ;
fi
fi
#Menu 6
if [ "$selector" == "6" ] ; 
  then 
	export DIR7=`echo "/${menu0_main6[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$foldername" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new folder ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/${fgred}$foldername${normal}"`
	          #echo -e "Creating folder $foldername ........." && sleep 1
	          mkdir -p $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/$foldername
			  echo -e "${blink}${menu}Going to previuse folder ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 2
fi
		      menu5_ && break ;
    else
              menu5_ && break ;
fi
fi
#Menu 7
if [ "$selector" == "7" ] ; 
  then
	export DIR8=`echo "/${menu0_main7[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$foldername" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new folder ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/${fgred}$foldername${normal}"`
	          #echo -e "Creating folder $foldername ........." && sleep 1
	          mkdir -p $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/$foldername
			  echo -e "${blink}${menu}Going to previuse folder ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu6_ && break ;
    else
              menu6_ && break ;
fi
fi
#Menu 8
if [ "$selector" == "8" ] ; 
  then
	export DIR9=`echo "/${menu0_main8[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$foldername" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new folder ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/${fgred}$foldername${normal}"`
	          #echo -e "Creating folder $foldername ........." && sleep 1
	          mkdir -p $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/$foldername
			  echo -e "${blink}${menu}Going to previuse folder ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu7_ && break ;
    else
              menu7_ && break ;
fi
fi
#Menu 9
if [ "$selector" == "9" ] ; 
  then
	export DIR10=`echo "/${menu0_main9[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$foldername" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new folder ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/${fgred}$foldername${normal}"`
	          #echo -e "Creating folder $foldername ........." && sleep 1
	          mkdir -p $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/$foldername
			  echo -e "${blink}${menu}Going to previuse folder ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu8_ && break ;
    else
              menu8_ && break ;
fi
fi
#Menu 10
if [ "$selector" == "10" ] ; 
  then
	export DIR11=`echo "/${menu0_main10[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$foldername" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new folder ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/${fgred}$foldername${normal}"`
	          #echo -e "Creating folder $foldername ........." && sleep 1
	          mkdir -p $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/$foldername
			  echo -e "${blink}${menu}Going to previuse folder ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu9_ && break ;
    else
              menu9_ && break ;
fi
fi
#Menu 11
if [ "$selector" == "11" ] ; 
  then
	export DIR12=`echo "/${menu0_main11[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$foldername" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new folder ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR11/${fgred}$foldername${normal}"`
	          #echo -e "Creating folder $foldername ........." && sleep 1
	          mkdir -p $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11/$foldername
			  echo -e "${blink}${menu}Going to previuse folder ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu10_ && break ;
    else
              menu10_ && break ;
fi
fi
#Menu 12
if [ "$selector" == "12" ] ; 
  then
	export DIR12=`echo "/${menu0_main12[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$foldername" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new folder ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR11$DIR12/${fgred}$foldername${normal}"`
	          #echo -e "Creating folder $foldername ........." && sleep 1
	          mkdir -p $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11$DIR12/$foldername
			  echo -e "${blink}${menu}Going to previuse folder ....${normal}" 
			 # sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu11_ && break ;
    else
              menu11_ && break ;
fi
fi
}

function edit_file_ () {
unset_banner_
function read_ () {
unset_banner_
logo_lets_do_this_
 set -f 

local C1="$(printf "${menu}Enter file name you wish to edit: ${normal}\n")"
echo && read -e -p "$C1" filename
echo -e "\n\n"
echo -e "\nHow to use VI editor\n"
echo -e "\n1. Start edit press [ ${fgred}i${normal} ]"
echo -e "2. Exit and SAVE file press [ ${fgred}esc${normal} ] and then type [ ${fgred}:wq${normal} ]"
echo -e "3. Exit without SAVE type [ ${fgred}esc${normal} ] an then type [ ${fgred}:q${normal} ] or [ ${fgred}:q!${normal} ]"
local C3="$(printf "${menu}Press [ Enter ] to continue .... ${normal}\n")"
echo && read -e -p "$C3" ""
export filename=$filename


#local C2="$(printf "${menu}New file ${number}"$filename"${menu} will be created please confirm (${fgred}y${menu}/n) or [ ${fgred}Enter${menu} ]: ${normal}\n")"
#echo && read -e -p "$C2" choice
export filename=$filename
}	       
#Menu 0
if [ "$selector" == "0" ] ; 
  then
export DIR1=`echo "/${menu0_main[$counter]}"`
PATH1=/
read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
	if [ -n "$filename" ];
     	then
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just changed file ${green}/${fgred}$filename${normal}"`
	          ##echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR /$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
              menu0_ && break ; 
        else
              menu0_ && break ;
fi
fi
#Menu 1
if [ "$selector" == "1" ] ; 
  then
	export DIR2=`echo "/${menu0_main1[$counter]}"`
read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just changed file ${green}$DIR1/${fgred}$filename${normal}"`
	          ##echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
		      menu0_ && break ;
    else
              menu0_ && break ;
fi
fi
#Menu 2
if [ "$selector" == "2" ] ; 
  then
	export DIR3=`echo "/${menu0_main2[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just changed file ${green}$DIR1$DIR2/${fgred}$filename${normal}"`
	          ##echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
		      menu1_ && break ;
    else
              menu1_ && break ;
fi
fi
#Menu 3
if [ "$selector" == "3" ] ; 
  then
	export DIR4=`echo "/${menu0_main3[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just changed file ${green}$DIR1$DIR2$DIR3/${fgred}$filename${normal}"`
	          ##echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
		      menu2_ && break ;
    else
              menu2_ && break ;
fi
fi
#Menu 4
if [ "$selector" == "4" ] ; 
  then
	export DIR5=`echo "/${menu0_main4[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just changed file ${green}$DIR1$DIR2$DIR3$DIR4/${fgred}$filename${normal}"`
	          ##echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 2
fi
		      menu3_  && break ;
    else
              menu3_  && break ;
fi
fi
#Menu 5
if [ "$selector" == "5" ] ; 
  then 
	export DIR6=`echo "/${menu0_main5[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just changed file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5/${fgred}$filename${normal}"`
	          ##echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 2
fi
		      menu4_ && break ;
    else
              menu4_ && break ;
fi
fi
#Menu 6
if [ "$selector" == "6" ] ; 
  then 
	export DIR7=`echo "/${menu0_main6[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just changed file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/${fgred}$filename${normal}"`
	          ##echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 2
fi
		      menu5_ && break ;
    else
              menu5_ && break ;
fi
fi
#Menu 7
if [ "$selector" == "7" ] ; 
  then
	export DIR8=`echo "/${menu0_main7[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just changed file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/${fgred}$filename${normal}"`
	          ##echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu6_ && break ;
    else
              menu6_ && break ;
fi
fi
#Menu 8
if [ "$selector" == "8" ] ; 
  then
	export DIR9=`echo "/${menu0_main8[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just changed file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/${fgred}$filename${normal}"`
	          ##echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu7_ && break ;
    else
              menu7_ && break ;
fi
fi
#Menu 9
if [ "$selector" == "9" ] ; 
  then
	export DIR10=`echo "/${menu0_main9[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just changed file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/${fgred}$filename${normal}"`
	          ##echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu8_ && break ;
    else
              menu8_ && break ;
fi
fi
#Menu 10
if [ "$selector" == "10" ] ; 
  then
	export DIR11=`echo "/${menu0_main10[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just changed file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/${fgred}$filename${normal}"`
	          ##echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu9_ && break ;
    else
              menu9_ && break ;
fi
fi
#Menu 11
if [ "$selector" == "11" ] ; 
  then
	export DIR12=`echo "/${menu0_main11[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just changed file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR11/${fgred}$filename${normal}"`
	          ##echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu10_ && break ;
    else
              menu10_ && break ;
fi
fi
#Menu 12
if [ "$selector" == "12" ] ; 
  then
	export DIR12=`echo "/${menu0_main12[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just changed file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR11$DIR12/${fgred}$filename${normal}"`
	          ##echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11$DIR12/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			 # sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu11_ && break ;
    else
              menu11_ && break ;
fi
fi
}

function create_file_ () {
unset_banner_
function read_ () {
logo_lets_do_this_
 set -f 

local C1="$(printf "${menu}Enter new file name you wish to create: ${normal}\n")"
echo && read -e -p "$C1" filename
local C2="$(printf "${menu}New file ${number}"$filename"${menu} will be created please confirm (${fgred}y${menu}/n) or [ ${fgred}Enter${menu} ]: ${normal}\n")"
echo && read -e -p "$C2" choice
echo -e "\n\n"
echo -e "\nHow to use VI editor\n"
echo -e "\n1. Start edit press [ ${fgred}i${normal} ]"
echo -e "2. Exit and SAVE file press [ ${fgred}esc${normal} ] and then type [ ${fgred}:wq${normal} ]"
echo -e "3. Exit without SAVE type [ ${fgred}esc${normal} ] an then type [ ${fgred}:q${normal} ] or [ ${fgred}:q!${normal} ]"
local C3="$(printf "${menu}Press [ Enter ] to continue .... ${normal}\n")"
echo && read -e -p "$C3" ""
export filename=$filename
}	       
#Menu 0
if [ "$selector" == "0" ] ; 
  then
export DIR1=`echo "/${menu0_main[$counter]}"`
PATH1=/
read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
	if [ -n "$filename" ];
     	then
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new file ${green}/${fgred}$filename${normal}"`
	          #echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR /$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
              menu0_ && break ; 
        else
              menu0_ && break ;
fi
fi
#Menu 1
if [ "$selector" == "1" ] ; 
  then
	export DIR2=`echo "/${menu0_main1[$counter]}"`
read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new file ${green}$DIR1/${fgred}$filename${normal}"`
	          #echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
		      menu0_ && break ;
    else
              menu0_ && break ;
fi
fi
#Menu 2
if [ "$selector" == "2" ] ; 
  then
	export DIR3=`echo "/${menu0_main2[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new file ${green}$DIR1$DIR2/${fgred}$filename${normal}"`
	          #echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
		      menu1_ && break ;
    else
              menu1_ && break ;
fi
fi
#Menu 3
if [ "$selector" == "3" ] ; 
  then
	export DIR4=`echo "/${menu0_main3[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new file ${green}$DIR1$DIR2$DIR3/${fgred}$filename${normal}"`
	          #echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
		      menu2_ && break ;
    else
              menu2_ && break ;
fi
fi
#Menu 4
if [ "$selector" == "4" ] ; 
  then
	export DIR5=`echo "/${menu0_main4[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new file ${green}$DIR1$DIR2$DIR3$DIR4/${fgred}$filename${normal}"`
	          #echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 2
fi
		      menu3_  && break ;
    else
              menu3_  && break ;
fi
fi
#Menu 5
if [ "$selector" == "5" ] ; 
  then 
	export DIR6=`echo "/${menu0_main5[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5/${fgred}$filename${normal}"`
	          #echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 2
fi
		      menu4_ && break ;
    else
              menu4_ && break ;
fi
fi
#Menu 6
if [ "$selector" == "6" ] ; 
  then 
	export DIR7=`echo "/${menu0_main6[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/${fgred}$filename${normal}"`
	          #echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 2
fi
		      menu5_ && break ;
    else
              menu5_ && break ;
fi
fi
#Menu 7
if [ "$selector" == "7" ] ; 
  then
	export DIR8=`echo "/${menu0_main7[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/${fgred}$filename${normal}"`
	          #echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu6_ && break ;
    else
              menu6_ && break ;
fi
fi
#Menu 8
if [ "$selector" == "8" ] ; 
  then
	export DIR9=`echo "/${menu0_main8[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/${fgred}$filename${normal}"`
	          #echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu7_ && break ;
    else
              menu7_ && break ;
fi
fi
#Menu 9
if [ "$selector" == "9" ] ; 
  then
	export DIR10=`echo "/${menu0_main9[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/${fgred}$filename${normal}"`
	          #echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu8_ && break ;
    else
              menu8_ && break ;
fi
fi
#Menu 10
if [ "$selector" == "10" ] ; 
  then
	export DIR11=`echo "/${menu0_main10[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/${fgred}$filename${normal}"`
	          #echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu9_ && break ;
    else
              menu9_ && break ;
fi
fi
#Menu 11
if [ "$selector" == "11" ] ; 
  then
	export DIR12=`echo "/${menu0_main11[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR11/${fgred}$filename${normal}"`
	          #echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu10_ && break ;
    else
              menu10_ && break ;
fi
fi
#Menu 12
if [ "$selector" == "12" ] ; 
  then
	export DIR12=`echo "/${menu0_main12[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR11$DIR12/${fgred}$filename${normal}"`
	          #echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11$DIR12/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			 # sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu11_ && break ;
    else
              menu11_ && break ;
fi
fi
}

function cat_ () {
clear
logo_lets_do_this_
 set -f 

printf "${menu}Last search .....${normal}\n\n"
local COUNT=`cat -b $CATTMP1 | wc -l`
n=75 
if [ "$COUNT" -gt "$n" ];then
cat -b $CATTMP1 | more
pause_
else
cat -b $CATTMP1
pause_
fi
menu0_ 
}

function rename_ () {
unset_banner_
function read_ () {
logo_lets_do_this_
 set -f 
 
CURDIR=`ls $lsopt $PATH1 -C -1`
local C1="$(printf "${menu}Enter OLD file or folder name you wish to rename use TAB [${normal}oldname${menu}]: ${normal}\n")"
echo && read -e -p "$C1" oldfilename
local C1="$(printf "${menu}Enter NEW name: ${normal}\n")"
echo && read -e -p "$C1" newfilename
local C2="$(printf "${menu}Old item ${number}"$oldfilename"${menu} will be renamed ${number}"$newfilename"${menu} please confirm (${fgred}y${menu}/n) or [ ${fgred}Enter${menu} ]: ${normal}\n")"
echo && read -e -p "$C2" choice
export oldfilename=$oldfilename
}	       
#Menu 0
if [ "$selector" == "0" ] ; 
  then
export DIR1=`echo "/${menu0_main[$counter]}"`
PATH1=/
read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
	if [ -n "$oldfilename" ];
     	then
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just ranamed  ${number}$PATH${green}$oldfilename${normal} ${menu}to ${green}$newfilename${normal}"`
	          #echo -e "Creating file $oldfilename ........." && sleep 1
	          mv /$oldfilename $PATH1/$newfilename
			  echo -e "${blink}${menu}root dir ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
              menu0_ && break ; 
        else
              menu0_ && break ;
fi
fi
#Menu 1
if [ "$selector" == "1" ] ; 
  then
	export DIR2=`echo "/${menu0_main1[$counter]}"`
read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$oldfilename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just ranamed  ${number}$DIR1/${green}${green}$oldfilename${normal} ${menu}to ${green}$newfilename${normal}"`
	          #echo -e "Creating file $oldfilename ........." && sleep 1
	          mv $DIR1/$oldfilename $DIR1/$newfilename
			  echo -e "${blink}${menu}root dir ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
		      menu0_ && break ;
    else
              menu0_ && break ;
fi
fi
#Menu 2
if [ "$selector" == "2" ] ; 
  then
	export DIR3=`echo "/${menu0_main2[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$oldfilename" ];
     	then
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just ranamed  ${number}$DIR1$DIR2/${green}${green}$oldfilename${normal} ${menu}to ${green}$newfilename${normal}"`
	          #echo -e "Creating file $oldfilename ........." && sleep 1
	          mv $DIR1$DIR2/$oldfilename $DIR1$DIR2/$newfilename
			  echo -e "${blink}${menu}root dir ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
		      menu1_ && break ;
    else
              menu1_ && break ;
fi
fi
#Menu 3
if [ "$selector" == "3" ] ; 
  then
	export DIR4=`echo "/${menu0_main3[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$oldfilename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just ranamed  ${number}$DIR1$DIR2$DIR3/${green}${green}$oldfilename${normal} ${menu}to ${green}$newfilename${normal}"`
	          #echo -e "Creating file $oldfilename ........." && sleep 1
	          mv $DIR1$DIR2$DIR3/$oldfilename $DIR1$DIR2$DIR3/$newfilename
			  echo -e "${blink}${menu}root dir ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
		      menu2_ && break ;
    else
              menu2_ && break ;
fi
fi
#Menu 4
if [ "$selector" == "4" ] ; 
  then
	export DIR5=`echo "/${menu0_main4[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$oldfilename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just ranamed  ${number}$DIR1$DIR2$DIR3$DIR4/${green}${green}$oldfilename${normal} ${menu}to ${green}$newfilename${normal}"`
	          #echo -e "Creating file $oldfilename ........." && sleep 1
	          mv $DIR1$DIR2$DIR3$DIR4/$oldfilename $DIR1$DIR2$DIR3$DIR4/$newfilename
			  echo -e "${blink}${menu}root dir ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 2
fi
		      menu3_  && break ;
    else
              menu3_  && break ;
fi
fi
#Menu 5
if [ "$selector" == "5" ] ; 
  then 
	export DIR6=`echo "/${menu0_main5[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$oldfilename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just ranamed  ${number}$DIR1$DIR2$DIR3$DIR4$DIR5/${green}${green}$oldfilename${normal} ${menu}to ${green}$newfilename${normal}"`
	          #echo -e "Creating file $oldfilename ........." && sleep 1
	          mv $DIR1$DIR2$DIR3$DIR4$DIR5/$oldfilename $DIR1$DIR2$DIR3$DIR4$DIR5/$newfilename
			  echo -e "${blink}${menu}root dir ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 2
fi
		      menu4_ && break ;
    else
              menu4_ && break ;
fi
fi
#Menu 6
if [ "$selector" == "6" ] ; 
  then 
	export DIR7=`echo "/${menu0_main6[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$oldfilename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just ranamed  ${number}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/${green}${green}$oldfilename${normal} ${menu}to ${green}$newfilename${normal}"`
	          #echo -e "Creating file $oldfilename ........." && sleep 1
	          mv $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/$oldfilename $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/$newfilename
			  echo -e "${blink}${menu}root dir ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 2
fi
		      menu5_ && break ;
    else
              menu5_ && break ;
fi
fi
#Menu 7
if [ "$selector" == "7" ] ; 
  then
	export DIR8=`echo "/${menu0_main7[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$oldfilename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just ranamed  ${number}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/${green}${green}$oldfilename${normal} ${menu}to ${green}$newfilename${normal}"`
	          #echo -e "Creating file $oldfilename ........." && sleep 1
	          mv $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR6$DIR7/$oldfilename $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR6$DIR7/$newfilename
			  echo -e "${blink}${menu}root dir ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu6_ && break ;
    else
              menu6_ && break ;
fi
fi
#Menu 8
if [ "$selector" == "8" ] ; 
  then
	export DIR9=`echo "/${menu0_main8[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$oldfilename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just ranamed  ${number}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/${green}${green}$oldfilename${normal} ${menu}to ${green}$newfilename${normal}"`
	          #echo -e "Creating file $oldfilename ........." && sleep 1
	          mv $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/$oldfilename $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/$newfilename
			  echo -e "${blink}${menu}root dir ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu7_ && break ;
    else
              menu7_ && break ;
fi
fi
#Menu 9
if [ "$selector" == "9" ] ; 
  then
	export DIR10=`echo "/${menu0_main9[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$oldfilename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just ranamed  ${number}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/${green}${green}$oldfilename${normal} ${menu}to ${green}$newfilename${normal}"`
	          #echo -e "Creating file $oldfilename ........." && sleep 1
	          mv $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/$oldfilename $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/$newfilename
			  echo -e "${blink}${menu}root dir ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu8_ && break ;
    else
              menu8_ && break ;
fi
fi
#Menu 10
if [ "$selector" == "10" ] ; 
  then
	export DIR11=`echo "/${menu0_main10[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$oldfilename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just ranamed  ${number}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/${green}${green}$oldfilename${normal} ${menu}to ${green}$newfilename${normal}"`
	          #echo -e "Creating file $oldfilename ........." && sleep 1
	          mv $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/$oldfilename $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/$newfilename
			  echo -e "${blink}${menu}root dir ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu9_ && break ;
    else
              menu9_ && break ;
fi
fi
#Menu 11
if [ "$selector" == "11" ] ; 
  then
	export DIR12=`echo "/${menu0_main11[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$oldfilename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just ranamed  ${number}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR11/${blink}${green}$oldfilename${normal} ${menu}to ${green}$newfilename${normal}"`
	          #echo -e "Creating file $oldfilename ........." && sleep 1
	          mv $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11/$oldfilename $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11/$newfilename 
			  echo -e "${blink}${menu}root dir ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu10_ && break ;
    else
              menu10_ && break ;
fi
fi
#Menu 12
if [ "$selector" == "12" ] ; 
  then
	export DIR12=`echo "/${menu0_main12[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$oldfilename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just ranamed  ${number}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR11$DIR12/${green}${green}$oldfilename${normal} ${menu}to ${green}$newfilename${normal}"`
	          #echo -e "Creating file $oldfilename ........." && sleep 1
	          mv $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11$DIR12/$oldfilename $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11$DIR12/$newfilename
			  echo -e "${blink}${menu}root dir ....${normal}" 
			 # sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu11_ && break ;
    else
              menu11_ && break ;
fi
fi
}

function clone_ () {
unset_banner_

 set -f 
#Menu 0 mkdir -p $path2clon1 && cp -R $path2clon/. $path2clon1 
if [ "$selector" == "0" ] ; 
   then
        echo
		echo -e "\n\n${menu}Example: ${normal}"
echo -e "\t${menu}Enter ${number}target${menu}: ${normal}/var/www/my-site-clone${fgred}/${menu} or ${normal} var/www/my-site-clone${menu}${normal}\n"

          export DIR1=`echo "/${menu0_main[$counter]}"`
          local C1="$(printf "${menu}Clone ${fgred}$DIR1${menu} to target: ${normal}\n")"
	      read -e -p "$C1" path2clon1
if [ "$path2clon1" == "q" ] || [ "$path2clon1" == "" ] || [ "$path2clon1" == "" ]; 
   then
          menu0_
fi
	      mkdir -p $path2clon1 &&  cp -R $DIR1/. $path2clon1
	       	echo
	        echo -e "${blink}Cloning in progres ..... ${normal}"
	        sleep 1
			export  BANNER=`echo -e "Dear "$whoami", \nYou just clone ${fgred}$DIR1${fgred}${menu0_main0[$counter]}${normal}"`
            menu0_
 
fi
#Menu 1
if [ "$selector" == "1" ] ; 
   then
        echo
				echo -e "\n\n${menu}Example: ${normal}"
echo -e "\t${menu}Enter ${number}target${menu}: ${normal}/var/www/my-site-clone${fgred}/${menu} or ${normal} var/www/my-site-clone${menu}${normal}\n"

        export DIR2=`echo "$DIR1/${menu0_main1[$counter]}"`
        echo
        local C1="$(printf "${menu}Clone ${fgred}$DIR2${menu} to target: ${normal}\n")"
	    read -e -p "$C1" path2clon1
 if [ "$path2clon1" == "q" ] || [ "$path2clon1" == "" ] ; 
   then
          menu1_
fi
	    mkdir -p $path2clon1 &&  cp -R $DIR2/. $path2clon1
		echo
	    echo -e "${blink}Cloning in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just clone ${green}$DIR1${fgred}/${menu0_main1[$counter]}${normal}"`
         menu0_ && break;

fi
#Menu 2
if [ "$selector" == "2" ] ; 
   then
    echo
					echo -e "\n\n${menu}Example: ${normal}"
echo -e "\t${menu}Enter ${number}target${menu}: ${normal}/var/www/my-site-clone${fgred}/${menu} or ${normal} var/www/my-site-clone${menu}${normal}\n"

        export DIR3=`echo "/${menu0_main2[$counter]}"`
        echo
        local C1="$(printf "${menu}Clone $DIR1$DIR2${fgred}/${menu0_main2[$counter]}${menu} to target: ${normal}\n")"
	    read -e -p "$C1" path2clon1
 if [ "$path2clon1" == "q" ] || [ "$path2clon1" == "" ] ; 
   then
          menu2_
fi
	    mkdir -p $path2clon1 &&  cp -R $DIR1$DIR2$DIR3/. $path2clon1
		echo
	    echo -e "${blink}Cloning in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just clone ${green}$DIR1$DIR2/${fgred}${menu0_main2[$counter]} ${normal}"`
         menu1_ && break;

fi
#Menu 3
if [ "$selector" == "3" ] ; 
   then
       echo
	   				echo -e "\n\n${menu}Example: ${normal}"
echo -e "\t${menu}Enter ${number}target${menu}: ${normal}/var/www/my-site-clone${fgred}/${menu} or ${normal} var/www/my-site-clone${menu}${normal}\n"

        export DIR4=`echo "/${menu0_main3[$counter]}"`
        echo
        local C1="$(printf "${menu}Clone $DIR1$DIR2$DIR3${fgred}$DIR4${menu} to target: ${normal}\n")"
	    read -e -p "$C1" path2clon1
 if [ "$path2clon1" == "q" ] || [ "$path2clon1" == "" ] ; 
   then
          menu3_
fi
	    mkdir -p $path2clon1 &&  cp -R $DIR1$DIR2$DIR3$DIR4/. $path2clon1
		echo
	    echo -e "${blink}Cloning in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just clone ${green}$DIR1$DIR2$DIR3${fgred}$DIR4${normal}"`
         menu2_ && break;

fi
#Menu 4
if [ "$selector" == "4" ] ; 
   then
 echo
 				echo -e "\n\n${menu}Example: ${normal}"
echo -e "\t${menu}Enter ${number}target${menu}: ${normal}/var/www/my-site-clone${fgred}/${menu} or ${normal} var/www/my-site-clone${menu}${normal}\n"

        export DIR5=`echo "/${menu0_main4[$counter]}"`
        echo
        local C1="$(printf "${menu}Clone $DIR1$DIR2$DIR3$$DIR4${fgred}$DIR5${menu} to target: ${normal}\n")"
	    read -e -p "$C1" path2clon1
 if [ "$path2clon1" == "q" ] || [ "$path2clon1" == "" ] ; 
   then
          menu4_
fi
	    mkdir -p $path2clon1 &&  cp -R $DIR1$DIR2$DIR3$DIR4$DIR5/. $path2clon1
		echo
	    echo -e "${blink}Cloning in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just clone ${green}$DIR1$DIR2$DIR3$DIR4${fgred}$DIR5${normal}"`
         menu3_ && break;

fi

#Menu 5
if [ "$selector" == "5" ] ; 
   then
echo
				echo -e "\n\n${menu}Example: ${normal}"
echo -e "\t${menu}Enter ${number}target${menu}: ${normal}/var/www/my-site-clone${fgred}/${menu} or ${normal} var/www/my-site-clone${menu}${normal}\n"

        export DIR6=`echo "/${menu0_main5[$counter]}"`
        echo
        local C1="$(printf "${menu}Clone $DIR1$DIR2$DIR3$DIR4$DIR5${fgred}$DIR6${menu} to target: ${normal}\n")"
	    read -e -p "$C1" path2clon1
 if [ "$path2clon1" == "q" ] || [ "$path2clon1" == "" ] ; 
   then
          menu5_
fi
	    mkdir -p $path2clon1 &&  cp -R $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/. $path2clon1
		echo
	    echo -e "${blink}Cloning in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just clone ${green}$DIR1$DIR2$DIR3$DIR4$DIR5${fgred}$DIR6${normal}"`
         menu4_ && break;

fi
#Menu 6
if [ "$selector" == "6" ] ; 
   then
echo
				echo -e "\n\n${menu}Example: ${normal}"
echo -e "\t${menu}Enter ${number}target${menu}: ${normal}/var/www/my-site-clone${fgred}/${menu} or ${normal} var/www/my-site-clone${menu}${normal}\n"

        export DIR7=`echo "/${menu0_main6[$counter]}"`
        echo
        local C1="$(printf "${menu}Clone $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6${fgred}$DIR7${menu} to target: ${normal}\n")"
	    read -e -p "$C1" path2clon1
 if [ "$path2clon1" == "q" ] || [ "$path2clon1" == "" ] ; 
   then
          menu6_
fi
	    mkdir -p $path2clon1 &&  cp -R $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/. $path2clon1
		echo
	    echo -e "${blink}Cloning in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just clone ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6${fgred}$DIR7${normal}"`
         menu5_ && break;

fi

#Menu 6
if [ "$selector" == "7" ] ; 
   then
echo
				echo -e "\n\n${menu}Example: ${normal}"
echo -e "\t${menu}Enter ${number}target${menu}: ${normal}/var/www/my-site-clone${fgred}/${menu} or ${normal} var/www/my-site-clone${menu}${normal}\n"

        export DIR8=`echo "/${menu0_main7[$counter]}"`
        echo
        local C1="$(printf "${menu}Clone $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7${fgred}$DIR8${menu} to target: ${normal}\n")"
	    read -e -p "$C1" path2clon1
 if [ "$path2clon1" == "q" ] || [ "$path2clon1" == "" ] ; 
   then
          menu7_
fi
	    mkdir -p $path2clon1 &&  cp -R $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/. $path2clon1
		echo
	    echo -e "${blink}Cloning in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just clone ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7${fgred}$DIR8${normal}"`
         menu6_ && break;

fi

#Menu 8
if [ "$selector" == "8" ] ; 
   then
echo
				echo -e "\n\n${menu}Example: ${normal}"
echo -e "\t${menu}Enter ${number}target${menu}: ${normal}/var/www/my-site-clone${fgred}/${menu} or ${normal} var/www/my-site-clone${menu}${normal}\n"

        export DIR9=`echo "/${menu0_main8[$counter]}"`
        echo
        local C1="$(printf "${menu}Clone $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8${fgred}$DIR9${menu} to target: ${normal}\n")"
	    read -e -p "$C1" path2clon1
 if [ "$path2clon1" == "q" ] || [ "$path2clon1" == "" ] ; 
   then
          menu8_
fi
	    mkdir -p $path2clon1 &&  cp -R $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/. $path2clon1
		echo
	    echo -e "${blink}Cloning in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just clone ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8${fgred}$DIR9${normal}"`
         menu7_ && break;

fi

#Menu 9
if [ "$selector" == "9" ] ; 
   then
echo
				echo -e "\n\n${menu}Example: ${normal}"
echo -e "\t${menu}Enter ${number}target${menu}: ${normal}/var/www/my-site-clone${fgred}/${menu} or ${normal} var/www/my-site-clone${menu}${normal}\n"

        export DIR10=`echo "/${menu0_main9[$counter]}"`
        echo
        local C1="$(printf "${menu}Clone $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9${fgred}$DIR10${menu} to target: ${normal}\n")"
	    read -e -p "$C1" path2clon1
 if [ "$path2clon1" == "q" ] || [ "$path2clon1" == "" ] ; 
   then
          menu8_
fi
	    mkdir -p $path2clon1 &&  cp -R $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/. $path2clon1
		echo
	    echo -e "${blink}Cloning in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just clone ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9${fgred}$DIR10${normal}"`
         menu8_ && break;
fi
#Menu 10
if [ "$selector" == "10" ] ; 
   then
echo
				echo -e "\n\n${menu}Example: ${normal}"
echo -e "\t${menu}Enter ${number}target${menu}: ${normal}/var/www/my-site-clone${fgred}/${menu} or ${normal} var/www/my-site-clone${menu}${normal}\n"

        export DIR11=`echo "/${menu0_main10[$counter]}"`
        echo
        local C1="$(printf "${menu}Clone $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10${fgred}$DIR11${menu} to target: ${normal}\n")"
	    read -e -p "$C1" path2clon1
 if [ "$path2clon1" == "q" ] || [ "$path2clon1" == "" ] ; 
   then
          menu9_
fi
	    mkdir -p $path2clon1 &&  cp -R $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11/. $path2clon1
		echo
	    echo -e "${blink}Cloning in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just clone ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10${fgred}$DIR11${normal}"`
         menu9_ && break;

fi
#Menu 11
if [ "$selector" == "11" ] ; 
   then
echo
				echo -e "\n\n${menu}Example: ${normal}"
echo -e "\t${menu}Enter ${number}target${menu}: ${normal}/var/www/my-site-clone${fgred}/${menu} or ${normal} var/www/my-site-clone${menu}${normal}\n"

        export DIR12=`echo "/${menu0_main11[$counter]}"`
        echo
        local C1="$(printf "${menu}Clone $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11${fgred}$DIR12${menu} to target: ${normal}\n")"
	    read -e -p "$C1" path2clon1
		if [ "$path2clon1" == "q" ] || [ "$path2clon1" == "" ] ; 
   then
          menu10_
fi
	    mkdir -p $path2clon1 &&  cp -R $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11$DIR12/. $path2clon1
		echo
	    echo -e "${blink}Cloning in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just clone ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11${fgred}$DIR12${normal}"`
         menu10_ && break;

fi
}

#Set www permisions

function permission_help_ () {

#echo -e " \n\t http://permissions-calculator.org/decode/\n\n"

echo -e "\n                     Permission 777${normal}                         \n"
echo -e " \t${normal}User${normal}             ${normal}Group${normal}             ${normal}Other${normal}"
echo -e " \t${green}can read${normal}         ${green}can read${normal}          ${green}can read${normal}"
echo -e " \t${green}can write${normal}        ${green}can write${normal}         ${green}can write${normal}"
echo -e " \t${green}can execute${normal}      ${green}can execute${normal}       ${green}can execute${normal}"

echo -e "\n                     Permission 775${normal}                         \n"
echo -e " \t${normal}User${normal}             ${normal}Group${normal}             ${normal}Other${normal}"
echo -e " \t${green}can read${normal}         ${green}can read${normal}          ${green}can read${normal}"
echo -e " \t${green}can write${normal}        ${fgred}cannot write${normal}      ${fgred}cannot write${normal}"
echo -e " \t${green}can execute${normal}      ${green}can execute${normal}       ${green}can execute${normal}"

echo -e "\n                     Permission 755${normal}                         \n"
echo -e " \t${normal}User${normal}             ${normal}Group${normal}             ${normal}Other${normal}"
echo -e " \t${green}can read${normal}         ${green}can read${normal}          ${green}can read${normal}"
echo -e " \t${green}can write${normal}        ${green}can write${normal}         ${fgred}cannot write${normal}"
echo -e " \t${green}can execute${normal}      ${green}can execute${normal}       ${green}can execute${normal}"

echo -e "\n                     Permission 700${normal}                         \n"
echo -e " \t${normal}User${normal}             ${normal}Group${normal}             ${normal}Other${normal}"
echo -e " \t${green}can read${normal}         ${fgred}cannot read${normal}        ${fgred}cannot read${normal}"
echo -e " \t${green}can write${normal}        ${fgred}cannot write${normal}       ${fgred}cannot write${normal}"
echo -e " \t${green}can execute${normal}      ${fgred}cannot execute${normal}     ${fgred}cannot execute${normal}"


echo -e "\n\n                     Permission 644${normal}                         \n"
echo -e " \t${normal}User${normal}             ${normal}Group${normal}             ${normal}Other${normal}"
echo -e " \t${green}can read${normal}         ${green}can read${normal}          ${green}can read${normal}"
echo -e " \t${green}can write${normal}        ${fgred}cannot write${normal}      ${fgred}cannot write${normal}"
echo -e " \t${fgred}cannot execute${normal}   ${fgred}cannot execute${normal}    ${fgred}cannot execute${normal}"

echo -e "\n\n                     Permission 600${normal}                         \n"
echo -e " \t${normal}User${normal}             ${normal}Group${normal}             ${normal}Other${normal}"
echo -e " \t${green}can read${normal}         ${fgred}cannot read${normal}       ${fgred}cannot read${normal}"
echo -e " \t${green}can write${normal}        ${fgred}cannot write${normal}      ${fgred}cannot write${normal}"
echo -e " \t${fgred}cannot execute${normal}   ${fgred}cannot execute${normal}    ${fgred}cannot execute${normal}"

echo -e "\n\n                     Permission 400${normal}                         \n"
echo -e " \t${normal}User${normal}             ${normal}Group${normal}             ${normal}Other${normal}"
echo -e " \t${green}can read${normal}         ${fgred}cannot read${normal}       ${fgred}cannot read${normal}"
echo -e " \t${fgred}cannot write${normal}     ${fgred}cannot write${normal}      ${fgred}cannot write${normal}"
echo -e " \t${fgred}cannot execute${normal}   ${fgred}cannot execute${normal}    ${fgred}cannot execute${normal}"

}

function remove_www_cron_permisions_ () {
#crontab -l | grep '5 * * * * ; cd $CRONDIR && sh www_permision_monitor_centos_httpd'  | crontab - 
crontab -l | grep '5 * * * * ; cd $CRONDIR && sh www_permision_monitor_centos_nginx'  | crontab -
crontab -l | grep '5 * * * * ; cd $CRONDIR && sh www_permision_monitor_ubuntu_apache2'  | crontab - ;
crontab -l | grep '5 * * * * ; cd $CRONDIR && sh www_permision_monitor_centos_httpd'  | crontab - 
}

function install_www_permision_monitor_centos_nginx_ ( ) {
remove_www_cron_permisions_
local chkcron=`crontab -l | grep '5 * * * * ; cd /tmp/findme/cron && sh www_permision_monitor_centos_nginx' | wc -l`
echo "
#!/bin/bash
#!/bin/sh -
find toreplace -type f -exec chmod 664 {} \;
find toreplace -type d -exec chmod 755 {} \;
chown nginx:nginx -R toreplace" >> $CRONDIR/www_permision_monitor_centos_nginx

sed -i "s+toreplace+$httpdchoice1+g" $CRONDIR/www_permision_monitor_centos_nginx
chmod +x $CRONDIR/www_permision_monitor_centos_nginx
sed -i -e 's/\r$//' $CRONDIR/www_permision_monitor_centos_nginx
 if [ "$chkcron" == 0 ];
then
    crontab -l | { cat; echo "5 * * * * ; cd $CRONDIR && sh www_permision_monitor_centos_nginx"; } | crontab -;
fi
systemctl restart crond
}

function install_www_permision_monitor_centos_httpd_ ( ) {
remove_www_cron_permisions_
local chkcron=`crontab -l | grep -v '5 * * * * ; cd /tmp/findme/cron && sh www_permision_monitor_centos_httpd' | wc -l`
echo "
#!/bin/bash
#!/bin/sh -
find toreplace -type f -exec chmod 664 {} \;
find toreplace -type d -exec chmod 755 {} \;
chown apache:apache -R toreplace" >> $CRONDIR/www_permision_monitor_centos_httpd

sed -i "s+toreplace+$httpdchoice1+g" $CRONDIR/www_permision_monitor_centos_httpd
chmod +x $CRONDIR/www_permision_monitor_centos_httpd
sed -i -e 's/\r$//' $CRONDIR/www_permision_monitor_centos_httpd
 if [ "$chkcron" == 0 ];
then
    crontab -l | { cat; echo "5 * * * * ; cd $CRONDIR && sh www_permision_monitor_centos_httpd"; } | crontab -;
fi
systemctl restart crond
}

function install_www_permision_monitor_ubuntu_apache2_ ( ) {
remove_www_cron_permisions_
local chkcronu=`crontab -l | grep www_permision_monitor_ubuntu_apache2 | wc -l`
echo "
#!/bin/bash
#!/bin/sh -
find toreplace -type f -exec chmod 664 {} \;
find toreplace -type d -exec chmod 755 {} \;
chown www-data:www-data -R toreplace" >> $CRONDIR/www_permision_monitor_ubuntu_apache2
sed -i "s+toreplace+$httpdchoice1+g" $CRONDIR/www_permision_monitor_ubuntu_apache2
chmod +x $CRONDIR/www_permision_monitor_ubuntu_apache2
sed -i -e 's/\r$//' $CRONDIR/www_permision_monitor_ubuntu_apache2
 if [ "$chkcronu" == 0 ];
then
    crontab -l | { cat; echo "5 * * * * ; cd $CRONDIR && sh www_permision_monitor_ubuntu_apache2"; } | crontab - 
fi
systemctl restart cron
}

function permission_ () {
cyber_title_no_help_
set -f
local UBUNTUHTTPD=`pgrep -x apache2 | wc -l`
local CENTOSHTTPD=`pgrep -x httpd | wc -l`
local CHKNGINX=`pgrep -x nginx | wc -l`
if [ "$CENTOS" != 0 ] && [ "$CHKNGINX" != 0 ] ;
then

echo -e "\n I will set recursive permissions:\n\tFor all directory: ${green}755${normal}\n\tFor all files    : ${green}644${normal}\n\tOwner:\n\tUser:            : ${green}nginx${normal}\n\tGroup            :${green} nginx${normal}\n "
 local C1="$(printf "\n${menu} To spesify path to all sites or one site type here: ${normal}\n")"
    read -e -p "$C1" httpdchoice1
	if [ "$httpdchoice1" == "q" ] || [ "$httpdchoice1" == "" ]; 
   then
          menu0_
fi
if [ "$httpdchoice1" == "h" ] ; 
   then
   clear
permission_help_
		   pause_witout_exit_
		   clear && echo && clear
		   logo_big_
		   sleep 1
		   permission_
 
fi

     find $httpdchoice1 -type f -exec chmod 664 {} \;
    find $httpdchoice1 -type d -exec chmod 755 {} \;
   chown nginx:nginx -R $httpdchoice1
      cyber_title_no_help_
   echo -e "\n\n${menu}All done\nPlease check permissions${normal}\n"
   ls -la $httpdchoice1

  local C3="$(printf "\n${menu} To set cron job with auto check and set permisions press [${number}1${menu}] or [${number}Enter${menu}] to back: ${normal}\n")"
   read -e -n1 -p "$C3" cronchoice
   if [ "$cronchoice" == 1 ];
   then
   install_www_permision_monitor_centos_nginx_
   echo
   crontab -l
   echo
   pause_witout_exit_
fi

elif [ "$CENTOS" != 0 ] && [ "$CENTOSHTTPD" != 0 ] ;
then
echo -e "\n I will set recursive permissions:\n\tFor all directory: ${green}755${normal}\n\tFor all files    : ${green}644${normal}\n\tOwner:\n\tUser:            : ${green}apache${normal}\n\tGroup            :${green} apache${normal}\n "
 local C1="$(printf "\n${menu} Please provide path to all sites or one site: ${normal}\n")"
    read -e -p "$C1" httpdchoice1
	if [ "$httpdchoice1" == "q" ] || [ "$httpdchoice1" == "" ] ; 
   then
          menu0_
fi
if [ "$httpdchoice1" == "h" ] ; 
   then
   clear
permission_help_
		   pause_witout_exit_
		   clear && echo && clear
		   logo_big_
		   sleep 1
		   permission_
 
fi
     find $httpdchoice1 -type f -exec chmod 664 {} \;
    find $httpdchoice1 -type d -exec chmod 755 {} \;
   chown apache:apache -R $httpdchoice1
      cyber_title_no_help_
   echo -e "\n\n${menu}All done\nPlease check permissions${normal}\n"
   ls -la $httpdchoice1
   
   local C3="$(printf "\n${menu} To set cron job with auto check and set permisions press [${number}1${menu}] or [${number}Enter${menu}] to back: ${normal}\n")"
   read -e -n1 -p "$C3" cronchoice
   if [ "$cronchoice" == 1 ];
   then
   install_www_permision_monitor_centos_httpd_
   echo
   crontab -l
   echo
   pause_witout_exit_
   
   fi
   elif [ "$UBUNTU" != 0 ] && [ "$UBUNTUHTTPD" != 0 ] || [ "$CHKNGINX" != 0 ];
then
echo -e "\n I will set recursive permissions:\n\n\tFor all directory: ${green}755${normal}\n\tFor all files    : ${green}644${normal}\n\tOwner:\n\tUser:            : ${green}www-data${normal}\n\tGroup            :${green} www-data${normal}\n "
 local C1="$(printf "\n${menu} Please provide path to all sites or one site: ${normal}\n")"
    read -e -p "$C1" httpdchoice1
	if [ "$httpdchoice1" == "q" ] || [ "$httpdchoice1" == "" ] ; 
   then
          menu0_
fi
if [ "$httpdchoice1" == "h" ] ; 
   then
   clear
permission_help_
		   pause_witout_exit_
		   clear && echo && clear
		   logo_big_
		   sleep 1
		   permission_
 
fi
     find $httpdchoice1 -type f -exec chmod 664 {} \;
    find $httpdchoice1 -type d -exec chmod 755 {} \;
   chown www-data:www-data -R $httpdchoice1
   cyber_title_no_help_
   echo -e "\n\n${menu}All done\nPlease check permissions${normal}\n"
   ls -la $httpdchoice1
   
   
   local C3="$(printf "\n${menu} To set cron job with auto check and set permisions press [${number}1${menu}] or [${number}Enter${menu}] to back: ${normal}\n")"
   read -e -n1 -p "$C3" cronchoice
   if [ "$cronchoice" == 1 ];
   then
   install_www_permision_monitor_ubuntu_apache2_
   echo
   crontab -l
   echo
   pause_witout_exit_
fi
fi
menu0_
ls -la $httpdchoice1
}


#SMB
function border_smb_connected_users_ () {
SMBCHK=`ps -ef | grep [s]mb | wc -l`
if [ "$SMBCHK" != 0 ];
  then
findmepath=/tmp/findme
SMBUSERS=`pdbedit -L | awk -F':' '{print $1 }'`
SMBUSERSTAT=`smbstatus -b  | awk '{print   $3,"|",$4  }' | grep -v Group  | grep -v 4.9.* | column -t | sed -e '1,2d'`
longstr=`(echo "$SMBUSERSTAT" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "\n Connected users\n"
echo -e " Users        From IP "
echo -e "+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "  |${normal}"
 else
  echo -e "  |${normal}"
 fi
done < <(printf '%s\n' "$SMBUSERSTAT")
echo -e "+$edge---+${normal}"
 fi
 
}
#border_smb_connected_users_ $SMBUSERSTAT

function border_all_smb_users_ () {
SMBCHK=`ps -ef | grep [s]mb | wc -l`
if [ "$SMBCHK" != 0 ];
  then
   
findmepath=/tmp/findme
SMBUSERS=`pdbedit -L | awk -F':' '{print $1 }'`
SMBUSERSTAT=`smbstatus -b  | awk '{print   $3,"|",$4  }' | grep -v Group  | grep -v 4.9.* | column -t | sed -e '1,2d'`
longstr=`(echo "$SMBUSERS" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e " Active Users "
echo -e "+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "  |${normal}"
 else
  echo -e "  |${normal}"
 fi
done < <(printf '%s\n' "$SMBUSERS")
echo -e "+$edge---+${normal}"
fi
}
#border_all_smb_users_ $SMBUSERS

function border_all_smb_shares_ () {
SMBCHK=`ps -ef | grep [s]mb | wc -l`
if [ "$SMBCHK" != 0 ];
  then
findmepath=/tmp/findme
SHARES=`while read line; do     [[ "$line" =~ ^\[ ]] && name="$line";     [[ "$line" =~ ^[[:space:]]*path ]] && echo -e "\n$name\n$line\n"; done </etc/samba/smb.conf`

longstr=`(echo "$SHARES" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 

echo -e " ${menu} All active share ${normal} "
echo -e "+$edge--------+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "       |${normal}"
 else
  echo -e "       |${normal}"
 fi
done < <(printf '%s\n' "$SHARES")
echo -e "+$edge--------+${normal}"
fi
}
#border_all_smb_shares_ $SHARES

function smb_details_ () {
cyber_title_no_help01_
echo -e "\n${menu}Samba Users on $hostname ${normal} "
border_all_smb_users_
border_smb_connected_users_
border_all_smb_shares_
pause_witout_exit_ 

user_managment_
}

function border_list_user_groups_ () {
findmepath=/tmp/findme
longstr=`(echo "$showusers" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "  |${normal}"
 else
  echo -e "  |${normal}"
 fi
done < <(printf '%s\n' "$showusers")
echo -e "+$edge---+${normal}"
}

function list_user_groups_ () {
mkdir -p /tmp/findme/
findmepath=/tmp/findme
cat /etc/passwd | grep -v nologin | grep -v false | grep -v sync | awk -F':' '{ print $1 }' | tee >$findmepath/.userlist.txt
USERLIST=`cat $findmepath/.userlist.txt `
declare -a userlist=($USERLIST)
for i in  "${userlist[@]}"; do 
t=`groups $i `
 echo -e "\t$t "
done | tee >$findmepath/.userlistg.txt  
showusers=`cat /tmp/findme/.userlistg.txt | column -t ` 

 echo -e "\n Users         All User Groups"
border_list_user_groups_ $showusers 
}

function create_list_user_groups_ () {
mkdir -p /tmp/findme/
findmepath=/tmp/findme
cat /etc/passwd | grep -v nologin | grep -v false | grep -v sync | awk -F':' '{ print $1 }' | tee >$findmepath/.userlist.txt
USERLIST=`cat $findmepath/.userlist.txt `
declare -a userlist=($USERLIST)
for i in  "${userlist[@]}"; do 
t=`groups $i ` 
 echo -e "\t$t "
done | tee >$findmepath/.userlistg.txt  
showusers=`cat /tmp/findme/.userlistg.txt | column -t ` 

 echo -e "\n     Users         All User Groups"
 echo -e "     -----         ---------------"
#border_list_user_groups_ $showusers 
}

function border_show_users_last_login_ () {
findmepath=/tmp/findme
longstr=`(echo "$showusers" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "  |${normal}"
 else
  echo -e "  |${normal}"
 fi
done < <(printf '%s\n' "$showusers")
echo -e "+$edge---+${normal}"
}

function show_users_last_login_ () {
cyber_title_no_help01_
mkdir -p /tmp/findme/
findmepath=/tmp/findme
cat /etc/passwd | grep -v nologin | grep -v false | grep -v sync | awk -F':' '{ print $1 }' | tee >$findmepath/.userlist.txt
USERLIST=`cat $findmepath/.userlist.txt `
declare -a userlist=($USERLIST)
for i in  "${userlist[@]}"; do 
t=`last -F | grep $i | awk '{print  $1,"|", $3, "|",$6,"|", $5, "|", $8, "|", $7 }' | head -30 | grep -v reboot`
 echo -e "\t$t "
#last -F | grep root | awk '{print  $1,"|", $3, "|",$6,"|", $5, "|", $8, "|", $7 }' | sort | head -4
done | tee >$findmepath/.userlistglast.txt  
showusers=`cat $findmepath/.userlistglast.txt | column -t `

echo -e "                    ${menu}Last Users login${normal} "
 echo -e "\n Users        From IP        Day   Month    Year       Time"
border_show_users_last_login_ $showusers 

#echo -e "\n                    ${menu}Samba Users${normal} "
#border_smb_connected_users_
pause_witout_exit_ 
user_managment_
}

function add_user_to_group_ () {
cyber_title_no_help01_
SHOUGROUPS=`compgen -g | sort | column`
echo -e "\n                       ${menu}All active groups${normal}"
echo -e "${menu}--------------------------------------------------------------------------------${normal}"
echo -e "$SHOUGROUPS"
echo -e "${menu}--------------------------------------------------------------------------------${normal}\n"
  export USER2GROUP=`echo "${userlist[$counter]} " | awk '{print  $1 }' `
  echo -e "\n${menu}For back press [${number}Enter/n${menu}]... ${normal}"
          local C1="$(printf "\n${menu}Type group name you wish to add user ${green}$USER2GROUP${normal}: ${normal}\n")"
	      read -e -p 		  "$C1" user2group
if [ -z "$user2group" ] || [ -z "$user2group" ] || [ "$user2group" == "n" ];
   then
   user_managment_
   fi
       gpasswd -a $USER2GROUP $user2group
	       	echo

			export  BANNER=`echo -e "Dear "$whoami", \nYou just add user ${green}$USER2GROUP${normal} to group ${green}$user2group${normal}"`
		
			
			cyber_title_no_help01_
			echo
			echo
		echo -e "\n${menu}User $USER2GROUP was added to group ${green}$user2group ${normal}"
		sleep 1
            
			user_managment_
     }

function add_user_to_smb_ () {
cyber_title_no_help01_
echo -e "\n ${menu}Samba Users${normal} \n"
border_all_smb_users_
  export USER2GROUP=`echo "${userlist[$counter]} " | awk '{print  $1 }' `
  echo -e "\n${menu}For back press [${number}Enter${menu}]... ${normal}"
          local C1="$(printf "\n${menu}User ${green}$USER2GROUP${menu} will be added SMB or reset password (y/n): ${normal}\n")"
	      read -e -p 		  "$C1" user2group
if [ -z "$user2group" ] || [ "$user2group" == "n" ]; 
   then
   user_managment_
   fi
       smbpasswd -a $USER2GROUP 
	       	echo

			export  BANNER=`echo -e "Dear "$whoami", \nYou just add user ${green}$USER2GROUP${normal} to smb or reset password${normal}"`
		
			
			cyber_title_no_help01_
			echo
			echo
		echo -e "\n${menu}User $USER2GROUP was added to smb or reset password${normal}"
		sleep 1
            
			user_managment_
     


}

function add_user_to_group_asterisk_ () {
cyber_title_no_help01_
SHOUGROUPS=`compgen -g | sort | column `
echo -e "\n                       ${menu}All active groups${normal}"
echo -e "${menu}--------------------------------------------------------------------------------${normal}"
echo -e "$SHOUGROUPS"
echo -e "${menu}--------------------------------------------------------------------------------${normal}\n"
  export USER2GROUP=`echo "${userlist[$counter]} " | awk '{print  $1 }' `
          local C1="$(printf "\n${menu}User ${green}$USER2GROUP${menu} will be added to asterisk managment (y/n): ${normal}\n")"
	      read -e -p 		  "$C1" user2group
if [ -z "$user2group" ] || [ -z "$user2group" ] || [ "$user2group" == "n"]; 
   then
   user_managment_
   fi
       gpasswd -a $USER2GROUP asterisk
	   gpasswd -a $USER2GROUP wheel
	   cd /usr/sbin && chmod 755 asterisk
	       	echo

			export  BANNER=`echo -e "Dear "$whoami", \nYou just add user ${green}$USER2GROUP${normal} to group ${green}asterisk${normal}"`
		
			
			cyber_title_no_help01_
			echo
			echo
		echo -e "\n${menu}User $USER2GROUP was added to group ${green}asterisk ${normal}"
		sleep 1
            
			user_managment_
     


}

function remove_user_from_group_ () {
cyber_title_no_help01_
SHOUGROUPS=`compgen -g | column | sort`
echo -e "\n                       ${menu}All active groups${normal}"
echo -e "${menu}--------------------------------------------------------------------------------${normal}"
echo -e "$SHOUGROUPS"
echo -e "${menu}--------------------------------------------------------------------------------${normal}\n"
  export USER2GROUP=`echo "${userlist[$counter]} " | awk '{print  $1 }' `
  echo -e "\n${menu}For back press [${number}Enter${menu}]... ${normal}"
          local C1="$(printf "\n${menu}Type group name from the list you want to remove user ${green}$USER2GROUP${menu}: ${normal}\n")"
	      read -e -p 		  "$C1" user2group
if [ -z "$user2group" ] || [ -z "$user2group" ]; 
   then
   user_managment_
   fi
       gpasswd -d $USER2GROUP $user2group
	       	echo

			export  BANNER=`echo -e "Dear "$whoami", \nYou just remove user ${green}$USER2GROUP${normal} from group ${green}$user2group${normal}"`
		
			
			cyber_title_no_help01_
			echo
			echo
		echo -e "\n${menu}User $USER2GROUP was removed to group ${green}$user2group ${normal}"
		sleep 1
            
			user_managment_
     


}

function create_new_group_ () {
cyber_title_no_help01_
SHOUGROUPS=`compgen -g | sort | column`
echo -e "\n                       ${menu}All active groups${normal}"
echo -e "${menu}--------------------------------------------------------------------------------${normal}"
echo -e "$SHOUGROUPS"
echo -e "${menu}--------------------------------------------------------------------------------${normal}\n"
echo -e "\n${menu}For back press [${number}Enter${menu}]... ${normal}"
          local C1="$(printf "${menu}Type name for new group: ${normal}\n")"
	      read -e -p "$C1" choise2d
if [ -z "$choise2d" ] || [ -z "$choise2d" ]; 
   then
   user_managment_
   fi
   
	        groupadd $choise2d
		
	        sleep 1
			export  BANNER=`echo -e "Dear "$whoami", \nYou just create ${fgred}$choise2d${fgred}${normal}"`
			
			#echo -e "${menu}New Dev group secsefully created now you can create user and add him to dev group\nAnd developer can connect with winscp or use this link:\n ${green}https://pro-wiki.com/knowledgebase/centos-7-manage-users-setup-winscp-to-root-user-without-pass/${normal}			${normal}"
		cyber_title_no_help01_	
			SHOUGROUPS=`compgen -g | sort | column`
echo -e "\n                       ${menu}All active groups${normal}"
echo -e "${menu}--------------------------------------------------------------------------------${normal}"
echo -e "$SHOUGROUPS"
echo -e "${menu}--------------------------------------------------------------------------------${normal}\n"
			pause_witout_exit_
            user_managment_

}

function add_dev_group_ () {
          echo -e "\n${menu}For back press [${number}Enter${menu}]... ${normal}"
          local C1="$(printf "${menu}Type name for dev group: ${normal}\n")"
	      read -e -p "$C1" choise2d
if [ -z "$choise2d" ] || [ -z "$choise2d" ]; 
   then
   user_managment_
   fi
   
	        groupadd $choise2d
			echo ""%"choise2d   ALL=(ALL)      NOPASSWD: choise2d" >> /etc/sudoers
			echo "Cmnd_Alias choise2d = /bin/login ,/bin/chown, /bin/chmod, /bin/chgrp ,/bin/mkdir ,/bin/rm ,/bin/rename ,/bin/read ,/bin/replace ,/bin/mv ,/bin/cp ,/bin/cd ,/bin/scp ,/bin/sh ,/bin/expand ,/bin/rmdir ,/bin/size ,/bin/su " >> /etc/sudoers

			sed -i "s+choise2d+$choise2d+g" /etc/sudoers
			echo -e "${blink}Creating in progres ..... ${normal}"
	        sleep 1
			export  BANNER=`echo -e "Dear "$whoami", \nYou just create ${fgred}$ADDUSER${fgred}${menu0_main0[$counter]}${normal}"`
			
			echo -e "${menu}New Dev group secsefully created now you can create user and add him to dev group\nAnd developer can connect with winscp or use this link:\n ${green}https://pro-wiki.com/knowledgebase/centos-7-manage-users-setup-winscp-to-root-user-without-pass/${normal}			${normal}"
			pause_witout_exit_
            user_managment_

}

function create_user_ () {
cyber_title_no_help01_
export UBUNTU=`awk -F= '/^NAME/{print $2}' /etc/os-release | grep -o Ubuntu | wc -l`
export CENTOS=`awk -F= '/^NAME/{print $2}' /etc/os-release | grep -o CentOS | wc -l`
local UBUNTUHTTPD=`pgrep -x apache2 | wc -l`
local CENTOSHTTPD=`pgrep -x smbd | wc -l`

  export ADDUSER=`echo "${userlist[$counter]} " | awk '{print  $1 }' `
  logo2_
  echo -e "\n${menu}For back press [${number}Enter${menu}]... ${normal}"
          local C1="$(printf "${menu}Type new username: ${normal}\n")"
	      read -e -p 		  "$C1" newusername1
		  local C2="$(printf "${menu}Add user to sudoers (y/n) ?: ${normal}\n")"
	      read -e -p 		  "$C2" addtogroup
		  if [ -z "$newusername1" ] || [ -z "$addtogroup"  ] || [ "$newusername1" == "" ];
		   then
		   user_managment_
		   fi
		  if [ "$addtogroup" == "n" ] || [ "$addtogroup" == "N" ];
		   then
		   if [ "$CENTOS" == 1 ];
	    then
		   adduser $newusername1
		    local C2="$(printf "${menu}Set password for user $newusername ${normal}\n")"
			 sleep 1
			 passwd $newusername1
			 echo
			   echo -e "${blink}Creating in progress ..... ${normal}"
	         sleep 2
			 user_managment_
			 elif [ "$UBUNTU" == 1 ];
			then
			echo
			 adduser $newusername1
			   echo -e "${blink}Creating in progress ..... ${normal}"
	         sleep 2
			 user_managment_
		   fi
		   fi
if [ "$newusername1" == "y" ] || [ "$newusername1" == "" ] || [ "$addtogroup" == "y" ] || [ "$addtogroup" == "" ]; 
   then      
   
      if [ "$CENTOS" == 1 ];
	    then
             adduser $newusername1 
			    gpasswd -a $newusername1 wheel
				 echo
			     cyber_title_no_help01_
			      local C2="$(printf "${menu}Set password for user $newusername ${normal}\n")"
				   passwd $newusername1
				    export  BANNER=`echo -e "Dear "$whoami", \nYou just create admin user ${fgred}$newusername1${fgred} and added to group wheel${menu0_main0[$counter]}${normal}"`
         elif [ "$UBUNTU" == 1 ];
			then
			   adduser $newusername1 
			     gpasswd -a $newusername1 sudo
				 export  BANNER=`echo -e "Dear "$whoami", \nYou just create admin user ${fgred}$newusername1${fgred}and added to group wheel${menu0_main0[$counter]}${normal}"`
	   fi
	        echo -e "${blink}Creating in progress ..... ${normal}"
	         sleep 2
			 
	         
			 export  BANNER=`echo -e "Dear "$whoami", \nYou just create ${fgred}$newusername1${fgred}${menu0_main0[$counter]}${normal}"`
            user_managment_
   else
	   user_managment_     
fi
}

function delete_users_ () {
  export DELUSER=`echo "${userlist[$counter]} " | awk '{print  $1 }' `
          local C1="$(printf "\n${menu}User ${green}$DELUSER${menu} also will be ${fgred}deleted${menu} from SMB (y/n) or [${number}Enter]${menu}: ${normal}\n")"
	      read -e -p 		  "$C1" choise2d
		  if [ "$choise2d" == "n" ] || [ "$choise2d" == "N" ]; 
   then
		user_managment_
fi		
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
   
   
	        userdel -r $DELUSER
			pdbedit -x -u $DELUSER
	       	echo
	        sed -i "/$DELUSER/d" $lockedusers
			
			# local C2="$(printf "\n${menu}Also delete /home/${fgred}$DELUSER${normal}${menu} of user ${fgred}$DELUSER${menu} (y/n${normal}${menu}) or [${number}Enter${menu}] to delete: ${normal}\n")"
	      # read -e -p "$C2" delhomefolder
# if [ "$delhomefolder" == "y" ] || [ "$delhomefolder" == "" ]; 
# then    
          
			# userdel -r $DELUSER
			# sed -i "/$DELUSER/d" $lockedusers
# fi

echo -e "${blink}Delete in progres ..... ${normal}"
	        sleep 1
			export  BANNER=`echo -e "Dear "$whoami", \nYou just remove ${fgred}$DELUSER${fgred}${menu0_main0[$counter]}${normal}"`
            user_managment_
   else
	   user_managment_     
fi
}

function lock_user_ () {
local chkifexist=`ls -a /tmp/findme | grep .lockedusers.log | wc -l `
if [ "$chkifexist" == 0 ];
then 
echo '' > $lockedusers
sed -i '/^$/d' $lockedusers 
fi
  export LOCKUSER=`echo "${userlist[$counter]} " | awk '{print  $1 }' `
          local C1="$(printf "\n${menu}User ${fgred}$LOCKUSER${menu} will be ${fgred}locked${menu}! Please confirm (y/n): ${normal}\n")"
	      read -e -p 		  "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
       passwd -l $LOCKUSER
	       	echo
			export  BANNER=`echo -e "Dear "$whoami", \nYou just locked user ${fgred}$LOCKUSER${fgred}${menu0_main0[$counter]}${normal}"`
			echo $LOCKUSER >> $lockedusers
            sed -i '/^$/d' $lockedusers
			local chkusr=`cat $lockedusers | grep $LOCKUSER | wc -l `
			if [ "$chkusr" == 2 ]; then
			sed -i "/$LOCKUSER/d" $lockedusers
			echo $LOCKUSER >> $lockedusers
			fi
			BANNERLOCKED1=`cat $lockedusers`
			BANNERLOCKED=`echo "$BANNERLOCKED1"`
			
			cyber_title_no_help01_
			echo
			echo
		echo -e "${menu}User $LOCKUSER was ${green}locked${normal}"
		sleep 1
            
			user_managment_
   else
	   user_managment_     
fi
}

function unlock_user_ () {
  export UNLOCKUSER=`echo "${userlist[$counter]} " | awk '{print  $1 }' `
          local C1="$(printf "\n${menu}User ${fgred}$LOCKUSER${menu} will be ${green}unlocked${menu} Please confirm (y/n): ${normal}\n")"
	      read -e -p 		  "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
       passwd -u $UNLOCKUSER
	       	echo
     sed -i "/$UNLOCKUSER/d" $lockedusers
			export  BANNER=`echo -e "Dear "$whoami", \nYou just locked user ${fgred}$UNLOCKUSER${fgred}${menu0_main0[$counter]}${normal}"`
			cyber_title_no_help01_
			echo
			echo
		echo -e "${menu}User $UNLOCKUSER was ${green}unlocked${normal}"
		sleep 1
            
			user_managment_
   else
	   user_managment_     
fi
}

function change_password_ () {
  export CHNGPASSWD=`echo "${userlist[$counter]} " | awk '{print  $1 }' `
       passwd  $CHNGPASSWD
	       	echo
			export  BANNER=`echo -e "Dear "$whoami", \nYou just chenged password for ${fgred}$LOCKUSER${fgred}${normal}"`
	   user_managment_     

}

function install_samba_ () {

 if [ "$CENTOS" == 1 ];
	    then
		  cyber_title_no_help01_
			 sudo yum install samba -y
			 echo
				   echo -e "${blink}Installing Samba in progress ..... ${normal}"
	         sleep 2
			 cyber_title_no_help01_
			 systemctl status smbd
			 echo
			 pause_witout_exit_
			 user_managment_
			 elif [ "$UBUNTU" == 1 ];
			then
			cyber_title_no_help01_
			sudo apt install samba -y
			sudo ufw allow 'Samba'
			
			 echo -e "${blink}Installing Samba in progress ..... ${normal}"
	         sleep 2
			 echo
			 cyber_title_no_help01_
			 systemctl status smbd
			 pause_witout_exit_
			 user_managment_
		   fi
systemctl status smbd

}

function get_root_users_ () {
echo  > stam1.log
echo  > stam2.log
getu1=`getent group wheel | cut -d: -f4`
getu2=`getent group sudo | cut -d: -f4`
getu3=`getent group admin | cut -d: -f4`
getu4=`sudo cat /etc/sudoers | grep --color=always -o -P '(?<=(^)).*(?=ALL=)' | grep -v % | grep -v "#"`
echo $getu1 >> stam1.log 
echo $getu2 >> stam1.log 
echo $getu3 >> stam1.log 
echo $getu4 >> stam1.log
sed -i '/^$/d' stam1.log
sed -i "s/,/ /g" stam1.log
getu5=`cat stam1.log | tr ' ' "\n" > stam2.log`
sed '$d'  stam2.log >stam1.log
printf %b '\033[m'

local chk=`cat stam1.log | wc -l`
printf %b '\033[m'



}

#Time

function time_banner_ () {
SYNCCHK=`timedatectl status | grep -o -P '(?<=(synchronized: )).*(?=$)' | sed  's/ //g' | wc -m`
if [ "$SYNCCHK" == "4" ];
then
TIMESYNCCHKBAN="${green}ON${normal}"
elif [ "$SYNCCHK" == "3" ];
then
TIMESYNCCHKBAN="${fgred}OFF${normal}"
fi


}

function change_current_server_time_centos_ () {
time_banner_
DATECHK=`date | awk '{print  $4, "  |  ", $3, "  |  ", $2,"  |  ", $6 }'`
CHKTIMEZONE=`ls -l /etc/localtime | grep -o -P '(?<=(/usr/share/zoneinfo/)).*(?=$)'`
longstr=`(echo -e "$DATECHK" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo -e "$longstr" | sed 's/./-/g') 
echo -e "          $REBOOTBAN          "
echo -e "\t${menu1}            Current sytem time${menu1}            ${normal}"
echo -e "\t${menu1}     Time       Day      Month      Year  ${normal}"
echo -e "\t+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "  |${normal}"
 else
  echo -e "  |${normal}"
 fi
done < <(printf '%s\n' "$DATECHK")
echo -e "\t+$edge---+${normal}"
echo -e "\t${menu1}              Current Timzone             ${normal}"
echo -e "\t               ${green}$CHKTIMEZONE${green}${normal}${normal}"
echo -e "\t${menu1}                Time synced               ${normal}"
time_banner_
echo -e "\t                    $TIMESYNCCHKBAN             ${normal}"
echo -e "\t${menu1}                                          ${normal}"
unset TIMESYNCCHKBAN
unset REBOOTBAN
}

function change_current_server_time_ubuntu_ () {
time_banner_
DATECHK=`date | awk '{print  $5, "  |  ", $2, "  |  ", $3,"  |  ", $4 }'`
CHKTIMEZONE=`ls -l /etc/localtime | grep -o -P '(?<=(/usr/share/zoneinfo/)).*(?=$)'`
longstr=`(echo "$DATECHK" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "          $REBOOTBAN          "
echo -e "\t${menu1}            Current sytem time${menu1}             ${normal}"
echo -e "\t${menu1}     Time       Day      Month      Year   ${normal}"
echo -e "\t+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "  |${normal}"
 else
  echo -e "  |${normal}"
 fi
done < <(printf '%s\n' "$DATECHK")

echo -e "\t+$edge---+${normal}"
echo -e "\t${menu1}              Current Timzone              ${normal}"
echo -e "\t               ${green}$CHKTIMEZONE${green}${normal}${normal}"
echo -e "\t${menu1}                Time synced                ${normal}"
time_banner_
echo -e "\t                    $TIMESYNCCHKBAN              ${normal}"
echo -e "\t${menu1}                                           ${normal}"
unset TIMESYNCCHKBAN
unset REBOOTBAN
}

function install_enable_ntp_ () {
time_banner_
if [ "$CENTOS" == 1 ];
  then
 
  sudo yum install ntp -y
  sudo systemctl restart ntpd
  sudo timedatectl set-ntp true
  sudo timedatectl set-ntp yes
  sudo timedatectl set-ntp 1
  export REBOOTBAN="${fgred}${blink}Please reboot server to finish process${normal}"
  time_banner_
  clear && echo && clear
  time_banner_
change_system_time_
time_banner_

elif [ "$UBUNTU" == 1 ];
    then
	sudo apt-get install ntp -y
	sudo systemctl restart ntp
	sudo timedatectl set-ntp true
	sudo timedatectl set-ntp yes
	sudo timedatectl set-ntp 1
	export REBOOTBAN="${fgred}${blink}Please reboot server to finish process${normal}"
	time_banner_
	clear && echo && clear
	time_banner_
	change_system_time_
	time_banner_
	fi
	time_banner_
change_system_time_
}

function chk_ntp_ () {
#Check if system is syncronithed

timedatectl status | grep -o -P '(?<=(synchronized: )).*(?=$)'

#Daylight Saving Time–DST–Summer Time  
#Last DST
DSTLAST=`timedatectl status | grep -A 1 "Last DST change:" > $TIMETMPLOG1 && sed '1d' $TIMETMPLOG1`
DSTEND=`cat $TIMETMPLOG1`
echo -e "$DSTEND" 

#DST END
DSTEND=`timedatectl status | grep -A 1 "Next DST change" > $TIMETMPLOG && sed '1d' $TIMETMPLOG `
echo -e "$DSTEND" 

RTC = Real Time Clock
UTC = Universal Time Coordinated

}

function show_server_time_ () {
time_banner_
  if [ "$CENTOS" == 1 ];
  then
 time_banner_
  change_current_server_time_centos_
 
elif [ "$UBUNTU" == 1 ];
    then
	time_banner_
	change_current_server_time_ubuntu_
	fi
	time_banner_
}

function get_time_zone_wdate_ () {
search=$1
zoneinfo=/usr/share/zoneinfo/posix/
format='%a %F %T'
find -L $zoneinfo -type f \
    | grep -i "$search" \
    | while read z
      do
          d=$(TZ=$z date +"$format")
          printf "${menu1}%-34s %23s\n" ${z#$zoneinfo} "$d"
      done
}

function search_time_zone_ () {
clear && echo && clear
time_banner_
	echo -e "\n\n${menu}        ${menu1}------------${bgwhite}${menu}Zone Configuration${menu}${menu1}------------${normal}"
echo -e "                                 "
	time_banner_
	show_server_time_	
	
	echo -e "\n\n\t${menu1}${menu}How to find your timezone?                ${normal}"
	echo -e "\t${menu1}For Amsterdam type [ams] or [amster]      "
	echo -e "\t${menu1}For TelAviv type [tel] or [aviv] or [Tel] "
	echo -e "\t${menu1}For Canada type [Can] or [can]            "
	echo -e "\t${menu1}For whole list press [enter]              ${normal}\n"
	local C2="$(printf "\t${menu}Type timezone you wish to find: ${normal}\n")"
	read -e -p  "$C2" choisetime1
if [ "$choisetime1" == "x" ] || [ "$choisetime1" == "q" ];
      then
         change_system_time_
 fi
	echo
 get_time_zone_wdate_ $choisetime1
echo -e ""
echo -e "\t${menu1}${number}1. ${menu}Continue to change timezone             "
echo -e "\t${menu1}${number}2. ${menu}Search again                            "
echo -e "\t${menu1}${number}3. ${menu}Exit                                    ${normal}"
read -n 1 -s -p   "$C1" choisetime3 

while true
do
if [ "$choisetime3" == 1 ];
  then
    echo
     local C4="$(printf "${menu}Type timezone from search list: ${normal}\n")"
       read -e -p  "$C4" timzonesearch
       timedatectl set-timezone $timzonesearch
clear && echo && clear
echo -e "\n\t${menu}          All done${normal}\n"
time_banner_
show_server_time_
echo		  
counter_ 
clear && echo && clear
time_banner_
change_system_time_
elif [ "$choisetime3" == 2 ];
then
time_banner_
search_time_zone_
elif [ "$choisetime3" == 3 ] || [ "$choisetime3" == "q" ] ;
then

time_banner_
#start_
change_system_time_
elif [ "$choisetime3" == "" ] ;
then
search_time_zone_
else
change_system_time_
fi
done
change_system_time_
 }
 
 function start_time_search_ (){
 logo_clock_
 sleep 1
 change_system_time_
 }
 
function change_system_time_ () {
#unset TIMESYNCCHKBAN
clear && echo && clear


time_banner_
echo -e "\n\n${menu}        ${menu1}--------------${bgwhite}${menu}Time Management${menu}${menu1}-------------${normal}"
echo -e "                                 "
show_server_time_
echo -e ""
echo -e "\t${menu1}${number}1. ${menu}Change   Timezone                      "
echo -e "\t${menu1}${number}2. ${menu}Change   Time                          "
echo -e "\t${menu1}${number}3. ${menu}Fix time SYNC                          "
echo -e "\t${menu1}${number}4. ${menu}Exit                                   ${normal}"

local C1="$(printf "\n\t${menu}Your choice [1~4]: ${normal}\n")"
 read -n 1 -r -s -p  "$C1" choisetime	 
if [ "$choisetime" == 1 ];
 then
   time_banner_
    search_time_zone_
  
elif [ "$choisetime" == 3 ];
   then
         install_enable_ntp_
		 time_banner_
           echo -e "\n${menu}${green}${blink}Fixing time sync.... ${normal}${menu}${normal}\n "
             sleep 3
			export REBOOTBAN="${fgred}${blink}Please reboot server to finish process${normal}"
			 time_banner_
                change_system_time_
elif [ "$choisetime" == 4 ] || [ "$choisetime" == "q" ];
   then
   time_banner_
   start_

local C2="$(printf "${menu}To search  ${normal}\n")"
read -e -p  "$C3" choisetime2



fi
echo
#pause_witout_exit_
time_banner_
change_system_time_

}

function time_banner_ () {
SYNCCHK=`timedatectl status | grep -o -P '(?<=(synchronized: )).*(?=$)' | sed  's/ //g' | wc -m`
if [ "$SYNCCHK" == "4" ];
then
TIMESYNCCHKBAN="${green}ON${normal}"
elif [ "$SYNCCHK" == "3" ];
then
TIMESYNCCHKBAN="${fgred}OFF${normal}"
fi


}

# list all time zones
# timedatectl list-timezones | column


#!/usr/bin/env bash                                                             

# Show date and time in other time zones, with multiple args                                        


  
  
# Centos
# -------
# current server time
# ls -l /etc/localtime | grep --color=always -o -P '(?<=(/usr/share/zoneinfo/)).*(?=$)'
 # Asia/Jerusalem
  # date | awk '{print  $4, "|", $3, "|", $2,"|", $6 }'
   # 06:56:37 | 30 | Apr | 2020

# Ubuntu
# -------
# current server time
# ls -l /etc/localtime | grep --color=always -o -P '(?<=(/usr/share/zoneinfo/)).*(?=$)'
 # Asia/Jerusalem
  # date | awk '{print  $5, "|", $2, "|", $3,"|", $4 }'
   # 06:56:37 | 30 | Apr | 2020


 # Google time
 # -----------
  # curl -s --head http://google.com | grep ^Date: | sed 's/Date: //g' | awk '{print  $5, "|", $2, "|", $3,"|", $4,"|", $6 }'
  # 11:12:14 | 30 | Apr | 2020

  
  
  # awk '{print  $1,"|", $3, "|",$6,"|", $5, "|", $8, "|", $7 }'
  
 # curl -sS https://www.timeanddate.com/time/zone/israel | grep --color=always -o -P '(?<=(<span id=pcur-0>)).*(?=</span></td></tr></tbody>)'  
 
 

#sudo apt install iptables-persistent netfilter-persistent
function user_managment_ () {
cyber_title_no_help01_
echo -e "\n     ${menu}List of all active Users and Groups ${normal} "
create_list_user_groups_
findmepath=/tmp/findme

cat /etc/passwd | grep -v nologin | grep -v false | grep -v sync | awk -F':' '{ print $1 }' | tee >$findmepath/.userlist.txt
USERLIST=`cat $findmepath/.userlist.txt `
declare -a userlist=($showusers)

 


counter=0
function draw_menu0_ () {
   # local DMENU=0
	
     for i in "${userlist[@]}"; do
	  
    if [[ ${userlist[$counter]} == $i ]]; 
	then
            tput setaf 2; 
	   echo -e "==> $i"; tput sgr0
	   
    else
       echo -e "    $i"   ;
		
     fi
	  
      done

}
export localitemname=${userlist[$counter]}
function clear_menu0_()  {
      for i in "${userlist[@]}"; 
	     do 
	      tput cuu1 setaf 0;
	    done
	 tput ed setaf 0
	 
}

function select_from_list_ () {

local selector=0
    draw_menu0_
     while read -sn 1  key; 
    do 
	
 if [[ "$key" == "" ]] ; 
	then
	  show_users_last_login_
       
		
if [[ "$counter" == 0 ]];
   then
     
	 break; 
fi
	menu0_
	break;
fi
    read -sN2 -t 0.0009 k1; read -sN1 -t 0.0009 k2; read -sN2 -t 0.0009 k3
    key+=${k1}${k2}${k3}
    case "$key" in
        # countersor up, previous item
       $'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
		"\e[?1000;1006;1015h") main_menu0_ ;;
		# call next menu with <> keys
		#left
		$'\e[D'|$'\e0D')   if [[ "$counter" == 0 ]];
                                           then
                                           menu0_
                                           fi
                                            ;; #menu12_      ;; #left  go back to main menu0_
		#right 
	    $'\e[C'|$'\e0C')  add_user_to_smb_  ;; #right  go to menu1_
		 1) change_password_ ;;
							+)	add_user_to_group_	;;	   
		d|-) remove_user_from_group_ ;;
		#5) add_user_to_smb_;;
		# use delete key on keybord to delete selected item
		"^[[3~"|'^[[3~'|$"\e[3~"|$'\e[3~') delete_users_  ;;		
		1) show_users_last_login_  ;; 
		 $'\e[2~') create_user_  ;;
		L|l) smb_details_ ;;  
		0|P) add_user_to_group_asterisk_ ;;
        s) unlock_user_	;;
		a) lock_user_	;;
		g) add_dev_group_ ;;	
        b|B) start_ ;;	
		f) create_new_group_ ;;		
		$'\e') menu0_ ;;
        # countersor down, next item
        $'\e[B'|$'\e0B') ((counter < ${#userlist[@]}-1)) && ((counter++)) ;;
        # home: first item
        $'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        $'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#userlist[@]}-1));;
         # q, carriage return: quit
        x|q|'') exit_ ;;
    esac
	
    # Redraw menu
	
      clear_menu0_
	  
      draw_menu0_
    done

}
select_from_list_
local selector=0

}


# function install_samba () {

# if [ "$CENTOS" == 1 ];
  # then
         # UFWCHK=`systemctl status firewalld | grep -o "Active: active" | wc -l`
		 
# if [ "$UFWCHK" == 0 ]; 
    # then 
        # FWBAN="${grey}[FIREWALL]${normal}"
      # else
        # FWBAN="${green}[FIREWALL]${normal}"
# fi
		  
# elif [ "$UBUNTU" == 1 ];
    # then
	     # UFWCHK=`systemctl status ufw | grep -o "Active: active" | wc -l`
# if [ "$UFWCHK" == 0 ]; 
     # then
		# FWBAN="${green}[${blink}${fgred}FIREWALL OFF${normal}${green}]${normal}"
     # else
        # FWBAN="${green}[FIREWALL]${normal}"
# fi
			
# fi

# yum -y install samba samba-client samba-common
# apt install samba -y

# yum


# }

#FIND Pattern /folder & file / find and replace
function go_to_file_or_folder_ () {
#unset_banner_
GOTOFOLDER=1
echo
unset copypast
history -r script_history
history -s "$copypast"
if [ "$finds" == 0 ];
  then
     local C1="$(printf "\n${menu} Press [${number}Enter${menu}] ${menu} to continue ..... \n Press [${number}0${menu}] or [${number}O${menu}] + [${number}Enter ${menu}] to ${normal}replace${normal} ${menu}another pattern ${normal}\n ${menu}Press [${number}7${menu}] or [${number}p${menu}] + [${number}Enter${menu}] to ${normal}find${menu} pattern in all files from folder ${normal}\n or\n ${menu}Copy pattern &  past or type + use TAB  to edit:${normal}")"
     read -e -p "$C1 " copypast
 if [ "$copypast" == 0 ] ||  [ "$copypast" == "O" ] ;
  then 
     find_and_replace_
elif [ "$copypast" == 7 ] ||  [ "$copypast" == "p" ] ;
  then 
    find_pattern_
elif [ "$copypast" == "" ] || [ "$copypast" == "q" ]; 
then
menu0_
fi
fi
  
  
if [ "$finds" == 1 ];
  then
    local C1="$(printf "\n${menu} Press [${number}Enter${menu}] ${menu}to continue .....\n Press [${number}7${menu}] or [${number}p${menu}] + [${number}Enter${menu}] to ${normal}search${menu} again ${normal}\n ${menu}Press [${number}0${menu}] or [${number}O${menu}] + [${number}Enter${menu}] to ${normal}replace${menu} pattern in file ${normal}\n or\n ${menu}Copy pattern &  past or type + use TAB  to edit:${normal}")"
     read -e -p "$C1 " copypast
 if [ "$copypast" == 7 ] ||  [ "$copypast" == "p" ] ;
  then 
    find_pattern_
elif [ "$copypast" == 0 ] ||  [ "$copypast" == "O" ] ;
  then 
     find_and_replace_
	elif [ "$copypast" == "" ] || [ "$copypast" == "q" ]; 
then
menu0_
fi
fi
  
  
if [ "$finds" == 2 ];
 then
     local C1="$(printf "\n${menu} Press [${number}Enter${menu}]${menu} to continue .....\n Press [${number}6${menu}] or [${number}i${menu}] + [${number}Enter${menu}] to ${normal}search${menu} again ${normal}\n${menu}Press [${number}0${menu}] or [${number}O${menu}] + [${number}Enter${menu}] to ${normal}replace${menu} pattern in file ${normal}\n or\n ${menu}Copy pattern &  past or type + use TAB  to edit:${normal}")"
      read -e -p "$C1 " copypast 
if [ "$copypast" == 6 ] ||  [ "$copypast" == "i" ] ;
  then 
   find_file_folder_
   elif [ "$copypast" == 0 ] ||  [ "$copypast" == "O" ] ;
  then 
     find_and_replace_
   elif [ "$copypast" == "" ] || [ "$copypast" == "q" ]; 
then
menu0_
fi
fi


export COPYPASTE=$copypast
if  [ -f "$copypast" ] ;
  then
    echo "file"
     clear
       echo -e "${menu}Boss,\nThis is a file ${green}${menu0_main2[$counter]}${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n"
         cat "$copypast" | more
           local ENT=`echo -e "${menu}Press [${number}Enter${menu}] to continue [${number}e${menu}] to edit: ${normal}\n"`
             read -s -n1 -p "$ENT " itemchoice
			 history -s "$itemchoice"
if [ "$itemchoice" == "" ]; 
  then
  menu0_
 elif [ "$itemchoice" == "e" ]; 
   then
     $EDITOR "$copypast"
	 unset_banner_
	 export  BANNER=`echo -e "Dear "$whoami", \nYou just changed file ${fgred}$copypast${normal}"`
    menu0_
else
echo -e "\n Sorry but this is a folder\n Unfortunately for now my dad is not learn me to work with folders from this menu\n Please follow the blinking banner ${blink}${green}^${normal} to navigate to wished folder "
sleep 3

  menu0_
fi
else
cyber_title_good_folder_search_
echo -e "\n Dear $whoami,\n Sorry for this inconvenience but this is a folder.\n Unfortunately for now my dad is not learn me to work with folders from this menu\n Please follow the blinking banner ${blink}${green}^${normal} to navigate to wished folder\n\n "


history -w script_history

pause_witout_exit_
menu0_
fi

}

function border_find_and_replace_bckp_ () {
 PATHDIR=`dirname $path`
 BCKPCHK=`ls $PATHDIR | grep FindMe`
longstr=`(echo "$BCKPCHK" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "+$edge-------------+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "            |${normal}"
 else
  echo -e "            |${normal}"
 fi
done < <(printf '%s\n' "$BCKPCHK")
echo -e "+$edge-------------+${normal}"
}

function border_find_and_replace_before_ () {
PATTCHK=`cat $path | grep -A 2 -B 2  "$oldpattern"`
longstr=`(echo "$PATTCHK" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "+$edge-------------+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "            |${normal}"
 else
  echo -e "            |${normal}"
 fi
done < <(printf '%s\n' "$PATTCHK")
echo -e "+$edge-------------+${normal}"
}

function border_find_and_replace_ () {
PATT=`cat $path | grep $newpattern`
longstr=`(echo "$PATT" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "+$edge-------------+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "            |${normal}"
 else
  echo -e "            |${normal}"
 fi
done < <(printf '%s\n' "$PATT")
echo -e "+$edge-------------+${normal}"
}

function find_and_replace_ () {

PATHDIR=`dirname $path`
    unset BANNER
	unset FIND
	#unset GREPBANN #find pattern
	unset COUNTFIND
	export finds=0
cyber_title_
local C1="$(printf "${menu} Enter ${normal}Old ${menu}pattern for example [${normal}https://muzi.com${menu}] or [${normal}Port 22${menu}]: ${normal}\n")"
read -e -p "$C1" oldpattern
if [ "$oldpattern" == "q" ] ; then
menu0_
fi
if [ "$oldpattern" == "h" ] ; 
   then
   cyber_title_
    echo -e "\n\tThe search is case sensitive\n"
	echo -e "\n\tYou must specify folder like /etc or /var to improve speed of search for whole * is not working\n"
          echo -e "\tTo find pattern in all files with spaces like [${green}Port 22${normal}] you can type [${fgred}Port *${normal}] or [${fgred}P* 22${normal}]\n\n\tAlso you can use TAB to type path\n\n\t File befor changes is backuping to same folder with time stemp"
		   pause_witout_exit_
		   clear && echo && clear
		   logo_big_
		   sleep 1
		   find_and_replace_
 
fi
local C2="$(printf "\n${menu} Enter ${normal}New${menu} pattern  for example [${normal}https://muzipuzi.com${menu}] or [${normal}Port 33${menu}]: ${normal}\n")"
read -e -p "$C2" newpattern
if [ "$newpattern" == "q" ] ; then
menu0_
fi
local C3="$(printf "\n${menu} Enter ${normal}Path${menu} to file for example [${normal}/etc/httpd/conf/httpd.conf${menu}] use tab to autocomplete: ${normal}\n")"
read -e -p "$C3" path
if [ "$path" == "q" ] ; then
menu0_
fi
PATTCHK=`cat $path | grep -A 2 -B 2  "$oldpattern"`
echo -e "\n${menu} Current configuration of $path ${normal}\n"

border_find_and_replace_before_ $PATTCHK
echo -e "\n${menu} Pattern ${normal}$oldpattern${menu} will be changed to ${normal}$newpattern ${normal}?\n"

local C1="$(printf "${menu} Please Confirm (y/n) or ${number}[ Enter ] ${menu}to Y ${menu}:${normal}\n")"
echo 
read -sn 1 -p "$C1 " confirmn
if [ "$confirm" == "y" ]  || [ "$confirm" == "" ]  ; 
 then
  echo
   local CHK=`ls $path | wc -l `
if [ "$CHK" != 0 ];
 then
   printf "${blink}${number} Backuping ${number}$oldpattern${normal} and Processing... ${menu}hold on${normal}\n"
    sleep 3
	  echo 
        cp $path $path:"$D"-"$T"-FindMe
          sed -i -e "s+$oldpattern+$newpattern+g" "$path"
 else
   cyber_title_not_good_
    echo -e "\n${menu} Old pattern: ${normal}$oldpattern\n${menu} New pattern:${normal} $newpattern\n${menu} Path:       ${normal} $path\n" 
     pause_find_
       menu0_
fi
 PATT=`cat $path | grep -o "$newpattern"`
if [ "$PATT" == "$newpattern" ];
 then
 PATHDIR=`dirname $path`
 BCKPCHK=`ls $PATHDIR | grep FindMe`
  cyber_title_good_
   echo -e "$\n${menu}All done you secsefully chenged pattern from ${green}$oldpattern${menu} to ${green}$newpattern${normal}\n "
    border_find_and_replace_ $PATT
	
	echo -e "\n I did check and found backup files of $path \n"
	border_find_and_replace_bckp_ $BCKPCHK
	
	go_to_file_or_folder_ 
menu0_
else
cyber_title_not_good_
#echo -e "\nThat is what we tryed to find:\n"
echo -e "\n${menu} Old pattern: ${normal}$oldpattern\n${menu} New pattern:${normal} $newpattern\n${menu} Path:       ${normal} $path\n" 
pause_find_
menu0_
fi
pause_witout_exit_
menu0_
fi
}

function border_find_pattern_ () {
GREP=`grep -rnw --exclude-dir={proc,sys,boot,}  "/$dir" -e "$pattern" | grep -v "Binary file"`
longstr=`(echo "$GREP" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "+$edge-------------+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "            |${normal}"
 else
  echo -e "            |${normal}"
 fi
done < <(printf '%s\n' "$GREP")
echo -e "+$edge-------------+${normal}"
}

function find_pattern_ () {
unset_banner_
export finds=1
cyber_title_
local C1="$(printf "${menu} Enter Pattern for example [${normal}Port 22${menu}]: ${normal}\n")"
local C2="$(printf "${menu} Enter path for example [${normal}/etc${menu}] or [${normal}etc${menu}] : ${normal}")"
#Ask and explain
read -e -p "$C1" pattern
if [ "$pattern" == "q" ] ; then
menu0_
fi
if [ "$pattern" == "h" ] ; 
   then
   cyber_title_
    echo -e "\n\tThe search is case sensitive\n"
          echo -e "\n\tTo find pattern in all files with spaces like [${green}Port 22${normal}] you can type [${normal}Port *${normal}] or [${normal}P* 22${normal}]\n"
		   pause_witout_exit_
		   clear && echo && clear
		   logo_big_
		   sleep 1
		   find_pattern_
 
fi
read -e -p "$C2" dir

if [ -n "$pattern" ] || [ -n "$dir" ]; then
   echo
     COUNTGREP=`grep  -rnw --exclude-dir={proc,sys,boot,}  "/$dir" -e "$pattern" | grep -v "Binary file" | wc -l`
       GREP=`grep -rnw --exclude-dir={proc,sys,boot,}  "/$dir" -e "$pattern" | grep -v "Binary file"`
         grep  --color=always -rnw --exclude-dir={proc,sys,boot,}  "/$dir" -e "$pattern" | grep -v "Binary file" | tee >$CATTMP1
n=10 
if [ "$COUNTGREP" == 0 ];
then
cyber_title_not_good_
#echo -e "\n That is what we tryed to find:\n"
echo -e "\n${menu} Pattern: ${normal}$pattern\n${menu} Dir:${normal}     $dir${normal}\n" 
go_to_file_or_folder_
menu0_
fi


if [ "$COUNTGREP" -lt "$n" ];
   then
      cyber_title1_
	    printf "${blink}${number} Processing... ${menu}hold on${normal}\n"
         sleep 2
		   cyber_title_good_
		   x=3
		if [ "$COUNTGREP" -lt "$x" ];
		    then
			   local BAN="\n I found only $COUNTGREP matches:"
		    else
			   local BAN="\n I found $COUNTGREP matches: "
	    fi
		  echo -e  $BAN
		   border_find_pattern_ $GREP
            GREPBANN=$GREP
		     go_to_file_or_folder_
				    
else
    printf "${blink}${number} Processing... ${menu}hold on${normal}\n"
      sleep 2
        cyber_title_
          GREPBANN=`echo -e "${menu}I found ${fgred}$COUNTGREP${menu} matches to view all matches press [ ${number}v ${menu}]${normal}"`
            local C3="$(printf "${menu}I found ${fgred}$COUNTGREP${menu} matches to view all matches press [ ${number}v ${menu}]${normal}\n")"
               read -s -n1 -p "$C3" v
if [ "$v" == v ]; 
    then
       cyber_title_
         echo -e "${menu} That what i bring for you. Enjoy...${normal}"
		   logo_
		     counter_
               cat -b $CATTMP1 | more 
			   go_to_file_or_folder_
else
menu0_
fi
fi


echo
go_to_file_or_folder_
else
echo -e "\nThe Pattern or Folder cannot be empty:"
sleep 1
find_pattern_
break
fi
menu0_
}

function border_find_file_folder_ () {
FIND=`find / -name "$findme"`
longstr=`(echo "$FIND" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "+$edge-------------+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "            |${normal}"
 else
  echo -e "            |${normal}"
 fi
done < <(printf '%s\n' "$FIND")
echo -e "+$edge-------------+${normal}"
}

function find_file_folder_ () {
unset_banner_
export finds=2
 unset COUNTFIND
  local C3="$(printf "${menu}We found ${fgred}$COUNTFIND${menu} matches to view all matches press [ ${number}v ${menu}]${normal}")"
   cyber_title_
     local C1="$(printf "Enter ${menu}file ${normal}or ${menu}folder ${normal}you are looking for: ${normal}")"
       read -e -p "$C1" findme
	   
#Exit on q	   
if [ "$findme" == "q" ] ; 
   then
          menu0_
fi

#Help
if [ "$findme" == "h" ] ; 
   then
   cyber_title_
          echo -e "\n\tTo find hidden file [${green}.htaccess${normal}] you can type [${fgred}.*acce*${normal}] or [${fgred}*htac*${normal}]\n"
		  echo -e "\n\tTo find all hidden files on system you can type for exaple [${fgred}.*.*${normal}]\n"
		   echo -e "\tTo find file with space [${green}1 2 3.txt${normal}] you can type [${fgred}1 2 3.*${normal}] or [${fgred}1 2*${normal}] or [${fgred}* 3.*${normal}]${normal}\n"
		   pause_witout_exit_
		   clear && echo && clear
		   logo_big_
		   sleep 1
		   find_file_folder_
 
fi
      
	  CENTER="$(printf "${menu}Press [ ${number}Enter ${menu}] to continue ....${normal}")"
     FIND="$(find / -name "$findme")" 
	find / -name "$findme" | tee >$CATTMP1
   COUNTFIND="$(find / -name "$findme" | wc -l)"
  COUNTFIND1="$(find / -name "$findme" | wc -l)"

n=10
if [ "$COUNTFIND" == 0 ];
then
cyber_title_not_good_
echo -e "\n Ups nothing found :\n\n"
echo -e "\n${menu} Your last search: ${normal}$findme${normal}\n" 
pause_find_
menu0_
fi


if [ "$COUNTFIND" -lt "$n" ]; #If less then 7 show me here
  then
      cyber_title1_
	    printf "${blink}${number}Processing... ${menu}hold on${normal}\n"
         sleep 2
		 cyber_title_good_
           echo -e "\n${menu} I found only ${fgred}$COUNTFIND${menu} matches:  ${normal}\n"
          border_find_file_folder_ $FIND
		  GREPBANN=$FIND 
		  go_to_file_or_folder_ #for test
        echo nahuy
		sleep 5
      #pause_find_
  break
#menu0_
else #If more then 7 print to file and ask to show file
  find / -name "$findme" | tee >$CATTMP1
   cyber_title_good_
    local C4="$(printf "\n\n${menu}I found ${fgred}$COUNTFIND1${menu} matches to view all matches press [ ${number}v ${menu}]${normal}\n")"
	unset GREPBANN
	   GREPBANN=`echo -e "${menu}I found ${fgred}$COUNTFIND1${menu} matches to view all matches press [ ${number}v ${menu}]${normal}"` 
       read -s -n1 -p "$C4" v
if [ "$v" == v ]; 
   then
     cyber_title1_
	  printf "${blink}${number}Processing... ${menu}hold on${normal}"
       sleep 1
	   cyber_title_good_
         echo -e "$ That what i bring for you. Enjoy...${normal}"
		 logo_
		border_ $FIND
	pause_find_
   menu0_
fi
fi
menu0_
#Find Pattern
}

function find_large_files_ () {
cyber_title_no_help_

 local C1="$(printf "\n${normal}Please enter path or folder:\n\n${menu}Example:\n\tLike [${normal}var${menu}] or [${normal}/var/www${menu}]\n\n${menu}Enter${menu} for whole disk: ${normal}")"
 read -e -p "$C1" findpath

 local C1="$(printf "\n${menu}If have mounted NFS store (can take more then 20 min) [${number}1${menu}] + [${number}Enter${menu}] to skip NFS\n${menu}Standart search press [${number}Enter${menu}]: ${normal}")"
 read -e -p "$C1" nfs
if [ "$nfs" == "1" ];
 then
 cyber_title_good_folder_search_
 echo -e "\n\n"
 echo -e "${menu}Size    Path${normal}"
 echo -e "----    ----"
   for i in G M K; do   
     du -ahxc --exclude={proc,sys,boot} /$findpath | grep [0-9]$i | sort -nr -k 1; 
     done | head -n 11
    
	else 
	cyber_title_good_folder_search_
	echo -e "\n\n"
	 echo -e "${menu}Size    Path${normal}"
 echo -e "----    ----"
      for i in G M K; do   
        du -ahc --exclude={proc,sys,boot} /$findpath | grep [0-9]$i | sort -nr -k 1; 
         done | head -n 11
fi
pause_
} 

#Explorer Hops

#Next Dir 0
function menu0_dir1_ () {
     export CURDIR1=`ls $lsopt "/${menu0_main[$counter]}" -C -1`
     export DIR1=`echo "/${menu0_main[$counter]}"`
	 
     menu1_
	 } 
	 
function menu0_title_ () {
#check_editor_pref_
 nano_banner_
 vim_banner_
 vi_banner_
IFS=$'\n' 
  set -f 
 CAT=$GREP
CURDIR=`ls $lsopt $PATH1 -C -1`

clear
	printf "${menu}${menu1}------------------------------------------${normal}0${menu}${menu1}-------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}]${normal}"       
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$du"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "$DIRLOCATION ${green}$PATH1${normal}"
	echo
	export CURLOCATION1=/
} 

function menu0_file_check_ () {
 if [ -f "/${menu0_main[$counter]}" ] ;
then
echo "file"
clear
echo -e "${menu}Boss,\nThis is a file ${green}${menu0_main[$counter]}${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n"
cat "/${menu0_main[$counter]}" | more
#To change----
local ENT=`echo -e "\n\n${menu}Press [${number}Enter${menu}] to continue or [${number}e${menu}] to edit ....${normal}\n"`
read -s -n1 -p "$ENT " filechoice
if [ "$filechoice" == "" ]; then
menu0_
elif [ "$filechoice" == "e" ]; then
$EDITOR "/${menu0_main[$counter]}"
else
menu0_
fi
menu0_
#To change-----
fi
}

function menu0_ () {
check_editor_pref_
 local selector=0
 menu0_title_

 
 if [ "$CURDIR" == "//" ] ;
 then
 menu0_
 fi
declare -a menu0_main=("<--" $CURDIR)
counter=0
function draw_menu0_ () {
    local DMENU=0
	
     for i in "${menu0_main[@]}"; do
	  
    if [[ ${menu0_main[$counter]} == $i ]]; 
	then
            tput setaf 2; 
	   echo -e "==> ${green}$i${normal}"; tput sgr0
	   
    else
       echo -e "    ${normal}/$i ${normal}"   ;
		
     fi
	 
      done

}
export localitemname=${menu0_main[$counter]}
function clear_menu0_()  
{
      for i in "${menu0_main[@]}"; 
	     do 
	      tput cuu1 setaf 0;
	    done
	 tput ed setaf 0
}

function select_from_list_ () {

local selector=0
    draw_menu0_
     while read -sn 1  key; 
    do 
	
 if [[ "$key" == "" ]] ; 
	then
	    #echo "Debug1 menu 0" && sleep 1
        export DIR1=`echo "/${menu0_main[$counter]}"`
		
menu0_file_check_
if [[ "$counter" == 0 ]];
   then
     menu0_
	 break;
fi
	menu0_dir1_
	break;
fi
    read -sN2 -t 0.0009 k1; read -sN1 -t 0.0009 k2; read -sN2 -t 0.0009 k3
    key+=${k1}${k2}${k3}
    case "$key" in
        # countersor up, previous item
       $'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
		"\e[?1000;1006;1015h") menu1_ ;;
		# call next menu with <> keys
		#left
		$'\e[D'|$'\e0D')   if [[ "$counter" == 0 ]];
                                           then
                                           menu0_
                                           fi
                                            ;; #menu12_      ;; #left  go back to main menu0_
		#right 
	    $'\e[C'|$'\e0C')  if [[ "$counter" == 0 ]];
                                           then
										   menu0_file_check_
                                           menu0_
                                           fi
		                                   menu0_file_check_ 
					                        menu0_dir1_ 
										   ;; #right  go to menu1_
		L) disable-hiden_ && menu0_ ;;
		H) enable-hiden_ && menu0_ ;;
		# use delete key on keybord to delete selected item
		3|$'\e[3~') delete_  ;;
		v) cat_ ;;
        a) vi_ && menu0_ && menu0_	;;
		b) vim_ && menu0_	&& menu0_ ;;
		c) nano_ && menu0_ && menu0_ ;;		1|d) create_dir_  ;; 
		2|f) create_file_  ;;
		6|i) find_file_folder_ ;;  
		v) cat_ ;;
		m|M) unset_banner_ && menu0_ ;;
        a) vi_ && menu0_	;;
		b) vim_ && menu0_	;;
		c) nano_ && menu0_ ;;
		k|K) clone_ ;;	
		U|u) user_managment_ ;;
        0|O) find_and_replace_ ;;	
		j) find_large_files_ ;;	
		k|K) clone_ ;;		
		5|r) rename_ ;;	
		P) permission_ ;;	
		7|p) find_pattern_ ;;
		$'\e') main_menu0_ ;;
		e) edit_file_ ;;
        # countersor down, next item
        $'\e[B'|$'\e0B') ((counter < ${#menu0_main[@]}-1)) && ((counter++)) ;;
        # home: first item
        $'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        $'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main[@]}-1));;
         # q, carriage return: quit
        x|q|'') exit_ ;;
    esac
	
    # Redraw menu
      clear_menu0_
      draw_menu0_
    done

}
select_from_list_
local selector=0
}


#Next Dir 1
function menu1_dir2_ () {  
local selector=1
echo  

	export CURDIR2=`ls $lsopt "$DIR1/${menu0_main1[$counter]}" -C -1` #<-----------------------------
	export DIR2=`echo "/${menu0_main1[$counter]}"`
	menu2_
	echo
}

function menu1_1_dir2_ () {  
local selector=1
echo 
	export CURDIR2=`ls $lsopt "$DIR1/$itemchoice1" -C -1` #<-----------------------------
	export DIR2=`echo "/$itemchoice1"`
	menu2_
	echo
}
 
function menu1_title_ () {
 nano_banner_
 vim_banner_
 vi_banner_
    clear && echo && clear 
	printf "${menu}${menu1}---------------------------------------${normal}1${menu}${menu1}----------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}]${normal}"     
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}$FIND${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "$DIRLOCATION ${green} $DIR1/ ${normal}"
	#echo -e "$du"
	export CURLOCATION1=$DIR1/
	echo
}
#Function to check if file or folder and open relevant editor
function menu1_file_check_ () {	
	if  [ -f "$DIR1/${menu0_main1[$counter]}" ] ;
then
echo "file"
clear
echo -e "${menu}Boss,\nThis is a file ${green}${menu0_main1[$counter]}${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n"
cat "$DIR1/${menu0_main1[$counter]}" | more
#To change----
local ENT=`echo -e "\n\n${menu}Press [${number}Enter${menu}] to continue or [${number}e${menu}] to edit ....${normal}\n"`
read  -n 1 -p "$ENT " filechoice
if [ "$filechoice" == "" ]; then
menu1_
elif [ "$filechoice" == "e" ]; then
$EDITOR "$DIR1/${menu0_main1[$counter]}"
menu1_
else
menu1_
fi
menu1_
#To change----- 
fi
}

#function to check if folder mor then 50 items
function menu1_file1_check_ () {	#<------
unset choice
 cd $DIR1 && ls --color=auto --group-directories-first  #<------
   printf "$ITEMS50"
	 read -e -p "$C1itemchoice" itemchoice1 #<------
	 #echo Huy1 && sleep 2
	if [ "$itemchoice1" == "" ] ; 
	then
	#echo Huy2 && sleep 2
	menu0_
	elif  [ -f "$DIR1/$itemchoice1" ] ;  #<------
then
#echo Huy3 && sleep 2
clear
echo -e "\n\n${menu}Boss,\nThis is a file ${green}$itemchoice1${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n" #<------
cat "$DIR1/$itemchoice1" | more   #<------
pause_file_check_
if [ "$choice" == "" ]; then
#echo Huy1 && sleep 2
menu1_
elif [ "$choice" == "e" ]; then
$EDITOR $DIR1/$itemchoice1  #<------
menu1_    #<------
fi
else
menu1_1_dir2_   #<------
fi
}

function menu1_ () {
clear
local selector=1
IFS=$'\n' 
set -f 
menu1_title_
declare -a menu0_main1=("<--" $CURDIR1) 
counter=0
local n=100

function draw_menu1_ () {
 DIRCOUNT=`echo "$CURDIR1" | wc -l`
    for i in "${menu0_main1[@]}"; do
	if [ "$DIRCOUNT" -gt "$n" ];
		then
		menu1_file1_check_
		else
      
		if [[ ${menu0_main1[$counter]} == $i ]] ; then
		 tput setaf 2; 
			echo -e "==> ${green}$i${normal}"  ; tput sgr0
        else
          echo -e "     /$i${normal}"  ;  
        fi
		fi
		done
}
function clear_menu1_()  {
    for i in "${menu0_main1[@]}"; do 
	tput cuu1 setaf 0;
	done
	tput ed setaf 0
}
function select_from_list_ () {
local selector=1
draw_menu1_
while read -sn 1  key; 
do 
if [[ "$key" == "" ]]; 
	then
	

menu1_file_check_
	back_to_root_

	menu1_dir2_  
break;    
fi
    read -sN2 -t 0.0009 k1; read -sN1 -t 0.0009 k2; read -sN2 -t 0.0009 k3
    key+=${k1}${k2}${k3}
    case "$key" in
        # countersor up, left: previous item
       $'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
        # countersor down, right: next item
        $'\e[B'|$'\e0B') ((counter < ${#menu0_main1[@]}-1)) && ((counter++)) ;;
		
	    $'\e[D'|$'\e0D')  if [[ "$counter" == 0 ]];
                                           then
                                           menu0_
                                           fi   
		                                    menu0_       ;; #left back to main menu
	       $'\e[C'|$'\e0C')  if [[ "$counter" == 0 ]];
                                           then
										   menu1_file_check_
                                           menu1_
                                           fi
										   menu1_file_check_
										   menu1_dir2_ ;; #right  #<-----------------------------------------------------menu1_dir2_ go to menu menu2_
		3|$'\e[3~') delete_  ;;
		L) disable-hiden_ && menu0_ ;;
		H) enable-hiden_ && menu0_ ;;
		1|d) create_dir_  ;;
		2|f) create_file_  ;;
		6|i) find_file_folder_ ;;
		7|p) find_pattern_ ;;
		v) cat_ ;;
        a) vi_ && menu1_	;;
		b) vim_ && menu1_	;;
		c) nano_ && menu1_ ;;		
		5|r) rename_ ;;	
		P) permission_ ;;	
		k|K) clone_ ;;
		j) find_large_files_ ;;	
		k|K) clone_ ;;	
		$'\e') main_menu0_ ;;
		e) edit_file_ ;;
        # home: first item
        $'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        $'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main1[@]}-1));;
         # q, carriage return: quit
        x|q|'') exit_ ;;
    esac
    # Redraw menu
    clear_menu1_
    draw_menu1_
done
}

local selector=1
select_from_list_

}


#Next Dir 2
function menu2_dir3_ () { 
	echo
	export CURDIR3=`ls $lsopt "$DIR1$DIR2/${menu0_main2[$counter]}" -C -1` #<-----------------------------
	export DIR3=`echo "/${menu0_main2[$counter]}"`
    echo 
	menu3_
}

function menu2_2_dir3_ () {  
local selector=2
echo 
	export CURDIR3=`ls $lsopt "$DIR1$DIR2/$itemchoice2" -C -1` #<-----------------------------
	export DIR3=`echo "/$itemchoice2"`
	menu3_
	echo
}

function menu2_title_ {
 nano_banner_
 vim_banner_
 vi_banner_
clear && echo && clear
local selector=2
 clear
	printf "${menu}${menu1}---------------------------------------${normal}2${menu}${menu1}----------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}]${normal}"       
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "$DIRLOCATION ${green}$DIR1$DIR2/${normal}"
	export CURLOCATION1=$DIR1$DIR2/
	echo
}

function menu_2_file2_check_ () {  #<------
unset choice
 cd $DIR1$DIR2 && ls --color=auto --group-directories-first  #<------
   printf "$ITEMS50"
	 read -e -p "$C1itemchoice" itemchoice2 #<------
	if [ "$itemchoice2" == "" ] ;  #<------
	then
	menu1_
	elif  [ -f "$DIR1$DIR2/$itemchoice2" ] ;  #<------
then
clear
echo -e "\n\n${menu}Boss,\nThis is a file ${green}$itemchoice2${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n" #<------
cat "$DIR1$DIR2/$itemchoice2" | more   #<------
pause_file_check_
if [ "$choice" == "" ]; then
menu2_
elif [ "$choice" == "e" ]; then
$EDITOR $DIR1$DIR2/$itemchoice2  #<------
menu2_    #<------
fi
else
menu2_2_dir3_   #<------
fi
}

function menu2_file_check_ () {
	if  [ -f "$DIR1$DIR2/${menu0_main2[$counter]}" ] ;
then
echo "file"
clear
echo -e "${menu}Boss,\nThis is a file ${green}${menu0_main2[$counter]}${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n"
cat "$DIR1$DIR2/${menu0_main2[$counter]}" | more

#To change----
local ENT=`echo -e "\n\n${menu}Press [${number}Enter${menu}] to continue or [${number}e${menu}] to edit ....${normal}\n"`
read -s -n1 -p "$ENT " filechoice
if [ "$filechoice" == "" ]; then
menu2_
elif [ "$filechoice" == "e" ]; then
$EDITOR "$DIR1$DIR2/${menu0_main2[$counter]}"
menu2_
else
menu2_
fi
menu2_
fi
#To change-----
}

function menu2_ () {
local selector=2
IFS=$'\n'   
set -f 
menu2_title_
declare -a menu0_main2=("<--" $CURDIR2)
counter=0
n=60
function draw_menu0_ () {  #<------
DIRCOUNT=`echo "$CURDIR2" | wc -l`
    for i in "${menu0_main2[@]}"; do  #<------
	if [ "$DIRCOUNT" -gt "$n" ];
		then
		menu_2_file2_check_   #<------
		else
      
		if [[ ${menu0_main2[$counter]} == $i ]] ; then #<------
		 tput setaf 2; 
			echo -e "==> ${green}$i${normal}"  ; tput sgr0
        else
          echo -e "     /$i${normal}"  ;  
        fi
		fi
		done
}

function clear_menu0_()  {
    for i in "${menu0_main2[@]}"; do 
	tput cuu1 setaf 0;
	done
	tput ed setaf 0
}

function select_from_list_ () {
local selector=2
draw_menu0_

while read -sn 1  key; 
do 
if [[ "$key" == "" ]]; 
	then

menu2_file_check_

	back_to_root_
menu2_dir3_ 
fi
    read -sN2 -t 0.0009 k1; read -sN1 -t 0.0009 k2; read -sN2 -t 0.0009 k3
    key+=${k1}${k2}${k3}
    case "$key" in
        # countersor up, left: previous item
       $'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
        # countersor down, right: next item
        $'\e[B'|$'\e0B') ((counter < ${#menu0_main2[@]}-1)) && ((counter++)) ;;
		3|$'\e[3~') delete_  ;;
	    $'\e[D'|$'\e0D')   if [[ "$counter" == 0 ]];
                                           then
                         ‏                  menu1_
                                           fi
										   menu1_      ;; #left back to previouse menu1_
	      $'\e[C'|$'\e0C')  if [[ "$counter" == 0 ]];
                                           then
										   menu2_file_check_
                                           menu2_
                                           fi
										   menu2_file_check_
										   menu2_dir3_ ;; #right  #<-----------------------------------------------------menu2_dir3_  go to menu menu3_
		1|d) create_dir_  ;;
		L) disable-hiden_ && menu1_ ;;
		H) enable-hiden_ && menu1_ ;;
		2|f) create_file_  ;;
		6|i) find_file_folder_ ;;
		7|p) find_pattern_ ;;
		v) cat_ ;;
        a) vi_ && menu2_	;;
		b) vim_ && menu2_	;;
		c) nano_ && menu2_ ;;		
		5|r) rename_ ;;	
		P) permission_ ;;	
		j) find_large_files_ ;;	
		k|K) clone_ ;;	
		$'\e') main_menu0_ ;;
		e) edit_file_ ;;
        # home: first item
        $'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        $'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main2[@]}-1));;
         # q, carriage return: quit
        x|q|'') exit_ ;;
    esac
    # Redraw menu
    clear_menu0_
    draw_menu0_
done
}
select_from_list_
local selector=2

}


#Next Dir 3
function menu3_dir4_ () { 
	echo
	export CURDIR4=`ls $lsopt "$DIR1$DIR2$DIR3/${menu0_main3[$counter]}" -C -1` #<-----------------------------
	export DIR4=`echo "/${menu0_main3[$counter]}"`  #<-----------------------------
    echo 
	menu4_ 
}

function menu3_3_dir4_ () {  
local selector=3
echo 
	export CURDIR4=`ls $lsopt "$DIR1$DIR2$DIR3/$itemchoice3" -C -1` #<-----------------------------
	export DIR4=`echo "/$itemchoice3"`
	menu4_
	echo
}

function menu3_title_ {
local selector=3
 nano_banner_
 vim_banner_
 vi_banner_
clear && echo && clear
	printf "${menu}${menu1}---------------------------------------${normal}3${menu}${menu1}----------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}]${normal}"       
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
    echo -e "$DIRLOCATION ${green}$DIR1$DIR2$DIR3/ ${normal}"
	echo
	export CURLOCATION1=$DIR1$DIR2$DIR3/
}

function menu3_file_check_ () {
		if  [ -f "$DIR1$DIR2$DIR3/${menu0_main3[$counter]}" ] ;
then
echo "file"
clear
echo -e "${menu}Boss,\nThis is a file ${green}${menu0_main3[$counter]}${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n"
cat "$DIR1$DIR2$DIR3/${menu0_main3[$counter]}" | more
#To change----
local ENT=`echo -e "\n\n${menu}Press [${number}Enter${menu}] to continue or [${number}e${menu}] to edit ....${normal}\n"`
read -s -n1 -p "$ENT " filechoice
if [ "$filechoice" == "" ]; then
menu3_
elif [ "$filechoice" == "e" ]; then
$EDITOR "$DIR1$DIR2$DIR3/${menu0_main3[$counter]}"
menu3_
else
menu3_
fi
menu3_
#To change-----
fi
}

function menu_3_file3_check_ () {  #<------d
unset choice
 cd $DIR1$DIR2$DIR3 && ls --color=auto --group-directories-first  #<------d
   printf "$ITEMS50"
	 read -e -p "$C1itemchoice" itemchoice3 #<------d
	if [ "$itemchoice3" == "" ] ;  #<------d
	then
	menu2_
	elif  [ -f "$DIR1$DIR2$DIR3/$itemchoice3" ] ;  #<------d
then
clear
echo -e "\n\n${menu}Boss,\nThis is a file ${green}$itemchoice3${number}${normal}${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n"
cat "$DIR1$DIR2$DIR3/$itemchoice3" | more   #<------d
pause_file_check_
if [ "$choice" == "" ]; then
menu3_   #<------d
elif [ "$choice" == "e" ]; then
$EDITOR $DIR1$DIR2$DIR3/$itemchoice3  #<------d
menu3_    #<------d
fi
else
menu3_3_dir4_   #<------d
fi
}

function menu3_ () {
IFS=$'\n'   
set -f 
local selector=3
menu3_title_
declare -a menu0_main3=("<--" $CURDIR3) #<-----------------------------
counter=0
function draw_menu0_ () {
DIRCOUNT=`echo "$CURDIR3" | wc -l` #<------d
    for i in "${menu0_main3[@]}"; do  #<------d
	if [ "$DIRCOUNT" -gt "$n" ];
		then
		menu_3_file3_check_   #<------d
		else
      
		if [[ ${menu0_main3[$counter]} == $i ]] ; then #<------d
		 tput setaf 2; 
			echo -e "==> ${green}$i${normal}"  ; tput sgr0
        else
          echo -e "     /$i${normal}"  ;  
        fi
		fi
		done
}
function clear_menu0_()  {
    for i in "${menu0_main3[@]}"; do 
	tput cuu1 setaf 0;
	done
	tput ed setaf 0
}
function select_from_list_ () {
draw_menu0_
while read -sn 1  key; 
do  
    if [[ "$key" == "" ]]; 
	then

menu3_file_check_
	back_to_root_
	menu3_dir4_	#<-----------------------------------------------------menu3_dir4_  go to menu menu4_
	fi
    read -sN2 -t 0.0009 k1; read -sN1 -t 0.0009 k2; read -sN2 -t 0.0009 k3
    key+=${k1}${k2}${k3}
    case "$key" in
        # countersor up, left: previous item
       $'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
        # countersor down, right: next item
		3|$'\e[3~') delete_  ;;
        $'\e[B'|$'\e0B') ((counter < ${#menu0_main3[@]}-1)) && ((counter++)) ;;
		$'\e[D'|$'\e0D') if [[ "$counter" == 0 ]];
                                           then
                                           menu2_
                                           fi
		                                    menu2_       ;; #left back to previouse menu2_
	       $'\e[C'|$'\e0C')  if [[ "$counter" == 0 ]];
                                           then
										   menu3_file_check_
                                           menu3_
                                           fi
										   menu3_file_check_
										   menu3_dir4_   ;;  #<-----------------------------------------------------menu3_dir4_  go to menu menu4_
	    1|d) create_dir_  ;;
		L) disable-hiden_ && menu2_ ;;
		H) enable-hiden_ && menu2_ ;;
		2|f) create_file_  ;;
		6|i) find_file_folder_ ;;
		v) cat_ ;;
        a) vi_ && menu3_	;;
		b) vim_ && menu3_	;;
		c) nano_ && menu3_ ;;		
		7|p) find_pattern_ ;;
		5|r) rename_ ;;	
		P) permission_ ;;	
		j) find_large_files_ ;;	
		k|K) clone_ ;;	
		$'\e') main_menu0_ ;;
		e) edit_file_ ;;
        # home: first item
        $'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        $'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main3[@]}-1));;
         # q, carriage return: quit
        x|q|'') exit_ ;;
    esac
    # Redraw menu
    clear_menu0_
    draw_menu0_
done
}
select_from_list_
local selector=3
}


#Next Dir 4
function menu4_dir5_ () { 
	echo
	export CURDIR5=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4/${menu0_main4[$counter]}" -C -1` #<-----------------------------CURDIR4=`ls "$DIR1/$DIR2/${menu0_main3[$counter]}" -C -1`
	export DIR5=`echo "/${menu0_main4[$counter]}"`
	echo
	menu5_  && break
}

function menu4_4_dir5_ () {  
local selector=4
echo 
	export CURDIR5=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4/$itemchoice4" -C -1` #<-----------------------------
	export DIR5=`echo "/$itemchoice4"`
	menu5_
	echo
}

function menu4_title_ {
local selector=4
 nano_banner_
 vim_banner_
 vi_banner_
clear && echo && clear
	printf "${menu}${menu1}---------------------------------------${normal}4${menu}${menu1}----------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}]${normal}"       
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
    echo -e "$DIRLOCATION ${green} $DIR1$DIR2$DIR3$DIR4/ ${normal}"
	echo
	export CURLOCATION1=$DIR1$DIR2$DIR3$DIR4/
	}

function menu_4_file4_check_ () {  #<------d
unset choice
 cd $DIR1$DIR2$DIR3$DIR4 && ls --color=auto --group-directories-first  #<------d
   printf "$ITEMS50"
	 read -e -p "$C1itemchoice" itemchoice4 #<------d
	if [ "$itemchoice4" == "" ] ;  #<------d
	then
	menu3_
	elif  [ -f "$DIR1$DIR2$DIR3$DIR4/$itemchoice4" ] ;  #<------d
then
clear
echo -e "\n\n${menu}Boss,\nThis is a file ${green}$itemchoice4${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n" #<------d
cat "$DIR1$DIR2$DIR3$DIR4/$itemchoice4" | more   #<------d
pause_file_check_
if [ "$choice" == "" ]; then
menu3_   #<------d
elif [ "$choice" == "e" ]; then
$EDITOR $DIR1$DIR2$DIR3$DIR4/$itemchoice4  #<------d
menu4_    #<------d
fi
else
menu4_4_dir5_   #<------d
fi
}

function menu4_file_check_ () {
		if  [ -f "$DIR1$DIR2$DIR3$DIR4/${menu0_main4[$counter]}" ] ;
then
echo "file"
clear
echo -e "${menu}Boss,\nThis is a file ${green}${menu0_main4[$counter]}${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n"
cat "$DIR1$DIR2$DIR3$DIR4/${menu0_main4[$counter]}" | more
local ENT=`echo -e "\n\n${menu}Press [${number}Enter${menu}] to continue or [${number}e${menu}] to edit ....${normal}\n"`
read -s -n1 -p "$ENT " filechoice
if [ "$filechoice" == "" ]; then
menu4_
elif [ "$filechoice" == "e" ]; then
$EDITOR "$DIR1$DIR2$DIR3$DIR4/${menu0_main4[$counter]}"
menu4_
else
menu4_
fi
menu4_
#To change-----
fi

}

function menu4_ () {
local selector=4
menu4_title_
IFS=$'\n'   
set -f 
declare -a menu0_main4=("<--" $CURDIR4) #<-----------------------------
counter=0
function draw_menu0_ () {  #<------4
DIRCOUNT=`echo "$CURDIR4" | wc -l` #<------4
    for i in "${menu0_main4[@]}"; do  #<------4
	if [ "$DIRCOUNT" -gt "$n" ];
		then
		menu_4_file4_check_   #<------d
		else
      
		if [[ ${menu0_main4[$counter]} == $i ]] ; then #<------d
		 tput setaf 2; 
			echo -e "==> ${green}$i${normal}"  ; tput sgr0
        else
          echo -e "     /$i${normal}"  ;  
        fi
		fi
		done

}
function clear_menu0_()  {
    for i in "${menu0_main4[@]}"; do 
	tput cuu1 setaf 0;
	done
	tput ed setaf 0
}
function select_from_list_ () {
selector=4
draw_menu0_
while read -sn 1  key; 
do 
    if [[ "$key" == "" ]]; 
	then

menu4_file_check_
	back_to_root_
	menu4_file_check_
	menu4_dir5_  #<-----------------------------------------------------menu3_dir4_  go to menu menu4_
	fi
    read -sN2 -t 0.0009 k1; read -sN1 -t 0.0009 k2; read -sN2 -t 0.0009 k3
    key+=${k1}${k2}${k3}
    case "$key" in
        # countersor up, left: previous item
       $'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
        # countersor down, right: next item
		3|$'\e[3~') delete_  ;;
        $'\e[B'|$'\e0B') ((counter < ${#menu0_main4[@]}-1)) && ((counter++)) ;;
		$'\e[D'|$'\e0D') if [[ "$counter" == 0 ]];
                                           then
                                           menu3_
                                           fi
										   menu3_      ;; #left back to previouse menu1_
	    $'\e[C'|$'\e0C')  if [[ "$counter" == 0 ]];
                                           then
										   menu4_file_check_
                                           menu4_
                                           fi
										   menu4_file_check_
										   menu4_dir5_  ;; #<------------------------menu3_dir4_  go to menu menu4_
		1|d) create_dir_  ;;
		2|f) create_file_  ;;	
		L) disable-hiden_ && menu3_ ;;
		H) enable-hiden_ && menu3_ ;;
        6|i) find_file_folder_ ;;
		7|p) find_pattern_ ;;
		v) cat_ ;;
        a) vi_ && menu3_	;;
		b) vim_ && menu3_	;;
		c) nano_ && menu3_ ;;		
		5|r) rename_ ;;	
		P) permission_ ;;	
		j) find_large_files_ ;;	
		k|K) clone_ ;;	
		$'\e') main_menu0_ ;;
		e) edit_file_ ;;		
        # home: first item
        $'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        $'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main4[@]}-1));;
         # q, carriage return: quit
        x|q|'') exit_ ;;
    esac
    # Redraw menu
    clear_menu0_
    draw_menu0_
done
}
selector=4
select_from_list_
}


#Next Dir 5
function menu5_dir6_ () {
	echo
	export CURDIR6=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4$DIR5/${menu0_main5[$counter]}" -C -1` #<-----------------------------CURDIR4=`ls "$DIR1/$DIR2/${menu0_main3[$counter]}" -C -1`
	export DIR6=`echo "/${menu0_main5[$counter]}"` #<-----------------------------
    echo 
	menu6_
}

function menu5_5_dir6_ () {  
local selector=5
echo 
	export CURDIR6=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4$DIR5/$itemchoice5" -C -1` #<-----------------------------
	export DIR6=`echo "/$itemchoice5"`
	menu6_
	echo
}

function menu5_title_ {
local selector=5
 nano_banner_
 vim_banner_
 vi_banner_

clear && echo && clear
	printf "${menu}${menu1}---------------------------------------${normal}5${menu}${menu1}----------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}]${normal}"       
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
    echo -e "$DIRLOCATION ${green} $DIR1$DIR2$DIR3$DIR4$DIR5/ ${normal}"
	echo
	export CURLOCATION1=$DIR1$DIR2$DIR3$DIR4$DIR5/
}

function menu_5_file5_check_ () {  #<------d
unset choice
 cd $DIR1$DIR2$DIR3$DIR4$DIR5 && ls --color=auto --group-directories-first  #<------d
   printf "$ITEMS50"
	 read -e -p "$C1itemchoice" itemchoice5 #<------d
	if [ "$itemchoice5" == "" ] ;  #<------d
	then
	menu4_  #<------d
	elif  [ -f "$DIR1$DIR2$DIR3$DIR4$DIR5/$itemchoice5" ] ;  #<------d
then
clear
echo -e "\n\n${menu}Boss,\nThis is a file ${green}$itemchoice5${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n" #<------d
cat "$DIR1$DIR2$DIR3$DIR4$DIR5/$itemchoice5" | more   #<------d
pause_file_check_
if [ "$choice" == "" ]; then
menu5_   #<------d
elif [ "$choice" == "e" ]; then
$EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5/$itemchoice5  #<------d
menu5_    #<------d
fi
else
menu5_5_dir6_   #<------d
fi
}

function menu5_file_check_ () {		
		if  [ -f "$DIR1$DIR2$DIR3$DIR4$DIR5/${menu0_main5[$counter]}" ] ;
then
echo "file"
clear
echo -e "${menu}Boss,\nThis is a file ${green}${menu0_main5[$counter]}${normal}${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n"
cat "$DIR1$DIR2$DIR3$DIR4$DIR5/${menu0_main5[$counter]}" | more
#To change----
local ENT=`echo -e "\n\n${menu}Press [${number}Enter${menu}] to continue or [${number}e${menu}] to edit ....${normal}\n"`
read -s -n1 -p "$ENT " filechoice
if [ "$filechoice" == "" ]; then
menu5_
elif [ "$filechoice" == "e" ]; then
$EDITOR "$DIR1$DIR2$DIR3$DIR4$DIR5/${menu0_main5[$counter]}"
menu5_
else
menu5_
fi
menu5_
#To change-----

fi
}

function menu5_ () {
local selector=5
menu5_title_
IFS=$'\n'   
set -f 
declare -a menu0_main5=("<--" $CURDIR5) #<-----------------------------
counter=0
function draw_menu0_ () {
 menu5_title_  #<------d
DIRCOUNT=`echo "$CURDIR5" | wc -l` #<------d
    for i in "${menu0_main5[@]}"; do  #<------d
	if [ "$DIRCOUNT" -gt "$n" ];
		then
		menu_5_file5_check_   #<------
		else
      
		if [[ ${menu0_main5[$counter]} == $i ]] ; then #<------
		 tput setaf 2; 
			echo -e "==> ${green}$i${normal}"  ; tput sgr0
        else
          echo -e "     /$i${normal}"  ;  
        fi
		fi
		done
}
function clear_menu0_()  {
    for i in "${menu0_main5[@]}"; do #<-----------------------------
	tput cuu1 setaf 0; 
	done
	tput ed setaf 0
}
function select_from_list_ () {
selector=5
draw_menu0_
while read -sn 1  key; 
do # 1 char (not delimiter), silent
    # Check for enter/space
    if [[ "$key" == "" ]]; 
	then

menu5_file_check_	
	back_to_root_
    menu5_dir6_ #<-----------------------------------------------------menu5_dir6_  go to menu menu0_
	fi
	
    read -sN2 -t 0.0009 k1; read -sN1 -t 0.0009 k2; read -sN2 -t 0.0009 k3
    key+=${k1}${k2}${k3}
    case "$key" in
        # countersor up, left: previous item
       $'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
        # countersor down, right: next item
        $'\e[B'|$'\e0B') ((counter < ${#menu0_main5[@]}-1)) && ((counter++)) ;; 
		$'\e[D'|$'\e0D') if [[ "$counter" == 0 ]];
                                           then
                                           menu4_
                                           fi
										   menu4_      ;; #left back to previouse menu4_
	   $'\e[C'|$'\e0C')  if [[ "$counter" == 0 ]];
                                           then
										   menu5_file_check_
                                           menu5_
                                           fi 
										   menu5_file_check_
										   menu5_dir6_   ;;#<-----------------------------------------------------menu3_dir4_  go to menu menu0_
		1|d) create_dir_  ;;
		2|f) create_file_  ;;	
		L) disable-hiden_ && menu4_ ;;
		H) enable-hiden_ && menu4_ ;;
		6|i) find_file_folder_ ;;
		v) cat_ ;;
        a) vi_ && menu5_	;;
		b) vim_ && menu5_	;;
		c) nano_ && menu5_ ;;		
		5|r) rename_ ;;	
		P) permission_ ;;	
		j) find_large_files_ ;;	
		k|K) clone_ ;;	
		7|p) find_pattern_ ;;
		$'\e') main_menu0_ ;;
		e) edit_file_ ;;
        3|$'\e[3~') delete_  ;;		
        # home: first item
        $'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        $'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main5[@]}-1));; 
         # q, carriage return: quit
         x|q|'') exit_ ;;
    esac
    # Redraw menu
    clear_menu0_
    draw_menu0_
	#case_
done
}
selector=5
select_from_list_
}
 

#Next Dir 6
function menu6_dir7_ () { 
	#Replase:
#1. menu6_dir7_ to next one menu7_dir8_
#2. menu0_main6 to menu0_main7
#3. CURDIR6 to CURDIR7
#4. DIR6 to DIR7
#5. menu5_ to menu6_
#6. "Current location 6 is: $DIR1$DIR2$DIR3$DIR4$DIR5/${menu0_main5[$counter]}"    to   echo -e "Current location 6 is: $DIR1$DIR2$DIR3$DIR4$DIR5/${menu0_main5[$counter]}"

	echo
	#!!!Next must be  chenged to CURDIR8=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR7$DIR8/${menu0_main6[$counter]}" -C -1`
	export CURDIR7=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/${menu0_main6[$counter]}" -C -1` #<-----------------------------CURDIR4=`ls "$DIR1/$DIR2/${menu0_main3[$counter]}" -C -1`
	#!!!Next must be changed to DIR8=`echo  "/${menu0_main7[$counter]}"`
	export DIR7=`echo "/${menu0_main6[$counter]}"` #<-----------------------------
    echo 
	
	menu7_ && break
}

function menu6_6_dir7_ () {  
local selector=6
echo 
	export CURDIR7=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/$itemchoice6" -C -1` #<-----------------------------
	export DIR7=`echo "/$itemchoice6"`
	menu7_
	echo
}

function menu6_title_ {
local selector=3
 nano_banner_
 vim_banner_
 vi_banner_
IFS=$'\n'
set -f 
clear && echo && clear
	printf "${menu}${menu1}---------------------------------------${normal}6${menu}${menu1}----------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}]${normal}"       
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
    echo -e "$DIRLOCATION ${green} $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/ ${normal}"
	echo
export CURLOCATION1=$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/
}

function menu6_file_check_ () {		
		if  [ -f "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/${menu0_main6[$counter]}" ] ;
then
echo "file"
clear
echo -e "${menu}Boss,\nThis is a file ${green}${menu0_main6[$counter]}${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n"
cat "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/${menu0_main6[$counter]}" | more
#To change----
local ENT=`echo -e "\n\n${menu}Press [${number}Enter${menu}] to continue or [${number}e${menu}] to edit ....${normal}\n"`
read -s -n1 -p "$ENT " filechoice
if [ "$filechoice" == "" ]; then
menu6_
elif [ "$filechoice" == "e" ]; then
$EDITOR "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/${menu0_main6[$counter]}"
menu6_
else
menu6_
fi
menu6_
#To change-----
fi
}

function menu6_ () {
local selector=6
menu6_title_
declare -a menu0_main6=("<--" $CURDIR6) #<-----------------------------
counter=0
function draw_menu0_ () {
local DMENU=0
    for i in "${menu0_main6[@]}"; do #<-----------------------------
        if [[ ${menu0_main6[$counter]} == $i ]]; then #<-----------------------------
            tput setaf 2; 
			echo -e "==> ${green}$i"; tput sgr0
        else
          echo -e "    /$i";  
        fi
		done
}
function clear_menu0_()  {
    for i in "${menu0_main6[@]}"; do #<-----------------------------
	tput cuu1 setaf 0; 
	done
	tput ed setaf 0
}
function select_from_list_ () {
local selector=6
draw_menu0_
while read -sn 1  key; 
do # 1 char (not delimiter), silent
    # Check for enter/space
    if [[ "$key" == "" ]]; 
	then

menu6_file_check_
	back_to_root_
	#!!!Next must be  chenged to | menu7_dir8_
    menu6_dir7_  #<-----------------------------------------------------menu6_dir7_  go to menu menu0_
	fi
	
    read -sN2 -t 0.0009 k1; read -sN1 -t 0.0009 k2; read -sN2 -t 0.0009 k3
    key+=${k1}${k2}${k3}
    case "$key" in
        # countersor up, left: previous item
       $'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
        # countersor down, right: next item
		3|$'\e[3~') delete_  ;;
        $'\e[B'|$'\e0B') ((counter < ${#menu0_main6[@]}-1)) && ((counter++)) ;; 
		#!!!Next must be  chenged to | 
		$'\e[D'|$'\e0D') if [[ "$counter" == 0 ]];
                                           then
                                           menu5_
                                           fi
										   menu5_     ;; #left back to previouse menu4_
	    $'\e[C'|$'\e0C')  if [[ "$counter" == 0 ]];
                                           then
										   menu6_file_check_
                                           menu6_
                                           fi 
										   menu6_file_check_
										   menu6_dir7_    ;;#<-----------------------------------------------------menu3_dir4_  go to menu menu0_
		1|d) create_dir_  ;;
		2|f) create_file_  ;;
		L) disable-hiden_ && menu5_ ;;
		H) enable-hiden_ && menu5_ ;;
        6|i) find_file_folder_ ;;
		v) cat_ ;;
        a) vi_ && menu6_	;;
		b) vim_ && menu6_	;;
		c) nano_ && menu6_ ;;		
		7|p) find_pattern_ ;;
		5|r) rename_ ;;	
		P) permission_ ;;	
		j) find_large_files_ ;;	
		k|K) clone_ ;;	
		$'\e') main_menu0_ ;;
		e) edit_file_ ;;		
        # home: first item
        $'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        $'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main6[@]}-1));; 
         # q, carriage return: quit
         x|q|'') exit_ ;;
    esac
    # Redraw menu
    clear_menu0_
    draw_menu0_
	#case_
done
}
local selector=6
select_from_list_
}


#Next Dir 7
function menu7_dir8_ () {  #<-----------------------------------------------------menu7_dir7_  go to menu menu0_
	#Replase:
#1. menu7_dir7_ to next one menu7_dir8_
#2. menu0_main7_ to menu0_main8
#3. CURDIR6 to CURDIR7
#4. DIR6 to DIR7
#5. menu5_ to menu7_
#6. "Current location 6 is: $DIR1$DIR2$DIR3$DIR4$DIR5/${menu0_main5[$counter]}"    to   echo -e "Current location 6 is: $DIR1$DIR2$DIR3$DIR4$DIR5/${menu0_main5[$counter]}"

	echo
	#!!!Next must be  chenged to CURDIR8=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR7$DIR8/${menu0_main7[$counter]}" -C -1`
	export CURDIR8=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/${menu0_main7[$counter]}" -C -1` #<-----------------------------CURDIR4=`ls "$DIR1/$DIR2/${menu0_main3[$counter]}" -C -1`
	#!!!Next must be changed to DIR8=`echo  "/${menu0_main7[$counter]}"`
	export DIR8=`echo "/${menu0_main7[$counter]}"` #<-----------------------------
    echo 
	
	menu8_  && break
}

function menu7_7_dir8_ () {  
local selector=7
echo 
	export CURDIR7=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/$itemchoice7" -C -1` #<-----------------------------
	export DIR7=`echo "/$itemchoice7"`
	menu8_
	echo
}

function menu7_title_ {
local selector=7
 nano_banner_
 vim_banner_
 vi_banner_
IFS=$'\n'
set -f 
clear && echo && clear
	printf "${menu}${menu1}---------------------------------------${normal}7${menu}${menu1}----------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}]${normal}"       
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
    echo -e "$DIRLOCATION ${green} $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/ ${normal}"
	echo
	export CURLOCATION1=$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/ 
}

function menu7_file_check_ () {	
		if  [ -f "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/${menu0_main7[$counter]}" ] ;
then
echo "file"
clear
echo -e "${menu}Boss,\nThis is a file ${green}${menu0_main7[$counter]}${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n"
cat "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/${menu0_main7[$counter]}" | more
#To change----
local ENT=`echo -e "\n\n${menu}Press [${number}Enter${menu}] to continue or [${number}e${menu}] to edit ....${normal}\n"`
read -n 1 -p "$ENT " filechoice
if [ "$filechoice" == "" ]; then
menu7_
elif [ "$filechoice" == "e" ]; then
$EDITOR "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/${menu0_main7[$counter]}"
menu7_
else
menu7_
fi
menu7_
#To change-----
fi
}

function menu7_ () {
local selector=7
menu7_title_
declare -a menu0_main7=("<--" $CURDIR7) #<-----------------------------
counter=0
function draw_menu0_ () {
local DMENU=0
    for i in "${menu0_main7[@]}"; do #<-----------------------------
        if [[ ${menu0_main7[$counter]} == $i ]]; then #<-----------------------------
            tput setaf 2; 
			echo -e "==> ${green}$i"; tput sgr0
        else
          echo -e "    /$i";  
        fi
		done
}

function clear_menu0_()  {
    for i in "${menu0_main7[@]}"; do #<-----------------------------
	tput cuu1 setaf 0; 
	done
	tput ed setaf 0
}
function select_from_list_ () {
local selector=7
draw_menu0_
while read -sn 1  key; 
do # 1 char (not delimiter), silent
    # Check for enter/space
    if [[ "$key" == "" ]]; 
	then

menu7_file_check_	
	back_to_root_
	#!!!Next must be  chenged to | menu7_dir8_
    menu7_dir8_  #<-----------------------------------------------------menu7_dir7_  go to menu menu0_
	fi
	
    read -sN2 -t 0.0009 k1; read -sN1 -t 0.0009 k2; read -sN2 -t 0.0009 k3
    key+=${k1}${k2}${k3}
    case "$key" in
        # countersor up, left: previous item
       $'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
        # countersor down, right: next item
		3|$'\e[3~') delete_  ;;
        $'\e[B'|$'\e0B') ((counter < ${#menu0_main7[@]}-1)) && ((counter++)) ;; 
		#!!!Next must be  chenged to | 
		$'\e[D'|$'\e0D') if [[ "$counter" == 0 ]];
                                           then
                                           menu6_
                                           fi
										   menu6_       ;; #left back to previouse menu4_
	    $'\e[C'|$'\e0C')  if [[ "$counter" == 0 ]];
                                           then
										   menu7_file_check_
                                           menu7_
                                           fi
										   menu7_file_check_
										   menu7_dir8_   ;;#<-----------------------------------------------------menu3_dir4_  go to menu menu0_
		1|d) create_dir_  ;;
		2|f) create_file_  ;;	
		L) disable-hiden_ && menu6_ ;;
		H) enable-hiden_ && menu6_ ;;
		7|p) find_pattern_ ;;
        6|i) find_file_folder_ ;;
		v) cat_ ;;
        a) vi_ && menu7_	;;
		b) vim_ && menu7_	;;
		c) nano_ && menu7_ ;;		
		5|r) rename_ ;;	
		P) permission_ ;;	
		j) find_large_files_ ;;	
		k|K) clone_ ;;	
		$'\e') main_menu0_ ;;
		e) edit_file_ ;;		
        # home: first item
        $'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        $'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main7[@]}-1));; 
         # q, carriage return: quit
        x|q|''|$'\e')echo "Aborted.${normal}" && exit;;
    esac
    # Redraw menu
    clear_menu0_
    draw_menu0_
	#case_
done
}
local selector=7
select_from_list_
}


#Next Dir 8
function menu8_dir9_ () {  #<-----------------------------------------------------menu7_dir7_  go to menu menu0_

	echo
	#!!!Next must be  chenged to CURDIR8=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR7$DIR8/${menu0_main7[$counter]}" -C -1`
	export CURDIR9=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/${menu0_main8[$counter]}" -C -1` #<-----------------------------CURDIR4=`ls "$DIR1/$DIR2/${menu0_main3[$counter]}" -C -1`
	#!!!Next must be changed to DIR8=`echo  "/${menu0_main7[$counter]}"`
	export DIR9=`echo "/${menu0_main8[$counter]}"` #<-----------------------------
    echo 
	
	menu9_ && break
}

function menu8_8_dir9_ () {  
local selector=8
echo 
	export CURDIR9=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/$itemchoice8" -C -1` #<-----------------------------
	export DIR9=`echo "/$itemchoice8"`
	menu9_
	echo
}

function menu8_title_ {
 nano_banner_
 vim_banner_
 vi_banner_
local selector=8
IFS=$'\n'
set -f 
 clear && echo && clear
	printf "${menu}${menu1}---------------------------------------${normal}8${menu}${menu1}----------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}]${normal}"       
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
    echo -e "$DIRLOCATION ${green} $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/ ${normal}"
	echo
	export CURLOCATION1=$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/
}

function menu8_file_check_ () {			
		if  [ -f "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/${menu0_main8[$counter]}" ] ;
then
echo "file"
clear
echo -e "${menu}Boss,\nThis is a file ${green}${menu0_main8[$counter]}${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n"
cat "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/${menu0_main8[$counter]}" | more
#To change----
local ENT=`echo -e "\n\n${menu}Press [${number}Enter${menu}] to continue or [${number}e${menu}] to edit ....${normal}\n"`
read -s -n1 -p "$ENT " filechoice
if [ "$filechoice" == "" ]; then
menu8_
elif [ "$filechoice" == "e" ]; then
$EDITOR "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/${menu0_main8[$counter]}"
menu8_
else
menu8_
fi
menu8_
#To change-----
fi
}

function menu8_ () {
local selector=8
menu8_title_ 
declare -a menu0_main8=("<--" $CURDIR8) 
counter=0
function draw_menu0_ () {
local DMENU=0
    for i in "${menu0_main8[@]}"; do 
        if [[ ${menu0_main8[$counter]} == $i ]]; then 
            tput setaf 2; 
			echo -e "==> ${green}$i"; tput sgr0
        else
          echo -e "    /$i";  
        fi
		done
}

function clear_menu0_()  {
local selector=8
    for i in "${menu0_main8[@]}"; do 
	tput cuu1 setaf 0; 
	done
	tput ed setaf 0
}
function select_from_list_ () {
local selector=8
draw_menu0_
while read -sn 1  key; 
do # 1 char (not delimiter), silent
    # Check for enter/space
    if [[ "$key" == "" ]]; 
	then

menu8_file_check_	
	back_to_root_
    menu8_dir9_  
	fi
	
    read -sN2 -t 0.0009 k1; read -sN1 -t 0.0009 k2; read -sN2 -t 0.0009 k3
    key+=${k1}${k2}${k3}
    case "$key" in
        # countersor up, left: previous item
       $'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
        # countersor down, right: next item
		3|$'\e[3~') delete_  ;;
        $'\e[B'|$'\e0B') ((counter < ${#menu0_main8[@]}-1)) && ((counter++)) ;; 
		#!!!Next must be  chenged to | 
		$'\e[D'|$'\e0D')  if [[ "$counter" == 0 ]];
                                           then
                                           menu7_
                                           fi  
                                           menu7_										   ;; #left back to previouse menu4_
	    $'\e[C'|$'\e0C')  if [[ "$counter" == 0 ]];
                                           then
										   menu8_file_check_
                                           menu8_
                                           fi
										   menu8_file_check_
										   menu8_dir9_    ;;#<-----------------------------------------------------menu3_dir4_  go to menu menu0_
	    1|d) create_dir_  ;;
		L) disable-hiden_ && menu7_ ;;
		H) enable-hiden_ && menu7_ ;;
		2|f) create_file_  ;;
		6|i) find_file_folder_ ;;
		7|p) find_pattern_ ;;
		v) cat_ ;;
        a) vi_ && menu8_	;;
		b) vim_ && menu8_	;;
		c) nano_ && menu8_ ;;		
		5|r) rename_ ;;	
		P) permission_ ;;	
		j) find_large_files_ ;;	
		k|K) clone_ ;;	
		$'\e') main_menu0_ ;;
		e) edit_file_ ;;
        # home: first item
        $'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        $'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main8[@]}-1));; 
         # q, carriage return: quit
         x|q|'') exit_ ;;
    esac
    # Redraw menu
    clear_menu0_
    draw_menu0_
	#case_
done
}
local selector=8
select_from_list_
}


#Next Dir 9
function menu9_dir10_ () {  #<-----------------------------------------------------menu7_dir7_  go to menu menu0_
	echo
	#!!!Next must be  chenged to CURDIR8=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR7$DIR8/${menu0_main7[$counter]}" -C -1`
	export CURDIR10=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/${menu0_main9[$counter]}" -C -1` #<-----------------------------CURDIR4=`ls "$DIR1/$DIR2/${menu0_main3[$counter]}" -C -1`
	#!!!Next must be changed to DIR8=`echo  "/${menu0_main7[$counter]}"`
	export DIR10=`echo "/${menu0_main9[$counter]}"` #<-----------------------------
    echo 
	
	menu10_ && break
}

function menu9_9_dir10_ () {  
local selector=9
echo 
	export CURDIR10=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/$itemchoice9" -C -1` #<-----------------------------
	export DIR10=`echo "/$itemchoice9"`
	menu10_
	echo
}

function menu9_title_ {
local selector=9
IFS=$'\n'
set -f 
 clear && echo && clear
	printf "${menu}${menu1}---------------------------------------${normal}9${menu}${menu1}----------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}]${normal}"       
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
    echo -e "$DIRLOCATION ${green} $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/ ${normal}"
	echo
	export CURLOCATION1=$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/
}

function menu9_file_check_ () {			
		if  [ -f "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/${menu0_main9[$counter]}" ] ;
then
echo "file"
clear
echo -e "${menu}Boss,\nThis is a file ${green}${menu0_main9[$counter]}${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n"
cat "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/${menu0_main9[$counter]}" | more
#To change----
local ENT=`echo -e "\n\n${menu}Press [${number}Enter${menu}] to continue or [${number}e${menu}] to edit ....${normal}\n"`
read -s -n1 -p "$ENT " filechoice
if [ "$filechoice" == "" ]; then
menu9_
elif [ "$filechoice" == "e" ]; then
$EDITOR "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/${menu0_main9[$counter]}"
menu9_
else
menu9_
fi
menu9_
#To change-----
fi
}

function menu9_ () {
local selector=9
menu9_title_ 
IFS=$'\n'       # make newlines the only separator
set -f 
declare -a menu0_main9=("<--" $CURDIR9) #<-----------------------------
counter=0
function draw_menu0_ () {
local DMENU=0
    for i in "${menu0_main9[@]}"; do #<-----------------------------
        if [[ ${menu0_main9[$counter]} == $i ]]; then #<-----------------------------
            tput setaf 2; 
			echo -e "==> ${green}$i"; tput sgr0
        else
          echo -e "    /$i";  
        fi
		done
}

function clear_menu0_()  {
    for i in "${menu0_main9[@]}"; do #<-----------------------------
	tput cuu1 setaf 0; 
	done
	tput ed setaf 0
}
function select_from_list_ () {
local selector=9
draw_menu0_
while read -sn 1  key; 
do # 1 char (not delimiter), silent
    # Check for enter/space
    if [[ "$key" == "" ]]; 
	then

menu9_file_check_
	back_to_root_
	#!!!Next must be  chenged to | menu9_dir8_
    menu9_dir10_  #<-----------------------------------------------------menu9_dir7_  go to menu menu0_
	fi
	
    read -sN2 -t 0.0009 k1; read -sN1 -t 0.0009 k2; read -sN2 -t 0.0009 k3
    key+=${k1}${k2}${k3}
    case "$key" in
        # countersor up, left: previous item
       $'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
        # countersor down, right: next item
		3|$'\e[3~') delete_  ;;
        $'\e[B'|$'\e0B') ((counter < ${#menu0_main9[@]}-1)) && ((counter++)) ;; 
		#!!!Next must be  chenged to | 
		$'\e[D'|$'\e0D') if [[ "$counter" == 0 ]];
                                           then
                                           menu8_
                                           fi  
                                           menu8_    ;; #left back to previouse menu4_
	    $'\e[C'|$'\e0C')  if [[ "$counter" == 0 ]];
                                           then
										   menu9_file_check_
                                           menu9_
                                           fi
										   menu9_file_check_
										   menu9_dir10_    ;;#<-----------------------------------------------------menu3_dir4_  go to menu menu0_
        1|d) create_dir_  ;;
		L) disable-hiden_ && menu8_ ;;
		H) enable-hiden_ && menu8_ ;;
		7|p) find_pattern_ ;;
		2|f) create_file_  ;;
        6|i) find_file_folder_ ;;
		v) cat_ ;;
        a) vi_ && menu9_	;;
		b) vim_ && menu9_	;;
		c) nano_ && menu9_ ;;		
		5|r) rename_ ;;	
		P) permission_ ;;	
		j) find_large_files_ ;;	
		k|K) clone_ ;;	
		$'\e') main_menu0_ ;;
		e) edit_file_ ;;		
        # home: first item
        $'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        $'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main9[@]}-1));; 
         # q, carriage return: quit
        x|q|'') exit_ ;;
    esac
    # Redraw menu
    clear_menu0_
    draw_menu0_
	#case_
done
}
local selector=9
select_from_list_
}


#Next Dir 10
function menu10_dir11_ () {  #<-----------------------------------------------------menu7_dir7_  go to menu menu0_
	echo
	#!!!Next must be  chenged to CURDIR8=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR7$DIR8/${menu0_main7[$counter]}" -C -1`
	export CURDIR11=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/${menu0_main10[$counter]}" -C -1` #<-----------------------------CURDIR4=`ls "$DIR1/$DIR2/${menu0_main3[$counter]}" -C -1`
	#!!!Next must be changed to DIR8=`echo  "/${menu0_main7[$counter]}"`
	export DIR11=`echo "/${menu0_main10[$counter]}"` #<-----------------------------
    echo 
	
	menu11_ && break
}

function menu10_10_dir11_ () {  
local selector=10
echo 
	export CURDIR11=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/$itemchoice10" -C -1` #<-----------------------------
	export DIR11=`echo "/$itemchoice10"`
	menu11_
	echo
}

function menu10_title_ {
local selector=10
 nano_banner_
 vim_banner_
 vi_banner_
IFS=$'\n'
set -f 
 clear && echo && clear
	printf "${menu}${menu1}---------------------------------------${normal}10${menu}${menu1}----------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}]${normal}"       
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
    echo -e "$DIRLOCATION ${green} $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/ ${normal}"
	echo
	export CURLOCATION1=$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/
}

function menu10_file_check_ () {				
		if  [ -f "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/${menu0_main10[$counter]}" ] ;
then
echo "file"
clear
echo -e "${menu}Boss,\nThis is a file ${green}${menu0_main10[$counter]}${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n"
cat "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/${menu0_main10[$counter]}" | more
#To change----
local ENT=`echo -e "\n\n${menu}Press [${number}Enter${menu}] to continue or [${number}e${menu}] to edit ....${normal}\n"`
read -s -n1 -p "$ENT " filechoice
if [ "$filechoice" == "" ]; then
menu10_
elif [ "$filechoice" == "e" ]; then
$EDITOR "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/${menu0_main10[$counter]}"
menu10_
else
menu10_
fi
menu10_
#To change-----
fi
	}

function menu10_ () {
local selector=10
menu10_title_
declare -a menu0_main10=("<--" $CURDIR10)
counter=0
function draw_menu0_ () {
local DMENU=0
    for i in "${menu0_main10[@]}"; do
        if [[ ${menu0_main10[$counter]} == $i ]]; then
            tput setaf 2; 
			echo -e "==> ${green}$i"; tput sgr0
        else
          echo -e "    /$i";  
        fi
		done
}

function clear_menu0_()  {
    for i in "${menu0_main10[@]}"; do
	tput cuu1 setaf 0; 
	done
	tput ed setaf 0
}
function select_from_list_ () {
local selector=10
draw_menu0_
while read -sn 1  key; 
do
    if [[ "$key" == "" ]]; 
	then
	

	menu10_file_check_
	back_to_root_
    menu10_dir11_
	fi
    read -sN2 -t 0.0009 k1; read -sN1 -t 0.0009 k2; read -sN2 -t 0.0009 k3
    key+=${k1}${k2}${k3}
    case "$key" in
        # countersor up, left: previous item
       $'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
        # countersor down, right: next item
        $'\e[B'|$'\e0B') ((counter < ${#menu0_main10[@]}-1)) && ((counter++)) ;; 
		#!!!Next must be  chenged to | 
		3|$'\e[3~') delete_  ;;
		$'\e[D'|$'\e0D') if [[ "$counter" == 0 ]];
                                           then
                                           menu9_
                                           fi  
                                           menu9_       ;; #left back to previouse menu4_
	    $'\e[C'|$'\e0C')  if [[ "$counter" == 0 ]];
                                           then
										   menu10_file_check_
                                           menu10_
                                           fi 
										   menu10_file_check_
										   menu10_dir11_    ;;#<-----------------------------------------------------menu3_dir4_  go to menu menu0_
        1|d) create_dir_  ;;
		2|f) create_file_  ;;	
		L) disable-hiden_ && menu9_ ;;
		H) enable-hiden_ && menu9_ ;;
          6|i) find_file_folder_ ;;
		  7|p) find_pattern_ ;;
		v) cat_ ;;
        a) vi_ && menu10_	;;
		b) vim_ && menu10_	;;
		c) nano_ && menu10_ ;;		
		5|r) rename_ ;;	
		P) permission_ ;;	
		j) find_large_files_ ;;	
		k|K) clone_ ;;	
		$'\e') main_menu0_ ;;
		e) edit_file_ ;;		
        # home: first item
        $'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        $'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main10[@]}-1));; 
         # q, carriage return: quit
         x|q|'') exit_ ;;
    esac
    # Redraw menu
    clear_menu0_
    draw_menu0_
	#case_
done
}
local selector=10
select_from_list_
}


#Next Dir 11
function menu11_dir12_ () {  #<-----------------------------------------------------menu7_dir7_  go to menu menu0_
	#Replase:
#1. menu7_dir7_ to next one menu7_dir8_
#2. menu0_main7_ to menu0_main8
#3. CURDIR6 to CURDIR7
#4. DIR6 to DIR7
#5. menu5_ to menu7_
#6. "Current location 6 is: $DIR1$DIR2$DIR3$DIR4$DIR5/${menu0_main5[$counter]}"    to   echo -e "Current location 6 is: $DIR1$DIR2$DIR3$DIR4$DIR5/${menu0_main5[$counter]}"

	echo
	
	export CURDIR12=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11/${menu0_main11[$counter]}" -C -1` #<-----------------------------CURDIR4=`ls "$DIR1/$DIR2/${menu0_main3[$counter]}" -C -1`
	#!!!Next must be changed to DIR8=`echo  "/${menu0_main7[$counter]}"`
	export DIR12=`echo "/${menu0_main11[$counter]}"` #<-----------------------------
    echo 
	
	menu12_
}

function menu11_11_dir12_ () {  
local selector=11
echo 
	export CURDIR12=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/$itemchoice11" -C -1` #<-----------------------------
	export DIR12=`echo "/$itemchoice11"`
	menu12_
	echo
}

function menu11_title_ {
local selector=11
 nano_banner_
 vim_banner_
 vi_banner_
IFS=$'\n'
set -f 
 clear && echo && clear
	printf "${menu}${menu1}---------------------------------------${normal}11${menu}${menu1}----------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}]${normal}"       
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
    echo -e "$DIRLOCATION ${green} $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11/ ${normal}"
	echo
	export CURLOCATION1=$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11/
}

function menu11_file_check_ () {
			if  [ -f "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11/${menu0_main11[$counter]}" ] ;
then
echo "file"
clear
echo -e "${menu}Boss,\nThis is a file ${green}${menu0_main11[$counter]}${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n"
cat "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11/${menu0_main11[$counter]}" | more
#To change----
local ENT=`echo -e "\n\n${menu}Press [${number}Enter${menu}] to continue or [${number}e${menu}] to edit ....${normal}\n"`
read -s -n1 -p "$ENT " filechoice
if [ "$filechoice" == "" ]; then
menu11_
elif [ "$filechoice" == "e" ]; then
$EDITOR "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11/${menu0_main11[$counter]}"
menu11_
else
menu11_
fi
menu11_
#To change-----
fi
}

function menu11_ () {
local selector=11
 menu11_title_
declare -a menu0_main11=("<--" $CURDIR11) #<-----------------------------
counter=0
function draw_menu0_ () {
local DMENU=0
    for i in "${menu0_main11[@]}"; do #<-----------------------------
        if [[ ${menu0_main11[$counter]} == $i ]]; then #<-----------------------------
            tput setaf 2; 
			echo -e "==> ${green}$i"; tput sgr0
        else
          echo -e "    /$i";  
        fi
		done
}

function clear_menu0_()  {
    for i in "${menu0_main11[@]}"; do #<-----------------------------
	tput cuu1 setaf 0; 
	done
	tput ed setaf 0
}
function select_from_list_ () {
local selector=11
draw_menu0_
while read -sn 1  key; 
do # 1 char (not delimiter), silent
    # Check for enter/space
    if [[ "$key" == "" ]]; 
	then

menu11_file_check_
	back_to_root_
    menu11_dir12_  #<-----------------------------------------------------menu9_dir7_  go to menu menu0_
	fi
	
    read -sN2 -t 0.0009 k1; read -sN1 -t 0.0009 k2; read -sN2 -t 0.0009 k3
    key+=${k1}${k2}${k3}
    case "$key" in
        # countersor up, left: previous item
       $'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
        # countersor down, right: next item
        $'\e[B'|$'\e0B') ((counter < ${#menu0_main11[@]}-1)) && ((counter++)) ;; 
		#!!!Next must be  chenged to | 
		3|$'\e[3~') delete_  ;;
		$'\e[D'|$'\e0D') if [[ "$counter" == 0 ]];
                                           then
										   menu11_file_check_
                                           menu11_
                                           fi  
										   menu11_file_check_
                                           menu10_     ;; #left back to previouse menu4_
	    $'\e[C'|$'\e0C') menu11_dir12_ && break   ;;#<-----------------------------------------------------menu3_dir4_  go to menu menu0_
		1|d) create_dir_  ;;
		2|f) create_file_  ;;
		L) disable-hiden_ && menu10_ ;;
		H) enable-hiden_ && menu10_ ;;
		7|p) find_pattern_ ;;
		6|i) find_file_folder_ ;;
		v) cat_ ;;
        a) vi_ && menu11_	;;
		b) vim_ && menu11_	;;
		c) nano_ && menu11_ ;;		
		5|r) rename_ ;;	
		P) permission_ ;;	
		j) find_large_files_ ;;	
		k|K) clone_ ;;	
		$'\e') main_menu0_ ;;
		e) edit_file_ ;;
        # home: first item
        $'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        $'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main11[@]}-1));; 
         # q, carriage return: quit
         x|q|'') exit_ ;;
    esac
    # Redraw menu
    clear_menu0_
    draw_menu0_
	#case_
done
}
local selector=11
select_from_list_
}


#Next Dir 12
function menu12_dir13_ () {  #<-----------------------------------------------------menu7_dir7_  go to menu menu0_
	#Replase:
#1. menu7_dir7_ to next one menu7_dir8_
#2. menu0_main7_ to menu0_main8
#3. CURDIR6 to CURDIR7
#4. DIR6 to DIR7
#5. menu5_ to menu7_
#6. "Current location 6 is: $DIR1$DIR2$DIR3$DIR4$DIR5/${menu0_main5[$counter]}"    to   echo -e "Current location 6 is: $DIR1$DIR2$DIR3$DIR4$DIR5/${menu0_main5[$counter]}"

	echo
	
	export CURDIR13=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11$DIR12/${menu0_main12[$counter]}" -C -1` #<-----------------------------CURDIR4=`ls "$DIR1/$DIR2/${menu0_main3[$counter]}" -C -1`
	export DIR13=`echo "/${menu0_main12[$counter]}"` #<-----------------------------
    echo 
	
	menu0_ && break
}

function menu12_12_dir13_ () {  
local selector=12
echo 
	export CURDIR13=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11/$itemchoice12" -C -1` #<-----------------------------
	export DIR13=`echo "/$itemchoice12"`
	menu0_ && break
	echo
}

function menu12_title_ {
local selector=11
 nano_banner_
 vim_banner_
 vi_banner_
IFS=$'\n'
set -f 
clear && echo && clear
	printf "${menu}${menu1}---------------------------------------${normal}12${menu}${menu1}----------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}]${normal}"       
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
    echo -e "$DIRLOCATION ${green} $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11$DIR12/ ${normal}"
	echo
	export CURLOCATION1=$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11$DIR12/
}

function menu12_file_check_ () {
				if  [ -f "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11DIR12/${menu0_main12[$counter]}" ] ;
then
echo "file"
clear
echo -e "${menu}Boss,\nThis is a file ${green}${menu0_main12[$counter]}${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n"
cat "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11DIR12/${menu0_main12[$counter]}" | more
#To change----
local ENT=`echo -e "\n\n${menu}Press [${number}Enter${menu}] to continue or [${number}e${menu}] to edit ....${normal}\n"`
read -s -n1 -p "$ENT " filechoice
if [ "$filechoice" == "" ]; then
menu12_
elif [ "$filechoice" == "e" ]; then
$EDITOR "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11DIR12/${menu0_main12[$counter]}"
menu12_
else
menu12_
fi
menu12_
#To change-----
fi
}

function menu12_ () {
local selector=12
IFS=$'\n'   
set -f
menu12_title_
declare -a menu0_main12=("<--" $CURDIR12) #<-----------------------------
counter=0
function draw_menu0_ () {
local DMENU=0
    for i in "${menu0_main12[@]}"; do 
        if [[ ${menu0_main12[$counter]} == $i ]]; then
            tput setaf 2; 
			echo -e "==> ${green}$i"; tput sgr0
        else
          echo -e "    /$i";  
        fi
		done
}

function clear_menu0_()  {
    for i in "${menu0_main12[@]}"; do 
	tput cuu1 setaf 0; 
	done
	tput ed setaf 0
}
function select_from_list_ () {
local selector=12
draw_menu0_
while read -sn 1  key; 
do # 1 char (not delimiter), silent
    # Check for enter/space
    if [[ "$key" == "" ]]; 
	then

menu12_file_check_
	back_to_root_
    menu12_dir13_  #<-----------------------------------------------------menu9_dir7_  go to menu menu0_
	fi
	
    read -sN2 -t 0.0009 k1; read -sN1 -t 0.0009 k2; read -sN2 -t 0.0009 k3
    key+=${k1}${k2}${k3}
    case "$key" in
        # countersor up, left: previous item
       $'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
        # countersor down, right: next item
        $'\e[B'|$'\e0B') ((counter < ${#menu0_main12[@]}-1)) && ((counter++)) ;; 
		#!!!Next must be  chenged to | 
		$'\e[D'|$'\e0D') if [[ "$counter" == 0 ]];
                                           then
                                           menu11_
                                           fi  
                                           menu11_      ;; #left back to previouse menu4_
	    $'\e[C'|$'\e0C')  if [[ "$counter" == 0 ]];
                                           then
										   menu12_file_check_
                                           menu12_
                                           fi
										   menu12_file_check_
										   menu12_dir13_   ;;#<-----------------------------------------------------menu3_dir4_  go to menu menu0_
        
		1|d) create_dir_  ;;
		2|f) create_file_  ;;
		L) disable-hiden_ && menu11_ ;;
		H) enable-hiden_ && menu11_ ;;
		7|p) find_pattern_ ;;
		6|i) find_file_folder_ ;;
		v) cat_ ;;
        a) vi_ && menu12_	;;
		b) vim_ && menu12_	;;
		c) nano_ && menu12_ ;;		
		5|r) rename_ ;;	
		P) permission_ ;;	
		j) find_large_files_ ;;	
		k|K) clone_ ;;	
		$'\e') main_menu0_ ;;
		e) edit_file_ ;;
		# home: first item
        $'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        $'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main12[@]}-1));; 
         # q, carriage return: quit
         x|q|'') exit_ ;;
    esac
    # Redraw menu
    clear_menu0_
    draw_menu0_
	#case_
done
}
local selector=12
select_from_list_
}



#Help
function helpFunction (){
clear
echo
echo -e "[$whoami@$hostname $PWD# "
echo

   echo ""
   echo -e "${menu}Usage:    ${menu} $0 ${fgred}-H ${normal}${menu} or  ${fgred}-L${normal}"
   echo
   echo -e "${menu}Parameters:${normal}"
   echo
   echo -e "\t${fgred}-H   ${normal}Enable hiden file and folder view${normal}"
   echo -e "\t${fgred}-L   ${normal}Disable hiden file and folder view${normal}"
   echo
   echo
   echo  -e "${menu}Keys:${normal} "
   echo
   echo -e "\tDelete file or folder. Just press [ ${fgred}delete ${normal}] ${normal}on keybord\n"
   echo -e "\tCreate new file or folder. Just press [ ${fgred}N or n ${normal}] ${normal}on keybord\n "
   #echo -e "\t${fgred}-L Disable hiden file and folder view"
   #echo -e "\t-c Description of what is parameterC"
  echo
echo
   exit 1 # Exit script after printing help
}

while getopts "heLH" OPTION; do
        case $OPTION in

                e)ECHO="true"  ;;

                h) helpFunction ;;
				L) disable-hiden_ ;;
				H) enable-hiden_  ;;
                        

        esac
done




#Main Menu
function main_menu0_ () {
check_editor_pref_
clear
 IFS=$'\n'       
  set -f 
printf "\n${menu}         ${green}Wellcom to Find Me ${menu} ${normal}" 
printf "\n${menu}************************************${normal}\n"
local OPT1=`echo -e "${number}1. ${menu}Explorer${normal}"` 
local OPT2=`echo -e "${number}2. ${menu}User Managment${normal}"` 
local OPT3=`echo -e "${number}3. ${menu}System Stat ${normal}"` 
local OPT4=`echo -e "${number}4. ${menu}Time Managment ${normal}"` 
#local OPT5=`echo -e "${number}5. ${menu}Generate ssh key${normal}"` 
local EXIT=`echo -e "${number}5. ${menu}Exit ${normal}"` 

 
 declare -a menu0_main=($OPT1 $OPT2 $OPT3 $OPT4 $EXIT) 
 counter=0 

 function draw_menu0_ () { 
 for i in "${menu0_main[@]}"; 
 do if [[ ${menu0_main[$counter]} == $i ]]; 
 then tput setaf 2; 
 echo -e "==> ${green}$i${normal}"; tput setaf 4
        else
          echo -e "    $i";  
        fi
		
    done
	}

function clear_menu0_()  {
    for i in "${menu0_main[@]}"; do 
	tput cuu1 setaf 0;
	done
	tput ed setaf 0
}

# Draw initial Menu
function select_from_list_ () {
draw_menu0_

while read -sn 1 key; 

do # 1 char (not delimiter), silent

    # Check for enter/space
    if [[ "$key" == "" ]]; 
	then
	
#run comand on selected item
if [ "$counter" == 0 ]; 
then
menu0_
elif [ "$counter" == 1 ]; #Find pattern
then
user_managment_
elif [ "$counter" == 2 ]; 
then 
system_status_
clear
elif [ "$counter" == 3 ]; 
then 
clear

 time_banner_
start_time_search_ 
clear
elif [ "$counter" == 4 ]; 
then 
clear
exit_ 
clear
fi
	
	fi
    # catch multi-char special key sequences 
	 
    read -sN2 -t 0.0009 k1; read -sN1 -t 0.0009 k2; read -sN2 -t 0.0009 k3
    key+=${k1}${k2}${k3}

  
    case "$key" in
	
        # countersor up, left: previous item
        ""|i|j|$'\e[A'|$'\e0A'|$'\e[D'|$'\e0D') ((counter > 0)) && ((counter--))  ;;
		
        # countersor down, right: next item
        ""|k|l|$'\e[B'|$'\e0B'|$'\e[C'|$'\e0C') ((counter < ${#menu0_main[@]}-1)) && ((counter++)) ;;
		
        # home: first item
       ""|$'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        ""|$'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main[@]}-1));;
		
         # q, carriage return: quit
        #x|q|''|$'\e') color_ && exit_ ;;
		x|q) exit_ ;;
    esac
    # Redraw menu
	
    clear_menu0_
    draw_menu0_
done

}
select_from_list_

}

#Disable CTRL + C
#trap '' SIGINT SIGQUIT SIGTSTP
function start_ () {
clear 
main_menu0_
}

chk_time_

#menu0_








