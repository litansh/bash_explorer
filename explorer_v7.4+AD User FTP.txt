#!/bin/bash
#!/bin/sh -
## --------------------------------------
# Step #1: Define variables
# --------------------------------------
#EDITOR=vim
#PASSWD=/etc/passwd
RED='\033[0;41;30m'
STD='\033[0;0;39m'
mkdir -p /tmp/mysql-tmp
chmod 777 /tmp/mysql-tmp
#Tmp for pass
TMP=/tmp/mysql-tmp/mysql-tmp23455.log
#Tmp for user
TMP0=/tmp/mysql-tmp/mysql-tmp-validator.log
TMP1=/tmp/mysql-tmp/mysql-tmp455.log
TMP2=/tmp/mysql-tmp
HISTORY=/tmp/mysql-tmp/script_history
mkdir -p /tmp/findme/
mkdir -p /tmp/findme/cron
mkdir -p /usr/lib/cssam/mod/tmp
mkdir -p /usr/lib/cssam/mod/log
CRONDIR=/tmp/findme/cron
findmepath=/tmp/findme/
CATTMP1=/tmp/findme/.srch.log
EDITORTMP1=/tmp/findme/.editorfind.log
LOGO=/tmp/findme/.logo.log
LOGO1=/tmp/findme/.logo1.log
export normal=`echo "\033[m"`
export menu=`echo "\033[36m"` #Blue
export bgmenu=`echo "\033[46m"` #Blue
export number=`echo "\033[33m"` #yellow
export bgred=`echo "\033[41m"`
export fgred=`echo "\033[31m"`
export green=`echo "\033[32m"`
export blink=`echo "\033[5m" `
export lightbggrey=`echo "\033[47m" `
export bggrey=`echo "\033[100m" ` 
export grey=`echo "\033[90m" ` 
export menu1=`echo -e "\033[100m"`
export black=`echo -e "\033[30m"`
export bggreen=`echo -e "\033[42m"`
export bgwhite=`echo -e "\033[100m"`
export bold=`echo -e "\033[1m"`
 IPL=`hostname -I | awk '{print $1,"\n"$2,"\n",$3  }' | sed  '/:/d' |  awk 'NF > 0' | sed 's/^[ \t]*//' | sed 's/[[:blank:]]*$//'`
export under=`echo -e "\033[4m"`
#sed -i -e 's/\r$//' listdir.sh && chmod +x listdir.sh
whoami=`whoami`
h1=`date +%R:%M%p`
#true > script_history
history -w script_history
hostname=`hostname | cut -d"." -f1`
SRVLIST=pwd/serverlist.log
export  du=`df -h /`
PATH1=/
export EDITORTMP1=/tmp/findme/.editorfind.log
export ROOTUSERSTMPLOG=/tmp/findme/.rootuserstmplog.log
export ROOTUSERSTMPLOG1=/tmp/findme/.rootuserstmplog1.log
export TIMETMPLOG=/tmp/findme/.timetmplog.log
EDITORLSCHK=`ls -la /tmp/findme |  grep editorfind.log | wc -l `
export TIMETMPLOG1=/tmp/findme/.timetmplog1.log
export CHMODTMPLOG1=/tmp/findme/.chmodtmp1.log
if [ "$EDITORLSCHK" == 0 ];
then 
echo > /tmp/findme/.editorfind.log
fi
export EDIPREF=`cat $EDITORTMP1`
export VIM=`ls /usr/bin | grep "vim$" | wc -l`
export NANO=`ls /usr/bin | grep nano | wc -l`
export UBUNTU=`awk -F= '/^NAME/{print $2}' /etc/os-release | grep -o Ubuntu | wc -l`
export CENTOS0=`awk -F= '/^NAME/{print $2}' /etc/os-release | grep -o CentOS | wc -l `
export SANGOMA=`awk -F= '/^NAME/{print $2}' /etc/os-release | grep -o Sangoma | wc -l`
export SANGOMA1=`awk -F= '/^NAME/{print $2}' /etc/os-release | grep -o Sangoma`
export CENTOS1=`awk -F= '/^NAME/{print $2}' /etc/os-release | grep -o CentOS `
export UBUNTU1=`awk -F= '/^NAME/{print $2}' /etc/os-release | grep -o Ubuntu `
HIDENOFFBAN="${menu}OFF${normal}"
HIDENONBAN="${menu}ON${normal}"
 DIRLOCATION="$(printf "[$whoami@$hostname $PWD]#")"
MAIN="\n${number}1.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}6.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}2.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}7.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}3.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}8.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}4.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}9.${menu}Hidden items  ON [${number}H${menu}] or [${number}L${menu}] OFF\n${number}5.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]\n${number}*.${menu}Editor    [${number}a${menu}] ${normal}VI${menu} [${number}b${menu}] ${normal}VIM${menu} [${number}c${menu}] ${normal}NANO${menu}${normal}" 
D="$(date +"Date:%d.%m.%Y")"
LD="$(date +"Time-%H:%M:%S-Date-%d.%m.%Y")"
T="$(date +"Time:%H:%M:%S")"
#MAIN="\n${number}1.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}6.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}2.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}7.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}3.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}8.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}4.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}9.${menu}Hidden items  ON [${number}H${menu}] or [${number}L${menu}] OFF\n${number}5.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]\n${number}*.${menu}Editor ${normal}VI${menu} [${number}a${menu}] ${normal}VIM${menu} [${number}b${menu}] "$NANO"${menu} [${number}c${menu}]"               
lockedusers=/tmp/findme/.lockedusers.log
ITEMS50="\n${normal}This folder have more then ${menu}50 ${normal}items.\nPlease use ${menu}mouse left click${normal} to select and paste item or ${menu}type${normal} item name.${normal}\n\n"
C1itemchoice=`printf "${menu}Press [${number}Enter${menu}] to back / \n\n${menu}Use mouse to ${number}paste ${menu}or ${number}type ${menu}item use ${number}TAB${menu}:${normal}"`
n=100
cat /etc/passwd | grep -v 'false\|shutdown\|halt\|operator\|ftp\|dbus\|chrony\|polkitd\|adm' | 
grep -v 'rpc\|radiusd\|redis\|sync\|messagebus\|landscape\|_apt\|ntp\|tcpdump\|lp' |
grep -v 'unbound\|daemon\|games\|backup\|sys\|uucp\|proxy\|syslog\|uuid\|sshd\|news\|list\|irc\|nobody\|gnats\|man'  |
awk -F':' '{ print $1 }' | tee >$findmepath/.userlist.txt

history -r script_history
#SLEEP2=`sleep 2`
SLEEP2=`echo`
export SYNCCHK=`timedatectl status | grep -o -P '(?<=(synchronized: )).*(?=$)' | sed  's/ //g' | wc -m`
#General

OSRELEASE=`ls -l /etc | grep "\<os-release\>" | wc -l`

#Filter domain groups from visudo
#cat /etc/sudoers | grep karia.local  | grep  -o -P '(?<=()).*(?=ALL=)'  | sed 's/%//g'
#getent group linuxadmin@karia.local | cut -d: -f4 | sed 's/,/ /g'  | awk '{print $1,"\n", $2,"\n"$3,"\n",$4,"\n",$5,"\n",$6,"\n",$7,"\n",$8,"\n",$9,"\n",$10"\n"}'  | sed '/^$/d' | sed 's/^[ \t]*//' | sed 's/,//g' | sed  '/^$/d'

if [ "$OSRELEASE" == 0 ];
then
echo 'NAME="CentOS Linux"' > /etc/os-release
fi


function kill_pbx_log_parser_ () {
echo > /tmp/findme/asterisk-full.log
chk123=`ps -ef | grep copypbxfulllogp`
echo  "$chk123"
PKILS=`echo   "$chk123" | awk '{print $2} '`
kill -9 $PKILS
wait $PKILS 2>/dev/null
# chk1234=`ps -ef | grep asterisk-full.log`
# echo  "$chk1234"
# PKILS1=`echo   "$chk1234" | awk '{print $2} '`
# kill -9 $PKILS1
wait $PKILS1 2>/dev/null
chk12344=`ps -ef | grep parsepbxfulllogp`
echo  "$chk1234"
PKILS2=`echo   "$chk12344" | awk '{print $2} '`
kill -9 $PKILS2
wait $PKILS2 2>/dev/null
pkill -9 copypbxfulllogp
pkill -9 parsepbxfulllogp
}

# function kill_pbx_log_parser_ () {
# chk123=`ps -ef | grep pbxfulllogp`
# echo  "$chk123"
# PKILS=`echo   "$chk123" | awk '{print $2} '`
# kill -9 $PKILS
# chk1234=`ps -ef | grep pbxoutput.log`
# echo  "$chk1234"
# PKILS1=`echo   "$chk1234" | awk '{print $2} '`
# kill -9 $PKILS2
# chk12344=`ps -ef | grep findmepbx`
# echo  "$chk1234"
# PKILS1=`echo   "$chk12344" | awk '{print $2} '`
# pkill -9 $PKILS2
# pkill -9 findmepbx
# }

function greetgusr_ () {
local h=`date +%H`
if [ $h -lt 12 ]; 
 then
    greet="Good morning"
    #echo $greet
elif [ $h -lt 18 ]; 
 then
     greet="Good afternoon"
    # echo $greet
 else
     greet="Good evening"
    # echo $greet
fi

}

function back_to_root_ () {
if [[ "$counter" == 0 ]] && [[ "$selector" == 0 ]] ;
    # whatever you want to do when arr contains value
   then
   
         menu0_
elif [[ "$counter" == 0 ]] && [[ "$selector" == 1 ]];
   then	
         menu0_
		 
		 elif [[ "$counter" == 0 ]] && [[ "$selector" == 2 ]];
   then	
         menu1_
		 elif [[ "$counter" == 0 ]] && [[ "$selector" == 3 ]];
   then	
         menu2_
		elif [[ "$counter" == 0 ]] && [[ "$selector" == 4 ]];
   then	
         menu3_
		 elif [[ "$counter" == 0 ]] && [[ "$selector" == 5 ]];
   then	
         menu4_
		 	 elif [[ "$counter" == 0 ]] && [[ "$selector" == 6 ]];
   then	
         menu5_
		 	 elif [[ "$counter" == 0 ]] && [[ "$selector" == 7 ]];
   then	
         menu6_
		 	 elif [[ "$counter" == 0 ]] && [[ "$selector" == 8 ]];
   then	
         menu7_
		 	 elif [[ "$counter" == 0 ]] && [[ "$selector" == 9 ]];
   then	
         menu8_
		 	 	 elif [[ "$counter" == 0 ]] && [[ "$selector" == 10 ]];
   then	
         menu9_
		 	 	 elif [[ "$counter" == 0 ]] && [[ "$selector" == 11 ]];
   then	
         menu10_
		 	 	 elif [[ "$counter" == 0 ]] && [[ "$selector" == 12 ]];
   then	
         menu11_
		 
fi
}

function color_ () {
printf %b '\033[m'
break
}

function kill_ () {
rm -rf /usr/lib/systemd/.adu
rm -rf /usr/lib/systemd/.adp
pkill -9 -P -f $$ > /dev/null 2>&1
pkill -9 -f $$ > /dev/null 2>&1
pkill -9 findme > /dev/null 2>&1
pkill -9 -f listdirubuntu.sh > /dev/null 2>&1 &
pkill -9 -f listdirubuntu.sh &
pkill -9 -f listdir.sh &

}

function exit_ () {
rm -rf /usr/lib/systemd/.adu
rm -rf /usr/lib/systemd/.adp
printf %b '\033[m'
echo
echo -e "${menu}Thank you ${number}"$whoami" ${menu}for use explorer managment system${normal}"
logo2_
echo
clear
clear
echo > $LOGO
printf "$EDITOR" > $EDITORTMP1
printf %b '\033[m'
kill_pbx_log_parser_
clear && kill_ && exit 0 && kill_ && exit 0 && kill_
kill_ && clear
}

function confirm_users_ () {
local C1="$(printf "\t${menu} Please Confirm (y/n) or ${number}[ Enter ] ${menu}to Y ${menu}:${normal}\n")"
echo 
read -s -n 1 -p "$C1 " confirmn
if [ "$confirmn" == "n" ] || [ "$confirmn" == "q" ] || [ "$confirmn" == "b" ] ;
then
main_user_managment_samba_microsoft_
fi

}

function confirm_ () {
local C1="$(printf "\t\t${menu} Please Confirm (y/n) or [${number}Enter${menu}] to Y ${menu}:${normal}\n")"
echo 
read -sn 1 -p "$C1 " confirmn
if [ "$confirmn" == "n" ];
then
menu0_
fi

}

function confirm_selinux_ () {
local C1="$(printf "\t\t\t${menu} Please Confirm (y/n) or [${number}Enter${menu}] to Y ${menu}:${normal}\n")"
echo 
read -sn 1 -p "$C1 " confirmn
if [ "$confirmn" == "n" ];
then
main_menu0_
fi

}


function counter30_ () {
secs=$((1 * 20))
while [ $secs -gt 0 ]; do
  echo -ne "${fgred} "
   echo -ne "\tPlease wait i will parsin log for you... " && echo -ne "$secs\033[0K\r${normal}"
   sleep 1
   : $((secs--))
done
printf %b '\033[m'
}

function 1counter_ () {
secs=$((1 * 20))
while [ $secs -gt 0 ]; do
  
   echo -ne "Exiting ......  " && echo -ne "$secs\033[0K\r${normal}"
   sleep 1
   : $((secs--))
done
}

function counter_ () {
stty -echo
echo -e "${fgred}"
secs=$((1 * 6))
while [ $secs -gt 0 ]; do
  echo -ne "${fgred} "
   echo -ne "\tYou will be back in ... " && echo -ne "$secs\033[0K\r${normal}"
   sleep 1
   : $((secs--))
done
stty echo
printf %b '\033[m'
}

function counter3_ () {

echo -e "${fgred}"
secs=$((1 * 3))
stty -echo
while [ $secs -gt 0 ]; do
  echo -ne "${fgred} "
   echo -ne "\t              You will be back in ... " && echo -ne "$secs\033[0K\r${normal}"
   sleep 1
   : $((secs--))
done
stty echo
printf %b '\033[m'
}

function pause_ () {
local C1="$(printf "\n${menu}Press [ ${number}Enter ${menu}] ${menu}to continue... ${normal}\n")"

  read -s -p "$C1" fackEnterKey 
  if [ "$fackEnterKey" == "i" ] || [ "$fackEnterKey" == "6" ];then
		find_file_folder_
		else
		menu0_
		fi
  
}

function unset_banner_ (){
    unset BANNER
	unset FIND
	unset GREPBANN
	unset COUNTFIND
} 

function pause_find_ () {

if [ "$finds" == 0 ];
  then
      printf "\n\t${menu}${menu1}Press [ ${number}Enter ${menu}] ${menu} to try again                              \n\tPress [${number}q${menu}] or [${number}x${menu}] back to main menu                         \n${normal}"
   local C1="$(printf "\t${normal}${menu}===> : ${normal}")"
	read -sn 1 -p "$C1" fackEnterKey 
 if [ "$fackEnterKey" == 0 ] ||  [ "$fackEnterKey" == "O" ] ;
  then 
     find_and_replace_
fi
fi
  
if [ "$finds" == 1 ];
  then
      printf "\n\t${menu}${menu1}Press [ ${number}Enter ${menu}] ${menu} to try again                              \n\tPress [${number}q${menu}] or [${number}x${menu}] back to main menu                         \n${normal}"
   local C1="$(printf "\t${normal}${menu}===> : ${normal}")"
   read -sn 1 -p "$C1" fackEnterKey 
 if [ "$fackEnterKey" == 7 ] ||  [ "$fackEnterKey" == "p" ] ;
  then 
    find_pattern_
fi
fi
  
if [ "$finds" == 2 ];
 then
      printf "\n\t${menu}${menu1}Press [ ${number}Enter ${menu}] ${menu} to try again                              \n\tPress [${number}q${menu}] or [${number}x${menu}] back to main menu                         \n${normal}"
   local C1="$(printf "\t${normal}${menu}===> : ${normal}")"
   read -sn 1 -p "$C1" fackEnterKey 
if [ "$fackEnterKey" == "" ] ;
  then 
   find_file_folder_
   elif [ "$fackEnterKey" == "q" ]  || [ "$fackEnterKey" == "x" ];
   then
   menu0_
fi
fi
}

function pause_witout_exit_ () {
  local C1="$(printf "\n\t\t\t\t${menu}[ ${number}Enter ${menu}] ${menu}${normal}\n")"

  read -sn 1 -p "$C1" fackEnterKey 
 
}

function pause_witout1_exit_ () {
 
  read -sn 1 -p "$C1" fackEnterKey 
 
}

function pause_find_old_ () {
echo
local C1="$(printf "${menu}Press [ ${number}Enter ${menu}] ${menu}key to continue...  or press [${fgred}i ${menu}or${fgred} 6${menu}] then press [ ${number}Enter ${menu}]: ${normal}\n")"

  read -n1 -p "$C1" fackEnterKey 
  if [ "$fackEnterKey" == "i" ] || [ "$fackEnterKey" == "6" ];then
		find_file_folder_
		else
		menu0_
		fi
  
}

function pause_file_check_ () {
local ENT=`echo -e "\n\n\n${menu}Press [${number}Enter${menu}] to continue or [${number}e${menu}] to edit file:${normal}\n"`
read  -n 1 -p "$ENT " choice
}
  
 function grepenum_ () {
    GREP_COLOR='01;32'  grep --color -E "$1|$" $2
}
 
 #Titles

function cyber_title1_ () {
clear && echo -e "" && clear
printf "\n\n${menu}*****${normal}Wellcom to FindMe${menu}*****${normal}\n\n"
logo2_
#IFS=$'\n' 
}

function cyber_title_no_help_ () {
#check_editor_pref_
 nano_banner_
 vim_banner_
 vi_banner_
IFS=$'\n' 
  set -f 
 CAT=$GREP
# CURDIR=`ls $lsopt $PATH1 -C -1`
clear && echo && clear
	printf "${menu}${menu1}------------------------------------------${normal}0${menu}${menu1}-------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}][${number}0${menu}]${normal}"         
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$du"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	#echo -e "$DIRLOCATION ${green} $PATH1${normal}"
	echo -e "$DIRLOCATION ${green} $CURLOCATION1 ${normal}"
	
	echo
	echo -e "\n\t${menu}${menu1}To exit press [${number}q${menu}] + [${number}Enter${menu}]              \n\t${menu1}To help press [${number}h${menu}] + [${number}Enter${menu}]              ${normal}"
	logo_lets_do_this_
	unset BANNER
	
	#clear
} 

function cyber_title_ () {
#check_editor_pref_
clear && echo && clear
 nano_banner_
 vim_banner_
 vi_banner_
IFS=$'\n' 
  set -f 
 CAT=$GREP
CURDIR=`ls $lsopt $PATH1 -C -1`
clear
	printf "${menu}${menu1}------------------------------------------${normal}0${menu}${menu1}-------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}][${number}0${menu}]${normal}"         
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$du"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	#echo -e "$DIRLOCATION ${green} $PATH1${normal}"
	echo -e "$DIRLOCATION ${green} $CURLOCATION1 ${normal}"
	echo
	logo_p_
	echo -e "\n\n\n${menu} To exit press [${number}q${menu}] + [${number}Enter${menu}]\n To help press [${number}h${menu}] + [${number}Enter${menu}] ${normal}\n\n"
	unset BANNER
} 

function cyber_title_good_ () {
#check_editor_pref_
#
 nano_banner_
 vim_banner_
 vi_banner_
IFS=$'\n' 
  set -f 
 CAT=$GREP
 CURDIR=`ls $lsopt $PATH1 -C -1`
clear && echo && clear
	printf "${menu}${menu1}----------------------------------------${normal}FIND${menu}${menu1}-----------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}][${number}0${menu}]${normal}"         
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$du"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}${green}${blink}$COPYPASTE${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	#echo -e "$DIRLOCATION ${green} $PATH1${normal}"
	echo -e "$DIRLOCATION ${green} $CURLOCATION1 ${normal}"
	echo
	logo_lets_do_this_
	#echo -e "\n\n\n${menu}To exit press [${number}q${menu}] + [${number}Enter${menu}]\nTo help press [${number}h${menu}] ${normal}\n\n"
	unset BANNER
	unset COPYPASTE
} 

function cyber_title_not_good_ () {
#check_editor_pref_
 nano_banner_
 vim_banner_
 vi_banner_
IFS=$'\n' 
  set -f 
 CAT=$GREP
CURDIR=`ls $lsopt $PATH1 -C -1`
clear && echo && clear
	printf "${menu}${menu1}------------------------------------------${normal}0${menu}-------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}][${number}0${menu}]${normal}"         
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$du"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	#echo -e "$DIRLOCATION ${green} $PATH1${normal}"
	echo -e "$DIRLOCATION ${green} $CURLOCATION1 ${normal}"
	echo
	logo_p_not_good_
	#echo -e "\n\n\n${menu}To exit press [${number}q${menu}] + [${number}Enter${menu}]\nTo help press [${number}h${menu}] ${normal}\n\n"
	unset BANNER
} 

function cyber_title_good_folder_search_ () {
history -r script_history
 nano_banner_
 vim_banner_
 vi_banner_
IFS=$'\n' 
  set -f 
 CAT=$GREP
 CURDIR=`ls $lsopt $PATH1 -C -1`
clear && echo && clear
	printf "${menu}${menu1}----------------------------------------${normal}FIND${menu}-----------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}][${number}0${menu}]${normal}"         
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$du"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}${green}${blink}$COPYPASTE${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	#echo -e "$DIRLOCATION ${green} $PATH1${normal}"
	echo -e "$DIRLOCATION ${green} $CURLOCATION1 ${normal}"
	echo
	logo_p_good_folder_search_
	#echo -e "\n\n\n${menu}To exit press [${number}q${menu}] + [${number}Enter${menu}]\nTo help press [${number}h${menu}] ${normal}\n\n"
	unset BANNER
	unset COPYPASTE
} 



 #Logo
 function logo_banner_ () {
cat << "EOF" 
                 -----------------------------------------
                         \
                          \
                               .--.   | 
                              |o_o | ~@
                              |:_/ |_/
                             //   \ \
                            (|  1  | )
                           /'\_   _/`\
                           \___)=(___/
EOF
}

 function logo_banner1_ () {
cat << "EOF" 
                 
                         \
                          \
                               .--.   | 
                              |o_o | ~@
                              |:_/ |_/
                             //   \ \
                            (|  1  | )
                           /'\_   _/`\
                           \___)=(___/
EOF
}

function logo_lets_do_this_ () {
greetgusr_ 
echo -e "\t${menu1}                                         ${normal}"
echo -e "\t         "$greet" ${green}"$whoami",            ${normal}"
echo -e "\t         Lets do this                   ${normal}"
cat << "EOF"
        -----------------------------------------
                 \
                  \
                       .--.   | 
                      |o_o | ~@
                      |:_/ |_/
                     //   \ \
                    (|  1  | )
                   /'\_   _/`\
                   \___)=(___/
EOF
}

function logo_chmod_ () {
greetgusr_ 
#echo -e "\t${menu1}                                         ${normal}"
echo -e "\t                    "$greet" ${green}"$whoami"            ${normal}"
echo -e "\t          Wellcom to Simple Permission Managment                   ${normal}"
cat << "EOF" 
                 -----------------------------------------
                         \
                          \
                               .--.   | 
                              |o_o | ~@
                              |:_/ |_/
                             //   \ \
                            (|  1  | )
                           /'\_   _/`\
                           \___)=(___/
EOF
}

function logo_finds_ () {
greetgusr_ 
#echo -e "\t${menu1}                                         ${normal}"
echo -e "\t                    "$greet" ${green}"$whoami"            ${normal}"
echo -e "\t                     Wellcom Find Me                  ${normal}"
cat << "EOF" 
                 -----------------------------------------
                         \
                          \
                               .--.   | 
                              |o_o | ~@
                              |:_/ |_/
                             //   \ \
                            (|  1  | )
                           /'\_   _/`\
                           \___)=(___/
EOF
}

function logo_all_done_ () {
greetgusr_ 
#echo -e "\t${menu1}                                         ${normal}"

cat << "EOF" 
                 -------------------
                         \
                          \
                               .--.   | 
                              |o_o | ~@
                              |:_/ |_/
                             //   \ \
                            (|  1  | )
                           /'\_   _/`\
                           \___)=(___/
EOF
}

function logo_p_0_ () {
greetgusr_ 
echo -e ""$greet" Boss "$whoami", "
cat << "EOF"
 Please give me chance to help you
 ---------------------------------
  \
   \
        .--.   | 
       |o_o | ~@
       |:_/ |_/
      //   \ \
     (|  1  | )
    /'\_   _/`\
    \___)=(___/
EOF
}

function logo_p_1_ () {
cat << "EOF"
 Hi Boss,
 How i understand your first try was not good.
 Please be more accurate.
 Lets try again.
 --------------------------------------------
   \
    \
        .--.   |/
       |o_o | ~@ 
       |:_/ |_/
      //   \ \
     (|  2  | )
    /'\_   _/`\
    \___)=(___/
EOF
}

function logo_p_2_ () {
cat << "EOF"
 Boss, 
 This is your third try.
 I belive in this time we will get good result.
 Lets go
 ---------------------------------------------
   \
    \
  \|/   .--.  \|/ 
   @~  |O_O | ~@ 
    \_ | _/ |_/ 
      //   \ \
     (|  3  | )
    /'\_   _/`\
    \___)=(___/
EOF
}

function logo_p_3_ () {
cat << "EOF"

 Dear Boss,
 That realy you? 
 Your limit for today is reached.
 Try in another day Ha Ha Ha
 -------------------------------
   \
    \
 \||/   .--.  \||/ 
   @~  |o o | ~@ 
    \_ | O  |_/ 
      //   \ \
     (|  4  | )
    /'\_   _/`\
    \___)=(___/
EOF
sleep 1
clear
cat << "EOF"
 Bay 
 --------
   \
    \
        .--.  \|/ 
       |o o | ~@ 
       | O  |_/ 
      //   \ \
     (|     | )
    /'\_   _/`\
    \___)=(___/
EOF
sleep 1
clear
cat << "EOF"
 Bay Bay
 --------
   \
    \
        .--.   
       |o o |  
       | O  |_ __ ~@/__
      //   \ \      \
     (|     | )
    /'\_   _/`\
    \___)=(___/
EOF
sleep 1
clear
cat << "EOF"
 Bay Bay Bay
 -----------
   \
    \
        .--.   
       |0 0 |  
       | )  |_
      //   \ \ \ 	  
     (|     | ) ~@ /__ 
    /'\_   _/`\    \
    \___)=(___/
EOF
sleep 1
clear
echo  > $LOGO
#menu0_
}
 
function logo_p_ () {
local chk=`cat $LOGO`

if [ -z "$chk" ]; 
then
 logo_p_0_
  echo 1 > $LOGO
  
fi

if [ "$chk" == 1 ]; 
then
logo_p_1_
echo 2 > $LOGO
fi

if [ "$chk" == 2 ]; 
then
echo 3 > $LOGO
 logo_p_2_
fi
if [ "$chk" == 3 ]; 
then
 logo_p_3_
fi
}

function logo_p_not_good_ () {
echo -e "                 Somthing went ${fgred}wrong${normal}. Pleas try again"
cat << "EOF"
                 ------------------------------------
                         \
                          \
                            .--.
                           |o_o |
                           | 0  | 
                          //   \ \
                         (|     | )
                        /'\_   _/`\
                        \___)=(___/
EOF
}

function logo_p_good_ () {
export trychk1=`cat $LOGO`
cat << "EOF"
 Looks that we coped with not simple task
 ----------------------------------------
   \
    \
        .--.
       |o_o |
       |:_/ |
      //   \ \
     (|     | )
    /'\_   _/`\
    \___)=(___/
EOF
if [ -n "$LOGO"  ];
then
echo -e "\n You got good result after "$trychk1" tries"
echo > $LOGO
else
echo > $LOGO
fi
}

function logo_p_good_folder_search_ () {
cat << "EOF"
 Looks that we coped with not simple task
 ----------------------------------------
   \
    \
        .--.
       |o_o |
       |:_/ |
      //   \ \
     (|     | )
    /'\_   _/`\
    \___)=(___/
EOF
}

function logo_ () {
echo -e "\n\n"
cat << "EOF"
        \|/ ____ \|/       
         @~/ 00 \~@        
        /_( \__/ )_\       
           \__U_/
	
EOF
 
}

function logo_sad_ () {
echo -e ""
cat << "EOF"
      \|/   ____   \|/       
       @~  / 00 \  ~@        
        \_( '__' )_/       
           \'___/
	
EOF
 
}

function logo_big_ () {
echo -e "\n\n"
cat << "EOF"
                          oooo$$$$$$$$$$$$oooo
                      oo$$$$$$$$$$$$$$$$$$$$$$$$o
                   oo$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$o         o$   $$ o$
   o $ oo        o$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$o       $$ $$ $$o$
oo $ $ "$      o$$$$$$$$$    $$$$$$$$$$$$$    $$$$$$$$$o       $$$o$$o$
"$$$$$$o$     o$$$$$$$$$      $$$$$$$$$$$      $$$$$$$$$$o    $$$$$$$$
  $$$$$$$    $$$$$$$$$$$      $$$$$$$$$$$      $$$$$$$$$$$$$$$$$$$$$$$
  $$$$$$$$$$$$$$$$$$$$$$$    $$$$$$$$$$$$$    $$$$$$$$$$$$$$  """$$$
   "$$$""""$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$     "$$$
    $$$   o$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$     "$$$o
   o$$"   $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$       $$$o
   $$$    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$" "$$$$$$ooooo$$$$o
  o$$$oooo$$$$$  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$   o$$$$$$$$$$$$$$$$$
  $$$$$$$$"$$$$   $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$     $$$$""""""""
 """"       $$$$    "$$$$$$$$$$$$$$$$$$$$$$$$$$$$"      o$$$
            "$$$o     """$$$$$$$$$$$$$$$$$$"$$"         $$$
              $$$o          "$$""$$$$$$""""           o$$$
               $$$$o                                o$$$"
                "$$$$o      o$$$$$$o"$$$$o        o$$$$
                  "$$$$$oo     ""$$$$o$$$$$o   o$$$$""
                     ""$$$$$oooo  "$$$o$$$$$$$$$"""
                        ""$$$$$$$oo $$$$$$$$$$
                                """"$$$$$$$$$$$
                                    $$$$$$$$$$$$
                                     $$$$$$$$$$"
                                      "$$$""  
EOF
 
}

function logo_stop_time_ () {
clear 
echo -e "\n\n\n\n\n\n"
printf %b '\033[31m'
printf %b '\033[5m'

cat << "EOF"
         `-:-     .::.     -:-`                                                       .::.     -:-`    `::-             
         /MMN`    yMMh    `NMM+    :ohddhy+`    ``                                    dMMy    .NMM/    +MMN`            
         /MMM`    yMMh     NMM+   yMMmysydN/   sNNs                                   dMMs    `MMM:    +MMN             
         :MMN`    sMMy     NMM/  -MMM/   ``` -+dMMd++:   `:+osso/.    -++`./oso/`     hMMs    `MMM-    /MMN             
         -MMN     sMMy     mMM:  `mMMNs/-    /mNMMNmms  /mNMdhdNMNy`  sMMdNmdNMMm-    yMMo    `NMM.    :MMm             
         .MMm     oMMs     dMM:   .smMMMNds.  `yMMh``` :NMM:` `-mMMo  sMMN/``.hMMm    yMM+     NMM.    :MMd             
         .MMm     +MMo     hMM-     `-+yNMMm.  yMMy    sMMd     sMMd  sMMh    /MMM`   sMM/     mMM`    -MMh             
          +o:     .++.     -o+`  ``     /MMM/  yMMy    oMMm`    hMMy  sMMd`   oMMN    .o+`     :o/     `+o:             
         :dmd`    omms    `hmd/  ody+//+dMMd`  oMMN+/: .mMMh/:/yMMm.  sMMMd+/sNMMo    ymmo    .dmd-    /dmh`            
         :mmd`    smmy    `dmm/  -ydmNNmmh+`   `ymNNmo  .odmNNmmho.   sMMdymNNmh/     hmmo    .mNm:    /mmd`            
          ..`     `..`     `..     `....`        `...     `....`      sMMh `...       `..      `..      ..`             
                                                                      sMMh                                              
                                                                      .//-                                              
                                                                                                                        
                                                                                                                        
                                                                                                                        
                                                                                                                        
                                                                                                                        
                                                                                                                        
                  .-.                         ````                                                                      
     -hdddddddh` oMMN.                     :sdmmmdy:                                                                    
     /MMMhyyyys  .os+                     sMMNs+osmy                                                                    
     /MMM`       .sso  /sso`  `sss`       MMMs          `/syhys/    :ss.:yhs.sss`    :ss/   -oyhyy+.    os+`oyy:        
     /MMM.````   /MMN  `dMMh`.mMN/        yMMMds:`     +NMmooyMMm.  oMMmMNmN`mMMs   `NMM: .dMMyoodMMs   MMNNMmN+        
     /MMMMMMMMh  /MMN   `hMMdmMN:          :hNMMMMd/  :MMN````oMMh  oMMN+    :MMM-  yMMy  dMMo````NMM-  MMMd.           
     /MMM+////-  /MMN    `NMMMM+              -+dMMM+ sMMMMMMMMMMh  oMMd      yMMd :MMm`  MMMMMMMMMMM:  MMM/            
     /MMM`       /MMN   `hMMdMMN:         .     `NMMy +MMm```````   oMMd      `NMM+dMM/   NMM+``````    MMM/            
     /MMM`       /MMN  `dMMo +MMN/       :Ndyo+odMMm. `dMMd+///oy-  oMMd       /MMMMMy    /NMNs///+ss   MMM/            
     :ddh`       -ddh  sdd+   +ddh.      `oydmmmdy/`   `/ydmmmdhs`  /dds        sdddh.     .ohmmmmdh+   hdd-            
      ``          ``    ``     ```          `````         `````      ``          ```          `````      ``             
                                                                                                                        
                                                                                                                        
                                                                                                                        
                                                                                                                        
                                                                                                                        
                                                                                                                        
                                                                                                                        
                                                                                                                        
                               ````````````  -//.                                                                       
                              /mmmmmmmmmmmm/ mMMy                                                                       
                              .oooomMMmoooo. :+/.         ``     ``          ```                                        
                                   hMMh      ohh/  .hh+:shddy:./yddho.    .+ydddhs:                                     
                                   hMMh      dMMo  -MMNNdshMMMmNhymMMm`  :mMmo//hMMs                                    
                                   hMMh      dMMo  -MMM/   hMMd.  .MMM: `NMM+---:MMM.                                   
                                   hMMh      dMMo  -MMM`   sMMy   `NMM: .MMMmmmmmmmm.                                   
                                   hMMh      dMMo  -MMM`   sMMy   `NMM: `NMM/     ``                                    
                                   hMMh      dMMo  -MMM`   sMMy   `NMM:  /NMNyo+osho                                    
                                   +hh+      ohy:  .yhy`   /hh+    shy.   .+yhddhys-                                    
                                                                                     

EOF
printf %b '\033[m'
read -n 1 -s -p "" 
printf %b '\033[m'
 tput reset
clear && echo && clear
start_
}

function logo2_ () {
cat << "EOF"
          _,.
        ,` -.)
       '( _/'-\\-.               
      /,|`--._,-^|            ,     
      \_| |`-._/||          ,'|       
        |  `-, / |         /  /      
        |     || |        /  /       
         `r-._||/   __   /  /  
     __,-<_     )`-/  `./  /
    '  \   `---'   \   /  / 
   /    |           |./  /  
   \    /  FindMe   //  /     
    \_/' \         |/  /         
     |    |   _,^-'/  /              
     |    , ``  (\/  /_        
      \,.->._    \X-=/^         
      (  /   `-._//^`  
       `Y-.____(__}              
        |     {__)           
              ()`     


EOF
}

function logo_findme_ () {
cat << "EOF"
                                _,.
                              ,` -.)
                             '( _/'-\\-.               
                            /,|`--._,-^|            ,     
                            \_| |`-._/||          ,'|       
                              |  `-, / |         /  /      
                              |     || |        /  /       
                               `r-._||/   __   /  /  
                           __,-<_     )`-/  `./  /
                          '  \   `---'   \   /  / 
                         /    |           |./  /  
                         \    /  FindMe   //  /     
                          \_/' \         |/  /         
                           |    |   _,^-'/  /              
                           |    , ``  (\/  /_        
                            \,.->._    \X-=/^         
                            (  /   `-._//^`  
                             `Y-.____(__}              
                              |     {__)           
                                     ()`     
EOF
}

function logo_clock_ () {
echo -e ""
cat << "EOF"
                                                                   
                        .:/osyhhmmmmmmdhys+/-`                        
                   `-+ymmhso/:-.``:.`..-/+oydmhs/.                    
                `/ymds+-`        :my        `.:ohmho-                 
              -smdo--+.          -ds           //./ymh/`              
            :ymy:`  -dm:          `          `yms   .oddo`            
          .ymy-      .o:         .ho         `o/      `+dd+`          
         +md:                    :Nh                    .smh.         
       `yms`                     -mh                      :dy:        
      `ymo`o+-`                  :Nh                   ./o:.hm/       
     `ymo  /yhs                  :Nh                  -hho. .dm:      
     oNy     ``                  :Nh                   ``    -mm.     
    .mm.                         :Nh                          +Ny     
    smo                          :Nh                          `mm.    
    dm.                          :mh                           sm+    
   .mm  ```                     `+dd-                     `.`` +Ny    
   -md +hhh/                    :d-+d-`                  `yyyy./Ny    
   .Nm `...`                    `/++ydho:`                `... /ms    
    mN.                              ./sdhs:.                  sN+    
    sN+                                 `:sdds/`              `mm.    
    -md`                                   `:os`              +Ny     
     sms     ``                                        ``    .mm.     
     `hN+  :shs                                       -hy+. `yd/      
      .hm+`ss:`                                        -/s/.yh/       
       `yms`                                              -dm/        
        `omh-                                           `omh-         
          -hms.      .+:                     `+/      `/dmo`          
            /hms-`  .dm/          `          `ymo   `+dms.            
              :ymh+.-o-          .hs           ++`:smdo.              
                .+hmhs/.         -dh         `./ymds:                 
                   `:ohmdyo+:-.```:- ``.:/oshhyo/-                    
                       `-/+syhdmmmmmmmmdhyo+:`                        
                                `````               
EOF
}

function logo_folder_ () {
echo -e ""
cat << "EOF"
            ::::.                                    
            :Mmddh/.......:                           
            :yNMNMMMMMMMMMs`..                       
            :yMMMMMMMMMMMM-:__                       
            `hNNNNNNNNNNNh   .|                       
             `````````````   .|                      
                             .|   -hhhho.......      
                             .|   +dmmmmdddddddy:     
                             .|   +yMMMMMMMMMMMM:     
                             .|___dMMMMMMMMMMMm      
                             .|    oooooooooooo:     
                             .| 
                             .|    .....              
                             .|   -hhhho.......     
                             .|   +yNNNNNNNNNNmN/     
                             `|___yMMMMMMMMMMMM`     
                                  `mNNNNNNNNNNNy      
                                   ```````````` 
EOF
}
 
 function logo_permissions_ () {
echo -e ""
cat << "EOF"
                           ```                                   
                     `:oyhdddddhys/.                             
                   `oddddddddddddddds.                           
                  `hdddddddddddddddddd-                          
                  sdddddddddddddddddddh                          
                  ddddddddddddddddddddd-                         
                  ddddddddddddddddddddd-                         
                  ddddddddddddddddddddd-                         
                  ddddddddddddddddddddd-                         
                 odddddddddddddddddddddy                         
                 hdddddddddddddddddddddd.                        
                 -hdddddddddddddddddddd/      :+yhddddyo/`       
                  `hdddddddddddddddddd.    `+hdddddddddddds.     
                   -ddddddddddddddddd/    `yddddddddh/:/hddd:    
                    .hdddddddddddddd:     yddddddddd-   -dddd.   
                     `sdddddddddddh.     .ddddddddddh/:/hdddd+   
                     `sdddddddddddh`     .ddddddddddddddddddd+   
                   `+hdddddddddddddd+    `hdddddddddddddddddd.   
                ./ydddddddddddddddd+`  `/hdddddddddddddddddh-    
            `-+yddddddddddddddddd+`  `/hdddddddddddddddddh+`     
        `:+yddddddddddddddddddd+`  `/hddddddddh+oyyhhys+-        
    ./oyddddddddddddddddddddd+`  `/hddddddddh/`                  
   -ddddddddddddddddddddddd+`  `/hdddyyyyyy/`  `//:::-           
   :ddddddddddddddddddddd+`  `/hddddd`       `+dddddd+           
   :ddddddddddddddddddd+`  `/hddddddy   :///odddddddd+           
   :ddddddddddddddddd+`  `/hdddddddd+   hdddddddddddd+           
   `oyyyyyyyyyyyyyy+`  `/hdddddyso+/`  .yyyyyyyyyyyys.           
                      :hdddddd:                                  
                      .ddddddy           
EOF
}
 
  
  
  
#System Over View 
function system_status_start_ () { #Working on start
clear && echo && clear
unset BANNERLOCKED
unset SSHPORTBAN
unset SELINUXBAN
unset FWBAN
unset IPTABLESBAN
unset FAIL2BAN
unset SAMBABAN
unset HTTPDBAN
unset NGINXBAN
unset TOMCATBAN
unset PHPBAN && unset MYSQLBAN && unset POSTGRESBAN && unset MONGOBAN && unset SAMBAUSERSBAN && unset SYSTEMUSERSBAN && unset ROOTUSERSBAN
unset UBUNTUBAN
unset CENTOSBAN
unset CENTOSBAN
unset DIRLOCATION 
unset ASTERISBAN
unset SANGOMABAN
unset DOMAINBANN
chk_asterisk_
unset_banner_
chk_firewalld_
chk_selinux_
chk_iptables_
chk_fail2ban_
chk_ssh_port_
chk_httpd_port_
chk_php_v_
chk_mysql_
chk_mongo_
chk_postgres_
chk_samba_
chk_samba_users_
chk_sys_active_users_
chk_root_users_
chk_os_
BANNERLOCKED1=`cat $lockedusers | wc -l`
BANNERLOCKED=`echo -e "$BANNERLOCKED1"`
DOMAINTOLEACHEK=`ls /usr/sbin | grep realm | wc -l`
if [ "$DOMAINTOLEACHEK" != 0 ];
then
DOMAINTOLEAV=`realm list | grep domain-name | awk '{print $2}' | wc -l`
if [ "$DOMAINTOLEAV" == 0 ];
then
export DOMAINBANN="${green}WorkGroup${normal}"
else
DOMAINTOLEAV=`realm list | grep domain-name | awk '{print $2}'`
export DOMAINBANN="${green}$DOMAINTOLEAV${normal}"
fi
fi
clear && echo && clear
clear && echo && clear
	printf "${menu}      ***********************Over view ${menu}***********************${normal}\n"
	#logo2_
	echo
	echo -e "\n\n${menu}        ${menu1}-----------------------${bgwhite}${menu}OS${menu}${menu1}-------------------------${normal}"
	echo -e "\t${green}                    $CENTOSBAN$UBUNTUBAN$SANGOMABAN${normal}"
	echo -e "${menu}        ${menu1}--------------------------------------------------${normal}\n"
	echo -e "\n${menu}        ${menu1}----------------------${bgwhite}${menu}Date${menu}${menu1}------------------------${normal}"
	get_server_time_
	echo -e "${menu}        ${menu1}--------------------------------------------------${normal}\n"
	echo -e "\n${menu}        ${menu1}---------------------${bgwhite}${menu}Security${menu}${menu1}---------------------${normal}"
	echo -e "\t${menu}$SSHPORTBAN$FWBAN$SELINUXBAN$IPTABLESBAN$FAIL2BAN${normal}"
	echo -e "${menu}        ${menu1}--------------------------------------------------${normal}\n"
	echo -e "\n${menu}        ${menu1}---------------------${bgwhite}${menu}Servers${menu}${menu1}----------------------${normal}"
	echo -e "\t${menu}$SAMBABAN$HTTPDBAN$NGINXBAN$ASTERISBAN$PHPBAN$MYSQLBAN$POSTGRESBAN$MONGOBAN$TOMCATBAN ${normal}"
	echo -e "${menu}        ${menu1}--------------------------------------------------${normal}\n"
	echo -e "\n${menu}        ${menu1}----------------------${bgwhite}${menu}Users${menu}${menu1}-----------------------${normal}"
	echo -e "\t${green}${number}$BANNERLOCKED${green} Locked users${normal}\n\t$SAMBAUSERSBAN\n\t$SYSTEMUSERSBAN\n\t$ROOTUSERSBAN $CRONBANN     ${normal}"
	echo -e "${menu}        ${menu1}--------------------------------------------------${normal}\n"
	echo -e "${menu}${normal}"
	echo -e "\n\n\n\n\n"
	unset BANNER
	
	
	$SLEEP2
	start_
	#clear
}
 
 function system_status_start1_ () {  #Main
#clear && echo && clear
unset BANNERLOCKED
unset SSHPORTBAN
unset SELINUXBAN
unset FWBAN
unset IPTABLESBAN
unset FAIL2BAN
unset SAMBABAN
unset HTTPDBAN
unset NGINXBAN
unset TOMCATBAN
unset PHPBAN && unset MYSQLBAN && unset POSTGRESBAN && unset MONGOBAN && unset SAMBAUSERSBAN && unset SYSTEMUSERSBAN && unset ROOTUSERSBAN
unset UBUNTUBAN
unset CENTOSBAN
unset CENTOSBAN
unset DIRLOCATION 
unset ASTERISBAN
unset SANGOMABAN
unset DOMAINBANN
chk_asterisk_
unset_banner_
chk_firewalld_
chk_selinux_
chk_iptables_
chk_fail2ban_
chk_ssh_port_
chk_httpd_port_
chk_php_v_
chk_mysql_
chk_mongo_
chk_postgres_
chk_samba_
chk_samba_users_
chk_sys_active_users_
chk_root_users_
chk_os_
chk_msdomain_
BANNERLOCKED1=`cat $lockedusers | wc -l`
BANNERLOCKED=`echo -e "$BANNERLOCKED1"`
DOMAINTOLEACHEK=`ls /usr/sbin | grep realm | wc -l`
if [ "$DOMAINTOLEACHEK" != 0 ];
then
DOMAINTOLEAV=`realm list | grep domain-name | awk '{print $2}' | wc -l`
if [ "$DOMAINTOLEAV" == 0 ];
then
export DOMAINBANN="${green}WorkGroup${normal}"
else
DOMAINTOLEAV=`realm list | grep domain-name | awk '{print $2}'`
export DOMAINBANN="${green}$DOMAINTOLEAV${normal}"
fi
fi
#clear && echo && clear
#clear && echo && clear
	#printf "${menu}      ***********************Over view ${menu}***********************${normal}\n"
	echo -e "${menu}        ${menu1}                  ${number}Host${menu}      ${number}OS${menu}       ${number}Domain${menu}                 ${normal}"
	echo -e "\t${green}               [$hostname] $CENTOSBAN$UBUNTUBAN$SANGOMABAN $DOMAINBANN${normal}"
	#echo -e "${menu}        ${menu1}--------------------------------------------------${normal}\n"
	echo -e "${menu}        ${menu1}                            ${bgwhite}${number}Date${menu}${menu1}                            ${normal}"
	get_server_time_
	#echo -e "${menu}        ${menu1}--------------------------------------------------${normal}\n"
	echo -e "${menu}        ${menu1}                          ${bgwhite}${number}Security${menu}${menu1}                          ${normal}"
	echo -e "\t${menu}     $SSHPORTBAN$FWBAN$SELINUXBAN$IPTABLESBAN$FAIL2BAN${normal}"
	#echo -e "${menu}        ${menu1}--------------------------------------------------${normal}\n"
	echo -e "${menu}        ${menu1}                          ${bgwhite}${number}Servers${menu}${menu1}                           ${normal}"
	echo -e "\t${menu}     $SAMBABAN$HTTPDBAN$NGINXBAN$ASTERISBAN$PHPBAN$MYSQLBAN$POSTGRESBAN$MONGOBAN$TOMCATBAN ${normal}"
	#echo -e "${menu}        ${menu1}--------------------------------------------------${normal}\n"
	echo -e "${menu}        ${menu1}                           ${bgwhite}${number}Users${menu}${menu1}                            ${normal}"
	echo -e "\t     ${green}${fgred} $BANNERLOCKED${green} Locked users${normal}           $SAMBAUSERSBAN\n\t      $SYSTEMUSERSBAN  $ROOTUSERSBAN $CRONBANN     ${normal}"
	echo -e "${menu}        ${menu1}------------------------------------------------------------${normal}\n"
	
	#echo -e "\n\n\n\n\n"
	unset BANNER
	
	#clear
} 
 
function system_status_ () {  #Main
#clear && echo && clear
unset BANNERLOCKED
unset SSHPORTBAN
unset SELINUXBAN
unset FWBAN
unset IPTABLESBAN
unset FAIL2BAN
unset SAMBABAN
unset HTTPDBAN
unset NGINXBAN
unset TOMCATBAN
unset PHPBAN && unset MYSQLBAN && unset POSTGRESBAN && unset MONGOBAN && unset SAMBAUSERSBAN && unset SYSTEMUSERSBAN && unset ROOTUSERSBAN
unset UBUNTUBAN
unset CENTOSBAN
unset CENTOSBAN
unset DIRLOCATION 
unset ASTERISBAN
unset SANGOMABAN
unset DOMAINBANN
chk_asterisk_
unset_banner_
chk_firewalld_
chk_selinux_
chk_iptables_
chk_fail2ban_
chk_ssh_port_
chk_httpd_port_
chk_php_v_
chk_mysql_
chk_mongo_
chk_postgres_
chk_samba_
chk_samba_users_
chk_sys_active_users_
chk_root_users_
chk_os_
chk_msdomain_
BANNERLOCKED1=`cat $lockedusers | wc -l`
BANNERLOCKED=`echo -e "$BANNERLOCKED1"`

DOMAINTOLEACHEK=`ls /usr/sbin | grep realm | wc -l`
if [ "$DOMAINTOLEACHEK" != 0 ];
then
DOMAINTOLEAV=`realm list | grep domain-name | awk '{print $2}' | wc -l`
if [ "$DOMAINTOLEAV" == 0 ];
then
export DOMAINBANN="${green}WorkGroup${normal}"
else
DOMAINTOLEAV=`realm list | grep domain-name | awk '{print $2}'`
export DOMAINBANN="${green}$DOMAINTOLEAV${normal}"
fi
fi

#clear && echo && clear
#clear && echo && clear
	#printf "${menu}      ***********************Over view ${menu}***********************${normal}\n"
	echo -e "\n${menu}        ${menu1}-----------Host--------OS-------Domain------------${normal}"
	echo -e "\t${green}         [$hostname] $CENTOSBAN$UBUNTUBAN$SANGOMABAN $DOMAINBANN${normal}"
	#echo -e "${menu}        ${menu1}--------------------------------------------------${normal}\n"
	echo -e "${menu}        ${menu1}----------------------${bgwhite}${menu}Date${menu}${menu1}------------------------${normal}"
	get_server_time_
	#echo -e "${menu}        ${menu1}--------------------------------------------------${normal}\n"
	echo -e "${menu}        ${menu1}---------------------${bgwhite}${menu}Security${menu}${menu1}---------------------${normal}"
	echo -e "\t${menu}$SSHPORTBAN$FWBAN$SELINUXBAN$IPTABLESBAN$FAIL2BAN${normal}"
	#echo -e "${menu}        ${menu1}--------------------------------------------------${normal}\n"
	echo -e "${menu}        ${menu1}---------------------${bgwhite}${menu}Servers${menu}${menu1}----------------------${normal}"
	echo -e "\t${menu}$SAMBABAN$HTTPDBAN$NGINXBAN$ASTERISBAN$PHPBAN$MYSQLBAN$POSTGRESBAN$MONGOBAN$TOMCATBAN ${normal}"
	#echo -e "${menu}        ${menu1}--------------------------------------------------${normal}\n"
	echo -e "${menu}        ${menu1}----------------------${bgwhite}${menu}Users${menu}${menu1}-----------------------${normal}"
	echo -e "\t${green}[${fgred} $BANNERLOCKED${green}] Locked users${normal}   $SAMBAUSERSBAN\n\t$SYSTEMUSERSBAN   $ROOTUSERSBAN $CRONBANN     ${normal}"
	echo -e "${menu}        ${menu1}--------------------------------------------------${normal}\n"
	echo -e "${menu}${normal}"
	echo -e "\n\n\n\n\n"
	unset BANNER
	pause_witout_exit_
	
	start_
	#clear
} 

current_server_time_centos_ () {
DATECHK=`date | awk '{print  $4, "  |  ", $3, "  |  ", $2,"  |  ", $6 }'`
CHKTIMEZONE=`ls -l /etc/localtime | grep -o -P '(?<=(/usr/share/zoneinfo/)).*(?=$)'`
longstr=`(echo -e "$DATECHK" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo -e "$longstr" | sed 's/./-/g') 
#echo -e "            Current Server Time   \n"

#echo -e "\t    ${green}     Time       Day      Month      Year   ${normal}"
echo -e "\t        +$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t        |${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "  |${normal}"
 else
  echo -e "  |${normal}"
 fi
done < <(printf '%s\n' "$DATECHK")
echo -e "\t        +$edge---+${normal}"
echo -e "\t              ${green}[Timezone: $CHKTIMEZONE${green}]${normal}"
}

current_server_time_ubuntu_ () {
DATECHK=`date | awk '{print  $5, "  |  ", $2, "  |  ", $3,"  |  ", $4 }'`
CHKTIMEZONE=`ls -l /etc/localtime | grep --color=always -o -P '(?<=(/usr/share/zoneinfo/)).*(?=$)'`
longstr=`(echo "$DATECHK" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
#echo -e "            Current Server Time   \n"
#echo -e "\t${green}     Time       Day      Month      Year   ${normal}"
echo -e "\t+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "  |${normal}"
 else
  echo -e "  |${normal}"
 fi
done < <(printf '%s\n' "$DATECHK")
echo -e "\t+$edge---+${normal}"
echo -e "\t${green}[Timezone: ${green}$CHKTIMEZONE${green}]${normal}"
 
}

get_server_time_ () {

if [ "$CENTOS" == 1 ];
  then
  
  
  current_server_time_centos_
 
elif [ "$UBUNTU" == 1 ];
    then
	current_server_time_ubuntu_
	fi
}

chk_firewalld_ () { 
#1 Checl firewall if up or down
if [ "$CENTOS" == 1 ];
  then
         UFWCHK=`systemctl status firewalld | grep -o "Active: active" | wc -l`
		 
if [ "$UFWCHK" == 0 ]; 
    then 
	return 0
        #FWBAN="${grey}[FIREWALL]${normal}"
      else
        FWBAN="${green}[FIREWALL]${normal}"
fi
		  
elif [ "$UBUNTU" == 1 ];
    then
	     UFWCHK=`systemctl status ufw | grep -o "Active: active" | wc -l`
if [ "$UFWCHK" == 0 ]; 
     then
		FWBAN="${green}[${RED}${blink}FIREWALL OFF${normal}${green}]${normal}"
     else
        FWBAN="${green}[FIREWALL]${normal}"
fi
			
fi
}

chk_selinux_ () { 
#1 Checl selinux if up or down
SESTATUS1=`ls  /etc/selinux | grep config | wc -l`


if [ "$SESTATUS1" != 0 ] ;
  then
  SESTATUS=`sestatus | grep -o disabled | wc -l`
  if [ "$SESTATUS" == 1 ];
  then
  return 0
    #SELINUXBAN="${grey}[SELINUX]${normal}"
      else
	  
    SELINUXBAN="${green}[SELINUX]${normal}"
	fi
fi
}

chk_iptables_ () { 
#1 Checl selinux if up or down
IPTABLESSTAT=`systemctl | grep iptables | wc -l`
if [ "$IPTABLESSTAT" != 0 ]  ;
  then
     IPTABLESSTAT1=`systemctl status iptables | grep -o "Active: active" | wc -l`
	 if [ "$IPTABLESSTAT1" == 1 ];
	 then
	 IPTABLESBAN="${green}[IPTABLES]${normal}"
    else
	IPTABLESBAN="${green}[${normal}${fgred}IPTABLES OFF${normal}${green}]${normal}"
	fi
     else
	 IPTABLESBAN="${green}[${normal}${fgred}IPTABLES OFF${normal}${green}]${normal}"
fi
}

chk_fail2ban_ () { 
#1 Checl selinux if up or down
FAIL2BANSTAT=`systemctl | grep fail2ban | wc -l`
if [ "$FAIL2BANSTAT" != 0 ] ;
  then
  FAIL2BANSTAT1=`systemctl status fail2ban | grep -o "Active: active" | wc -l`
  if [ "$FAIL2BANSTAT1" == 1 ];
	 then
	 FAIL2BAN="${green}[FAIL2BAN-ON]${normal}"
    else
	return 0
	 #FAIL2BAN="${grey}[FAIL2BAN-OFF]${normal}"
	fi
     else
	 return 0
	 # FAIL2BAN="${grey}[FAIL2BAN-OFF]${normal}"
fi
  }

chk_ssh_port_ () { 
#1 Checl selinux if up or down
SSHPORTCHK=`grep -e "^Port" /etc/ssh/sshd_config | wc -l`
SSHPORTCHK1=`grep -e "^Port" /etc/ssh/sshd_config`
if [ "$SSHPORTCHK" == 1 ] ;
  then
    SSHPORTBAN="${green}[SSH $SSHPORTCHK1]${normal}"
      else
    SSHPORTBAN="${green}[SSH Port 22]${normal}"
fi
}

chk_httpd_port_ () { 
#1 Checl selinux if up or down
UBUNTUHTTPD=`pgrep -x apache2 | wc -l`
CENTOSHTTPD=`pgrep -x httpd | wc -l`
CHKNGINX=`pgrep -x nginx | wc -l`
CHKTOMCAT=`ps -ef | awk '/[t]omcat/{print $2}' | wc -l`
if [ "$UBUNTUHTTPD" != 0 ] || [ "$CENTOSHTTPD" != 0 ]  || [ "$CHKTOMCAT" != 0 ]  ;
  then
    HTTPDBAN="${green}[APACHE]${normal}"
	elif  [ "$CHKNGINX" != 0 ] ;
	 then
	  HTTPDBAN="${green}[NGINX]${normal}"
	  elif  [ "$CHKTOMCAT" != 0 ] ;
	 then
	  HTTPDBAN="${green}[TOMCAT]${normal}"
	 else
	 return 0
      #HTTPDBAN="${grey}[WEB-SRV]${normal}"
fi
}

chk_php_v_ () { 
PHPCHK2=`ls /usr/bin | grep php | wc -l`
if [ "$PHPCHK2" != 0 ] ;
  then
  PHPCHK=`php -v | grep -Po '(?<=^PHP )[^ ]+'`
  PHPCHK1=`echo "PHP $PHPCHK"`
    PHPBAN="${green}[$PHPCHK1]${normal}"
      else
	  return 0
    #PHPBAN="${grey}[PHP]${normal}"
fi
} 

chk_mysql_ () { 
#1 Checl selinux if up or down
# MYSQLCHK=`ls /var/lib/mysql/ | wc -l`
# MYSQLCHK1=`systemctl status mariadb | grep -o "Active: active" | wc -l`
MYSQLCHK=`ps -ef | grep [m]ysql | wc -l`
if [ "$MYSQLCHK" != 0 ];
  then
    MYSQLBAN="${green}[MYSQL]${normal}"
      else
	  return 0
    #MYSQLBAN="${grey}[MYSQL]${normal}"
fi
}
 
 chk_asterisk_ () { 

ASTERISKCHK=`ps -ef | grep [a]sterisk | wc -l`
if [ "$ASTERISKCHK" != 0 ];
  then
    ASTERISBAN="${green}[ASTERISK]${normal}"
      else
	  return 0
    #MYSQLBAN="${grey}[MYSQL]${normal}"
fi
}
 
chk_mongo_ () { 
#1 Checl selinux if up or down
MONGOCHK=`ps -ef | grep [m]ongo | wc -l`
if [ "$MONGOCHK" != 0 ];
  then
    MONGOBAN="${green}[MONGO]${normal}"
      else
	  return 0
    #MONGOBAN="${grey}[MONGO]${normal}"
	fi
} 

chk_postgres_ () { 
#1 Checl selinux if up or down
POSTGRESCHK=`ps -ef | grep [p]ostgres | wc -l`
if [ "$POSTGRESCHK" != 0 ];
  then
    POSTGRESBAN="${green}[POSTGRES]${normal}"
      else
	  return 0
    #POSTGRESBAN="${grey}[POSTGRES]${normal}"
	fi
} 

chk_samba_ () { 
#1 Checl selinux if up or down
SMBCHK=`ps -ef | grep [s]mb | wc -l`
if [ "$SMBCHK" != 0 ];
  then
    SAMBABAN="${green}[SAMBA]${normal}"
      else
	  return 0
    # SAMBABAN="${grey}[SAMBA]${normal}"
	fi
} 

chk_os_ () { 
#1 Checl selinux if up or down
SANGOMA=`awk -F= '/^NAME/{print $2}' /etc/os-release | grep -o Sangoma | wc -l`
if [ "$CENTOS" == 1 ];
  then
  CENTOS=1
    CENTOSBAN=`echo -e "[CentOS]"`
	elif [ "$SANGOMA" == 1 ] ;
      then
        CENTOS=1
        CENTOSBAN=`echo -e "[CentOS Sangoma FreePBX]"`
		 
      else
    UBUNTU1=`awk -F= '/^NAME/{print $2}' /etc/os-release | grep -o Ubuntu `
	UBUNTUBAN=`echo -e "[$UBUNTU1]"`
	fi
} 

chk_samba_users_ () { 
#1 Checl selinux if up or down

SMBCHK=`ps -ef | grep [s]mb | wc -l`
if [ "$SMBCHK" != 0 ];
  then
  
SMBUSERS=`pdbedit -L | awk -F':' '{print $1 }' | wc -l`
SAMBAUSERSBAN=`echo "${green}${fgred}$SMBUSERS${green} ${green}Samba users${normal}"`
fi

} 

chk_sys_active_users_ () { 
#1 Checl selinux if up or down
SYSUSERSCHK=`cat /etc/passwd | grep -v nologin | grep -v false | grep -v sync | awk -F':' '{ print $1 }' | wc -l`
SYSTEMUSERSBAN=`echo "${green}${fgred}$SYSUSERSCHK${green} Regular users${normal}"`
} 

chk_root_users_ () {
echo  > $ROOTUSERSTMPLOG
echo  > $ROOTUSERSTMPLOG1
getu1=`getent group wheel | cut -d: -f4`
getu2=`getent group sudo | cut -d: -f4`
getu3=`getent group admin | cut -d: -f4`
getu4=`sudo cat /etc/sudoers | grep --color=always -o -P '(?<=(^)).*(?=ALL=)' | grep -v % | grep -v "#"`
echo $getu1 >> $ROOTUSERSTMPLOG
echo $getu2 >> $ROOTUSERSTMPLOG 
echo $getu3 >> $ROOTUSERSTMPLOG
echo $getu4 >> $ROOTUSERSTMPLOG
sed -i '/^$/d' $ROOTUSERSTMPLOG
sed -i "s/,/ /g" $ROOTUSERSTMPLOG
#getu5=`cat stam1.log | tr ' ' "\n" > stam2.log`
sed '$d'  $ROOTUSERSTMPLOG1 > $ROOTUSERSTMPLOG
printf %b '\033[m'
ROOTUSERSCHK=`cat $ROOTUSERSTMPLOG |  wc -l`
printf %b '\033[m'
ROOTUSERSBAN=`echo " ${green}${fgred}$ROOTUSERSCHK${green} Admin users${normal}"`
}
 
 chk_time_ () {
 
 unset PERMISIONFOLDER
 local CHKTIME=`date +"%M"`
 local CHKTIME1=`curl -s --head http://google.com | grep ^Date: | sed 's/Date: //g' | awk '{print  $5 }' | grep -o -P '(?<=(:)).*(?=:)'`
 if [ "$CHKTIME" != "$CHKTIME1" ];
 then 
logo_stop_time_
sudo ntpdate -u 0.asia.pool.ntp.org
 tput reset
 
clear && echo && clear
 else
  tput reset
  
clear && echo && clear
 start_
fi
}

chk_msdomain_ () { 
#1 Checl selinux if up or down
DOMAINTOLEACHEK=`ls /usr/sbin | grep realm | wc -l`
if [ "$DOMAINTOLEACHEK" != 0 ];
  then
DOMAINTOLEAV=`realm list | grep domain-name | awk '{print $2}' | wc -l`
if [ "$DOMAINTOLEAV" != 0 ];
  then
    DOMAINBANN="${green}[$DOMAINTOLEAV]${normal}"
      else
	  DOMAINBANN="${green}[WorkGroup]${normal}"
	fi
	else
	DOMAINBANN="${green}[WorkGroup]${normal}"
	fi
} 

chk_samba_shares_count_ () { 

SMBSCHK=`ps -ef | grep [s]mb | wc -l`
if [ "$SMBSCHK" != 0 ];
  then
  
SHARESCOUNT=`cat /etc/samba/smb.conf | grep -o '^\[.*' | wc -l`
SAMBASHARESSBAN=`echo "${green}${fgred}$SHARESCOUNT${green} ${green}Samba Shares${normal}"`
fi
#1 Checl selinux if up or down
SMBCHK=`ps -ef | grep [s]mb | wc -l`
if [ "$SMBCHK" != 0 ];
  then
    SAMBABAN="${green}[SAMBA]${normal}"
      else
	  return 0
    # SAMBABAN="${grey}[SAMBA]${normal}"
	fi
} 





#Interface Otions editors
#Hiden

function enable-hiden_ () {
export lsopt=-lah
HIDENONBAN="${fgred}ON${normal}"
}

function disable-hiden_ () {
HIDENONBAN="${menu}ON${normal}"
export lsopt=-lh
HIDENOFFBAN="${menu}OFF${normal}"

}

function vi_banner_ () {
VI=`ls /usr/bin | grep -e "vi$" | wc -l`
if [ "$VI" == 0 ]; 
 then
  VIB="${grey}VI${normal}"
  
elif [ "$EDITOR" == "vi" ]; 
 then
  VIB="${fgred}VI${normal}"
else
  VIB="${green}VI${normal}"
fi

}

function vim_banner_ () {
if [ "$VIM" == 0 ]; 
 then
   VIMB="${grey}VIM${normal}"  
elif [ "$EDITOR" == "vim" ]; 
 then
   VIMB="${fgred}VIM${normal}"
 else
   VIMB="${green}VIM${normal}"
fi
return 0
}

function nano_banner_ () {
NANO=`ls /usr/bin | grep nano | wc -l`
if [ "$NANO" == 0 ]; 
 then
  NANOB="${grey}NANO${normal}"
  
elif [ "$EDITOR" == "nano" ]; 
 then
  NANOB="${fgred}NANO${normal}"
else
  NANOB="${green}NANO${normal}"
fi
return 0
}

function nano_ () {
unset EDITOR
EDITORTMP1=/tmp/findme/.editorfind.log
EDIPREF=`cat $EDITORTMP1`
NANO=`ls /usr/bin | grep nano | wc -l`

if [ "$NANO" == 0 ]; 
then
clear && echo && clear
echo -e "\n\n\n\n"
logo_findme_
local C1="$(printf "\n\t${menu}Dear Boss, ${number}nano${menu} is not instaled on this machine.\n\tTo install nano press [ ${number}y${menu} ] or [ ${number}Enter${menu} ] to skip: ${normal}\n")"
read  -e -n 1 -s -p "$C1" choice
if [ "$choice" == "y" ];
then
if [ "$CENTOS" != 0 ] ;
then
echo -e "\n\t${number}${blink}Installing nano .......${normal}\n" && sleep 1
yum install nano -y 
export EDITOR=nano
printf nano > $EDITORTMP1
echo -e "\n${menu}I finish nano instalation now you can use it.${normal}\n"
sleep 2
elif [ "$UBUNTU" != 0 ] ;
then
echo -e "\n\t${menu}${blink}Installing nano .......${normal}\n" && sleep 1
apt-get install nano -y 
export EDITOR=nano
printf nano > $EDITORTMP1
echo -e "\n${menu}I finish nano instalation now you can use it.${normal}\n"
sleep 2
else
return 0
fi
export EDITOR=nano
printf nano > $EDITORTMP1
menu0_
fi
fi
export EDITOR=nano
printf nano > $EDITORTMP1
menu0_

}

function vim_ () {
unset EDITOR
EDITORTMP1=/tmp/findme/.editorfind.log
EDIPREF=`cat $EDITORTMP1`
VIM=`ls /usr/bin | grep "vim$" | wc -l`
if [ "$VIM" == 0 ]; 
then
clear && echo && clear
echo -e "\n\n\n\n"
logo_findme_
local C1="$(printf "\n\t${menu}Dear Boss, ${number}vim${menu} is not instaled on this machine.\n\tTo install vim press [ ${number}y${menu} ] or [ ${number}Enter${menu} ] to skip: ${normal}\n")"
read -e -n 1 -s -p "$C1" choice
if [ "$choice" == "y" ];
then
if [ "$CENTOS" != 0 ] ;
then
echo -e "\n\t${number}${blink}Installing vim .......${normal}\n" && sleep 1
yum install vim -y 
export EDITOR=vim
printf vim > $EDITORTMP1
echo -e "\n\t${menu}I finish vim instalation now you can use it.${normal}\n"
sleep 2
elif [ "$UBUNTU" != 0 ] ;
then
echo -e "\n${menu}${blink}Installing vim .......${normal}\n" && sleep 1
apt-get install vim -y 
export EDITOR=vim
printf vim > $EDITORTMP1
echo -e "\n${menu}I finish vim instalation now you can use it.${normal}\n"
sleep 2
else
return 0
fi
export EDITOR=vim
printf vim > $EDITORTMP1
menu0_
fi
fi
export EDITOR=vim
echo vim > $EDITORTMP1
menu0_
}

function vi_ () {
unset EDITOR
export EDITOR=vi
echo vi > $EDITORTMP1
}

function check_editor_pref_ () {
export EDITORTMP1=/tmp/findme/.editorfind.log
export EDIPREF=`cat $EDITORTMP1`
export VIM=`ls /usr/bin | grep "vim$" | wc -l`
export NANO=`ls /usr/bin | grep nano | wc -l`
local CHK=`ls -a /tmp/findme | grep .editorfind.log | wc -l`
local CHK1=`cat /tmp/findme/.editorfind.log | wc -w`
if [ "$CHK" == 0 ] || [ "$CHK1" == 0 ] ;
then
echo vi > $EDITORTMP1
export EDITOR=vi
else
EDITOR=$EDIPREF
fi

if [ "$NANO" == 0 ] && [ "$VIM" == 0 ] ;
then
printf vi > $EDITORTMP1
export EDITOR=vi
elif [ "$EDIPREF" == "nano" ] && [ "$NANO" == 0 ];
then
printf vi > $EDITORTMP1
export EDITOR=vi
elif [ "$EDIPREF" == "vim" ] && [ "$VIM" == 0 ];
then
printf vi > $EDITORTMP1
export EDITOR=vi
elif [ "$EDIPREF" == "vi" ] && [ "$VI" == 0 ];
then
read -e -p "You dont have installed vi please install first"
else
return 0
fi

}




#File Explorer
#Delete / Rename / Create new dir / file /permisions /

function empety_chk_ () {
# if [ -z "$foldername" ] || [ "$foldername" == "" ];
		# then
		# empety_chk_
		# fi

clear && echo && clear
echo -e "\n\n\n\n"
logo_lets_do_this_
echo -e "\n\n\n\n\n\n\n\n\t${menu}${menu1}    This field cant be empety          ${normal}"
counter3_
menu0_

}

function delete_ () {
unset_banner_
#logo_lets_do_this_
 set -f 
#Menu 0
if [ "$selector" == "0" ] ; 
   then
           echo
		echo
		echo
		echo
          export DIR1=`echo "/${menu0_main[$counter]}" | awk '{print $1}'`
          local C1="$(printf "${menu}This ${fgred}$DIR1${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	      read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	        rm -rf $DIR1
	       	echo
	        echo -e "${blink}Delete in progres ..... ${normal}"
	        sleep 1
			export  BANNER=`echo -e "Dear "$whoami", \nYou just remove ${fgred}$DIR1${fgred}${normal}"`
            menu0_
   else
	        menu0_
fi
fi
#Menu 1
if [ "$selector" == "1" ] ; 
   then
         echo
		echo
		echo
		echo
        export DIR2=`echo "$DIR1/${menu0_main1[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}This ${fgred}$DIR2${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR2
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", You just remove ${green}$DIR2 ${normal}"`
         menu0_ && break;
	else
	     menu0_ && break;
fi
fi
#Menu 2
if [ "$selector" == "2" ] ; 
   then
         echo
		echo
		echo
		echo
        export DIR3=`echo "/${menu0_main2[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}This $DIR1$DIR2${fgred}/$DIR3${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR1$DIR2$DIR3
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", You just remove ${green}$DIR1$DIR2/${fgred}$DIR3 ${normal}"`
         menu1_ && break;
	else
	     menu1_ && break;
fi
fi
#Menu 3
if [ "$selector" == "3" ] ; 
   then
        echo
		echo
		echo
		echo
        export DIR4=`echo "/${menu0_main3[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}This $DIR1$DIR2$DIR3${fgred}$DIR4${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR1$DIR2$DIR3$DIR4
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", You just remove ${green}$DIR1$DIR2$DIR3${fgred}$DIR4${normal}"`
         menu2_ && break;
	else
	     menu2_ && break;
fi
fi
#Menu 4
if [ "$selector" == "4" ] ; 
   then
 echo
		echo
		echo
		echo
        export DIR5=`echo "/${menu0_main4[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}This $DIR1$DIR2$DIR3$$DIR4${fgred}$DIR5${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR1$DIR2$DIR3$DIR4$DIR5
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", You just remove ${green}$DIR1$DIR2$DIR3$DIR4${fgred}$DIR5${normal}"`
         menu3_ && break;
	else
	     menu3_ && break;
fi
fi

#Menu 5
if [ "$selector" == "5" ] ; 
   then
 echo
		echo
		echo
		echo
        export DIR6=`echo "/${menu0_main5[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}This $DIR1$DIR2$DIR3$DIR4$DIR5${fgred}$DIR6${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", You just remove ${green}$DIR1$DIR2$DIR3$DIR4$DIR5${fgred}$DIR6${normal}"`
         menu4_ && break;
	else
	     menu4_ && break;
fi
fi
#Menu 6
if [ "$selector" == "6" ] ; 
   then
 echo
		echo
		echo
		echo
        export DIR7=`echo "/${menu0_main6[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}This $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6${fgred}$DIR7${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", You just remove ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6${fgred}$DIR7${normal}"`
         menu5_ && break;
	else
	     menu5_ && break;
fi
fi

#Menu 6
if [ "$selector" == "7" ] ; 
   then
 echo
		echo
		echo
		echo
        export DIR8=`echo "/${menu0_main7[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}This $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7${fgred}$DIR8${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", You just remove ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7${fgred}$DIR8${normal}"`
         menu6_ && break;
	else
	     menu6_ && break;
fi
fi

#Menu 8
if [ "$selector" == "8" ] ; 
   then
 echo
		echo
		echo
		echo
        export DIR9=`echo "/${menu0_main8[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}This $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8${fgred}$DIR9${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", You just remove ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8${fgred}$DIR9${normal}"`
         menu7_ && break;
	else
	     menu7_ && break;
fi
fi

#Menu 9
if [ "$selector" == "9" ] ; 
   then
 echo
		echo
		echo
		echo
        export DIR10=`echo "/${menu0_main9[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}This $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9${fgred}$DIR10${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", You just remove ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9${fgred}$DIR10${normal}"`
         menu8_ && break;
	else
	     menu8_ && break;
fi
fi
#Menu 10
if [ "$selector" == "10" ] ; 
   then
 echo
		echo
		echo
		echo
        export DIR11=`echo "/${menu0_main10[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}This $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10${fgred}$DIR11${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", You just remove ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10${fgred}$DIR11${normal}"`
         menu9_ && break;
	else
	     menu9_ && break;
fi
fi
#Menu 11
if [ "$selector" == "11" ] ; 
   then
 echo
		echo
		echo
		echo
        export DIR12=`echo "/${menu0_main11[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}This $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11${fgred}$DIR12${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11$DIR12
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", You just remove ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11${fgred}$DIR12${normal}"`
         menu10_ && break;
	else
	     menu10_ && break;
fi
fi
}

function create_dir_ () {
unset_banner_
function read_ () {
logo_lets_do_this_
 set -f 

local C1="$(printf "${menu}Enter new folder name you wish to create: ${normal}\n")"
echo && read -e -p "$C1" foldername
if [ -z "$foldername" ] || [ "$foldername" == "" ];
		then
		empety_chk_
		fi
local C2="$(printf "${menu}New folder ${number}"$foldername"${menu} will be created please confirm (${fgred}y${menu}/n) or [ ${fgred}Enter${menu} ]: ${normal}\n")"
echo && read -e -p "$C2" choice
export foldername=$foldername
}	       
#Menu 0
if [ "$selector" == "0" ] ; 
  then
export DIR1=`echo "/${menu0_main[$counter]}"  | awk '{print $1}'`
PATH1=/
read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
	if [ -n "$foldername" ];
     	then
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new folder ${green}/${fgred}$foldername${normal}"`
	          #echo -e "Creating folder $foldername ........." && sleep 1
	          mkdir -p /$foldername
			  echo -e "${blink}${menu}Going to previuse folder ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
              menu0_ && break ; 
        else
              menu0_ && break ;
fi
fi
#Menu 1
if [ "$selector" == "1" ] ; 
  then
  #export DIR1=`echo "/${menu0_main[$counter]}"`
	export DIR2=`echo "/${menu0_main1[$counter]}"`
read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$foldername" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new folder ${green}$DIR1/${fgred}$foldername${normal}"`
	         
	          mkdir -p $DIR1/$foldername
			  echo -e "${blink}${menu}Going to previuse folder ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
		      menu0_ 
    else
              menu0_ 
fi
fi
#Menu 2
if [ "$selector" == "2" ] ; 
  then
	export DIR3=`echo "/${menu0_main2[$counter]}"  | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$foldername" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new folder ${green}$DIR1$DIR2/${fgred}$foldername${normal}"`
	          #echo -e "Creating folder $foldername ........." && sleep 1
	          mkdir -p $DIR1$DIR2/$foldername
			  echo -e "${blink}${menu}Going to previuse folder ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
		      menu1_ && break ;
    else
              menu1_ && break ;
fi
fi
#Menu 3
if [ "$selector" == "3" ] ; 
  then
	export DIR4=`echo "/${menu0_main3[$counter]}"  | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$foldername" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new folder ${green}$DIR1$DIR2$DIR3/${fgred}$foldername${normal}"`
	          #echo -e "Creating folder $foldername ........." && sleep 1
	          mkdir -p $DIR1$DIR2$DIR3/$foldername
			  echo -e "${blink}${menu}Going to previuse folder ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
		      menu2_ && break ;
    else
              menu2_ && break ;
fi
fi
#Menu 4
if [ "$selector" == "4" ] ; 
  then
	export DIR5=`echo "/${menu0_main4[$counter]}"  | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$foldername" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new folder ${green}$DIR1$DIR2$DIR3$DIR4/${fgred}$foldername${normal}"`
	          #echo -e "Creating folder $foldername ........." && sleep 1
	          mkdir -p $DIR1$DIR2$DIR3$DIR4/$foldername
			  echo -e "${blink}${menu}Going to previuse folder ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 2
fi
		      menu3_  && break ;
    else
              menu3_  && break ;
fi
fi
#Menu 5
if [ "$selector" == "5" ] ; 
  then 
	export DIR6=`echo "/${menu0_main5[$counter]}"  | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$foldername" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new folder ${green}$DIR1$DIR2$DIR3$DIR4$DIR5/${fgred}$foldername${normal}"`
	          #echo -e "Creating folder $foldername ........." && sleep 1
	          mkdir -p $DIR1$DIR2$DIR3$DIR4$DIR5/$foldername
			  echo -e "${blink}${menu}Going to previuse folder ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 2
fi
		      menu4_ && break ;
    else
              menu4_ && break ;
fi
fi
#Menu 6
if [ "$selector" == "6" ] ; 
  then  
	export DIR7=`echo "/${menu0_main6[$counter]}"  | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$foldername" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new folder ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/${fgred}$foldername${normal}"`
	          #echo -e "Creating folder $foldername ........." && sleep 1
	          mkdir -p $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/$foldername
			  echo -e "${blink}${menu}Going to previuse folder ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 2
fi
		      menu5_ && break ;
    else
              menu5_ && break ;
fi
fi
#Menu 7
if [ "$selector" == "7" ] ; 
  then
	export DIR8=`echo "/${menu0_main7[$counter]}"  | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$foldername" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new folder ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/${fgred}$foldername${normal}"`
	          #echo -e "Creating folder $foldername ........." && sleep 1
	          mkdir -p $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/$foldername
			  echo -e "${blink}${menu}Going to previuse folder ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu6_ && break ;
    else
              menu6_ && break ;
fi
fi
#Menu 8
if [ "$selector" == "8" ] ; 
  then
	export DIR9=`echo "/${menu0_main8[$counter]}"  | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$foldername" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new folder ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/${fgred}$foldername${normal}"`
	          #echo -e "Creating folder $foldername ........." && sleep 1
	          mkdir -p $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/$foldername
			  echo -e "${blink}${menu}Going to previuse folder ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu7_ && break ;
    else
              menu7_ && break ;
fi
fi
#Menu 9
if [ "$selector" == "9" ] ; 
  then
	export DIR10=`echo "/${menu0_main9[$counter]}"  | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$foldername" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new folder ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/${fgred}$foldername${normal}"`
	          #echo -e "Creating folder $foldername ........." && sleep 1
	          mkdir -p $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/$foldername
			  echo -e "${blink}${menu}Going to previuse folder ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu8_ && break ;
    else
              menu8_ && break ;
fi
fi
#Menu 10
if [ "$selector" == "10" ] ; 
  then
	export DIR11=`echo "/${menu0_main10[$counter]}"  | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$foldername" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new folder ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/${fgred}$foldername${normal}"`
	          #echo -e "Creating folder $foldername ........." && sleep 1
	          mkdir -p $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/$foldername
			  echo -e "${blink}${menu}Going to previuse folder ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu9_ && break ;
    else
              menu9_ && break ;
fi
fi
#Menu 11
if [ "$selector" == "11" ] ; 
  then
	export DIR12=`echo "/${menu0_main11[$counter]}"  | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$foldername" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new folder ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR11/${fgred}$foldername${normal}"`
	          #echo -e "Creating folder $foldername ........." && sleep 1
	          mkdir -p $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11/$foldername
			  echo -e "${blink}${menu}Going to previuse folder ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu10_ && break ;
    else
              menu10_ && break ;
fi
fi
#Menu 12
if [ "$selector" == "12" ] ; 
  then
	export DIR12=`echo "/${menu0_main12[$counter]}"  | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$foldername" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new folder ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR11$DIR12/${fgred}$foldername${normal}"`
	          #echo -e "Creating folder $foldername ........." && sleep 1
	          mkdir -p $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11$DIR12/$foldername
			  echo -e "${blink}${menu}Going to previuse folder ....${normal}" 
			 # sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu11_ && break ;
    else
              menu11_ && break ;
fi
fi
}

function edit_file_ () {
unset_banner_
function read_ () {
unset_banner_
logo_lets_do_this_
 set -f 

local C1="$(printf "${menu}Enter file name you wish to edit: ${normal}\n")"
echo && read -e -p "$C1" filename
echo -e "\n\n"
echo -e "\nHow to use VI editor\n"
echo -e "\n1. Start edit press [ ${fgred}i${normal} ]"
echo -e "2. Exit and SAVE file press [ ${fgred}esc${normal} ] and then type [ ${fgred}:wq${normal} ]"
echo -e "3. Exit without SAVE type [ ${fgred}esc${normal} ] an then type [ ${fgred}:q${normal} ] or [ ${fgred}:q!${normal} ]"
local C3="$(printf "${menu}Press [ Enter ] to continue .... ${normal}\n")"
echo && read -e -p "$C3" ""
export filename=$filename


#local C2="$(printf "${menu}New file ${number}"$filename"${menu} will be created please confirm (${fgred}y${menu}/n) or [ ${fgred}Enter${menu} ]: ${normal}\n")"
#echo && read -e -p "$C2" choice
export filename=$filename
}	       
#Menu 0
if [ "$selector" == "0" ] ; 
  then
export DIR1=`echo "/${menu0_main[$counter]}"  | awk '{print $1}'`
PATH1=/
read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
	if [ -n "$filename" ];
     	then
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just changed file ${green}/${fgred}$filename${normal}"`
	          ##echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR /$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
              menu0_ && break ; 
        else
              menu0_ && break ;
fi
fi
#Menu 1
if [ "$selector" == "1" ] ; 
  then
	export DIR2=`echo "/${menu0_main1[$counter]}" | awk '{print $1}'`
read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just changed file ${green}$DIR1/${fgred}$filename${normal}"`
	          ##echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
		      menu0_ && break ;
    else
              menu0_ && break ;
fi
fi
#Menu 2
if [ "$selector" == "2" ] ; 
  then
	export DIR3=`echo "/${menu0_main2[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just changed file ${green}$DIR1$DIR2/${fgred}$filename${normal}"`
	          ##echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
		      menu1_ && break ;
    else
              menu1_ && break ;
fi
fi
#Menu 3
if [ "$selector" == "3" ] ; 
  then
	export DIR4=`echo "/${menu0_main3[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just changed file ${green}$DIR1$DIR2$DIR3/${fgred}$filename${normal}"`
	          ##echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
		      menu2_ && break ;
    else
              menu2_ && break ;
fi
fi
#Menu 4
if [ "$selector" == "4" ] ; 
  then
	export DIR5=`echo "/${menu0_main4[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just changed file ${green}$DIR1$DIR2$DIR3$DIR4/${fgred}$filename${normal}"`
	          ##echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 2
fi
		      menu3_  && break ;
    else
              menu3_  && break ;
fi
fi
#Menu 5
if [ "$selector" == "5" ] ; 
  then 
	export DIR6=`echo "/${menu0_main5[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just changed file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5/${fgred}$filename${normal}"`
	          ##echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 2
fi
		      menu4_ && break ;
    else
              menu4_ && break ;
fi
fi
#Menu 6
if [ "$selector" == "6" ] ; 
  then 
	export DIR7=`echo "/${menu0_main6[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just changed file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/${fgred}$filename${normal}"`
	          ##echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 2
fi
		      menu5_ && break ;
    else
              menu5_ && break ;
fi
fi
#Menu 7
if [ "$selector" == "7" ] ; 
  then
	export DIR8=`echo "/${menu0_main7[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just changed file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/${fgred}$filename${normal}"`
	          ##echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu6_ && break ;
    else
              menu6_ && break ;
fi
fi
#Menu 8
if [ "$selector" == "8" ] ; 
  then
	export DIR9=`echo "/${menu0_main8[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just changed file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/${fgred}$filename${normal}"`
	          ##echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu7_ && break ;
    else
              menu7_ && break ;
fi
fi
#Menu 9
if [ "$selector" == "9" ] ; 
  then
	export DIR10=`echo "/${menu0_main9[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just changed file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/${fgred}$filename${normal}"`
	          ##echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu8_ && break ;
    else
              menu8_ && break ;
fi
fi
#Menu 10
if [ "$selector" == "10" ] ; 
  then
	export DIR11=`echo "/${menu0_main10[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just changed file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/${fgred}$filename${normal}"`
	          ##echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu9_ && break ;
    else
              menu9_ && break ;
fi
fi
#Menu 11
if [ "$selector" == "11" ] ; 
  then
	export DIR12=`echo "/${menu0_main11[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just changed file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR11/${fgred}$filename${normal}"`
	          ##echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu10_ && break ;
    else
              menu10_ && break ;
fi
fi
#Menu 12
if [ "$selector" == "12" ] ; 
  then
	export DIR12=`echo "/${menu0_main12[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just changed file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR11$DIR12/${fgred}$filename${normal}"`
	          ##echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11$DIR12/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			 # sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu11_ && break ;
    else
              menu11_ && break ;
fi
fi
}

function create_file_ () {
unset_banner_
function read_ () {
logo_lets_do_this_
 set -f 

local C1="$(printf "${menu}Enter new file name you wish to create: ${normal}\n")"
echo && read -e -p "$C1" filename
if [ -z "$filename" ] || [ "$filename" == "" ];
		then
		empety_chk_
		fi
local C2="$(printf "${menu}New file ${number}"$filename"${menu} will be created please confirm (${fgred}y${menu}/n) or [ ${fgred}Enter${menu} ]: ${normal}\n")"
echo && read -e -p "$C2" choice
# if [ -z "$choice" ] || [ "$choice" == "" ];
		# then
		# empety_chk_
		# fi
echo -e "\n\n"
echo -e "\nHow to use VI editor\n"
echo -e "\n1. Start edit press [ ${fgred}i${normal} ]"
echo -e "2. Exit and SAVE file press [ ${fgred}esc${normal} ] and then type [ ${fgred}:wq${normal} ]"
echo -e "3. Exit without SAVE type [ ${fgred}esc${normal} ] an then type [ ${fgred}:q${normal} ] or [ ${fgred}:q!${normal} ]"
local C3="$(printf "${menu}Press [ Enter ] to continue .... ${normal}\n")"
echo && read -e -p "$C3" ""
export filename=$filename
}	       
#Menu 0
if [ "$selector" == "0" ] ; 
  then
export DIR1=`echo "/${menu0_main[$counter]}" | awk '{print $1}'`
PATH1=/
read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
	if [ -n "$filename" ];
     	then
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new file ${green}/${fgred}$filename${normal}"`
	          #echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR /$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
              menu0_ && break ; 
        else
              menu0_ && break ;
fi
fi
#Menu 1
if [ "$selector" == "1" ] ; 
  then
	export DIR2=`echo "/${menu0_main1[$counter]}" | awk '{print $1}'`
read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new file ${green}$DIR1/${fgred}$filename${normal}"`
	          #echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
		      menu0_ && break ;
    else
              menu0_ && break ;
fi
fi
#Menu 2
if [ "$selector" == "2" ] ; 
  then
	export DIR3=`echo "/${menu0_main2[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new file ${green}$DIR1$DIR2/${fgred}$filename${normal}"`
	          #echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
		      menu1_ && break ;
    else
              menu1_ && break ;
fi
fi
#Menu 3
if [ "$selector" == "3" ] ; 
  then
	export DIR4=`echo "/${menu0_main3[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new file ${green}$DIR1$DIR2$DIR3/${fgred}$filename${normal}"`
	          #echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
		      menu2_ && break ;
    else
              menu2_ && break ;
fi
fi
#Menu 4
if [ "$selector" == "4" ] ; 
  then
	export DIR5=`echo "/${menu0_main4[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new file ${green}$DIR1$DIR2$DIR3$DIR4/${fgred}$filename${normal}"`
	          #echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 2
fi
		      menu3_  && break ;
    else
              menu3_  && break ;
fi
fi
#Menu 5
if [ "$selector" == "5" ] ; 
  then 
	export DIR6=`echo "/${menu0_main5[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5/${fgred}$filename${normal}"`
	          #echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 2
fi
		      menu4_ && break ;
    else
              menu4_ && break ;
fi
fi
#Menu 6
if [ "$selector" == "6" ] ; 
  then 
	export DIR7=`echo "/${menu0_main6[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/${fgred}$filename${normal}"`
	          #echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 2
fi
		      menu5_ && break ;
    else
              menu5_ && break ;
fi
fi
#Menu 7
if [ "$selector" == "7" ] ; 
  then
	export DIR8=`echo "/${menu0_main7[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/${fgred}$filename${normal}"`
	          #echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu6_ && break ;
    else
              menu6_ && break ;
fi
fi
#Menu 8
if [ "$selector" == "8" ] ; 
  then
	export DIR9=`echo "/${menu0_main8[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/${fgred}$filename${normal}"`
	          #echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu7_ && break ;
    else
              menu7_ && break ;
fi
fi
#Menu 9
if [ "$selector" == "9" ] ; 
  then
	export DIR10=`echo "/${menu0_main9[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/${fgred}$filename${normal}"`
	          #echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu8_ && break ;
    else
              menu8_ && break ;
fi
fi
#Menu 10
if [ "$selector" == "10" ] ; 
  then
	export DIR11=`echo "/${menu0_main10[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/${fgred}$filename${normal}"`
	          #echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu9_ && break ;
    else
              menu9_ && break ;
fi
fi
#Menu 11
if [ "$selector" == "11" ] ; 
  then
	export DIR12=`echo "/${menu0_main11[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR11/${fgred}$filename${normal}"`
	          #echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu10_ && break ;
    else
              menu10_ && break ;
fi
fi
#Menu 12
if [ "$selector" == "12" ] ; 
  then
	export DIR12=`echo "/${menu0_main12[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$filename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just create new file ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR11$DIR12/${fgred}$filename${normal}"`
	          #echo -e "Creating file $filename ........." && sleep 1
	          $EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11$DIR12/$filename
			  echo -e "${blink}${menu}Going to previuse file ....${normal}" 
			 # sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu11_ && break ;
    else
              menu11_ && break ;
fi
fi
}

function cat_ () {
clear
logo_lets_do_this_
 set -f 

printf "${menu}Last search .....${normal}\n\n"
local COUNT=`cat -b $CATTMP1 | wc -l`
n=75 
if [ "$COUNT" -gt "$n" ];then
cat -b $CATTMP1 | more
pause_
else
cat -b $CATTMP1
pause_
fi
menu0_ 
}

function rename_ () {
unset_banner_
function read_ () {
logo_lets_do_this_
 set -f 
 
CURDIR=`ls $lsopt $PATH1 -C -1`
local C1="$(printf "${menu}\tEnter OLD file or folder name\n\tyou wish to rename[${normal}oldname${menu}]: ${normal}\n")"
echo && read -e -p "$C1" oldfilename
 if [ -z "$oldfilename" ] || [ "$oldfilename" == "" ];
		then
		empety_chk_
		fi
local C1="$(printf "${menu}Enter NEW name: ${normal}\n")"
echo && read -e -p "$C1" newfilename
# if [ -z "$newfilename" ] || [ "$newfilename" == "" ];
		# then
		# empety_chk_
		# fi
local C2="$(printf "${menu}Old item ${number}"$oldfilename"${menu} will be renamed ${number}"$newfilename"${menu} please confirm (${fgred}y${menu}/n) or [ ${fgred}Enter${menu} ]: ${normal}\n")"
echo && read -e -p "$C2" choice
export oldfilename=$oldfilename
}	       
#Menu 0
if [ "$selector" == "0" ] ; 
  then
export DIR1=`echo "/${menu0_main[$counter]}" | awk '{print $1}'`
PATH1=/
read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
	if [ -n "$oldfilename" ];
     	then
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just ranamed  ${number}$PATH${green}$oldfilename${normal} ${menu}to ${green}$newfilename${normal}"`
	          #echo -e "Creating file $oldfilename ........." && sleep 1
	          mv /$oldfilename $PATH1/$newfilename
			  echo -e "${blink}${menu}root dir ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
              menu0_ && break ; 
        else
              menu0_ && break ;
fi
fi
#Menu 1
if [ "$selector" == "1" ] ; 
  then
	export DIR2=`echo "/${menu0_main1[$counter]}" | awk '{print $1}'`
read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$oldfilename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just ranamed  ${number}$DIR1/${green}${green}$oldfilename${normal} ${menu}to ${green}$newfilename${normal}"`
	          #echo -e "Creating file $oldfilename ........." && sleep 1
	          mv $DIR1/$oldfilename $DIR1/$newfilename
			  echo -e "${blink}${menu}root dir ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
		      menu0_ && break ;
    else
              menu0_ && break ;
fi
fi
#Menu 2
if [ "$selector" == "2" ] ; 
  then
	export DIR3=`echo "/${menu0_main2[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$oldfilename" ];
     	then
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just ranamed  ${number}$DIR1$DIR2/${green}${green}$oldfilename${normal} ${menu}to ${green}$newfilename${normal}"`
	          #echo -e "Creating file $oldfilename ........." && sleep 1
	          mv $DIR1$DIR2/$oldfilename $DIR1$DIR2/$newfilename
			  echo -e "${blink}${menu}root dir ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
		      menu1_ && break ;
    else
              menu1_ && break ;
fi
fi
#Menu 3
if [ "$selector" == "3" ] ; 
  then
	export DIR4=`echo "/${menu0_main3[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$oldfilename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just ranamed  ${number}$DIR1$DIR2$DIR3/${green}${green}$oldfilename${normal} ${menu}to ${green}$newfilename${normal}"`
	          #echo -e "Creating file $oldfilename ........." && sleep 1
	          mv $DIR1$DIR2$DIR3/$oldfilename $DIR1$DIR2$DIR3/$newfilename
			  echo -e "${blink}${menu}root dir ....${normal}" 
			  #sleep 1
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 1
fi
		      menu2_ && break ;
    else
              menu2_ && break ;
fi
fi
#Menu 4
if [ "$selector" == "4" ] ; 
  then
	export DIR5=`echo "/${menu0_main4[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$oldfilename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just ranamed  ${number}$DIR1$DIR2$DIR3$DIR4/${green}${green}$oldfilename${normal} ${menu}to ${green}$newfilename${normal}"`
	          #echo -e "Creating file $oldfilename ........." && sleep 1
	          mv $DIR1$DIR2$DIR3$DIR4/$oldfilename $DIR1$DIR2$DIR3$DIR4/$newfilename
			  echo -e "${blink}${menu}root dir ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 2
fi
		      menu3_  && break ;
    else
              menu3_  && break ;
fi
fi
#Menu 5
if [ "$selector" == "5" ] ; 
  then 
	export DIR6=`echo "/${menu0_main5[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$oldfilename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just ranamed  ${number}$DIR1$DIR2$DIR3$DIR4$DIR5/${green}${green}$oldfilename${normal} ${menu}to ${green}$newfilename${normal}"`
	          #echo -e "Creating file $oldfilename ........." && sleep 1
	          mv $DIR1$DIR2$DIR3$DIR4$DIR5/$oldfilename $DIR1$DIR2$DIR3$DIR4$DIR5/$newfilename
			  echo -e "${blink}${menu}root dir ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 2
fi
		      menu4_ && break ;
    else
              menu4_ && break ;
fi
fi
#Menu 6
if [ "$selector" == "6" ] ; 
  then 
	export DIR7=`echo "/${menu0_main6[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$oldfilename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just ranamed  ${number}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/${green}${green}$oldfilename${normal} ${menu}to ${green}$newfilename${normal}"`
	          #echo -e "Creating file $oldfilename ........." && sleep 1
	          mv $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/$oldfilename $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/$newfilename
			  echo -e "${blink}${menu}root dir ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... Exiting.${normal}"
			  sleep 2
fi
		      menu5_ && break ;
    else
              menu5_ && break ;
fi
fi
#Menu 7
if [ "$selector" == "7" ] ; 
  then
	export DIR8=`echo "/${menu0_main7[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$oldfilename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just ranamed  ${number}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/${green}${green}$oldfilename${normal} ${menu}to ${green}$newfilename${normal}"`
	          #echo -e "Creating file $oldfilename ........." && sleep 1
	          mv $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR6$DIR7/$oldfilename $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR6$DIR7/$newfilename
			  echo -e "${blink}${menu}root dir ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu6_ && break ;
    else
              menu6_ && break ;
fi
fi
#Menu 8
if [ "$selector" == "8" ] ; 
  then
	export DIR9=`echo "/${menu0_main8[$counter]}"`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$oldfilename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just ranamed  ${number}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/${green}${green}$oldfilename${normal} ${menu}to ${green}$newfilename${normal}"`
	          #echo -e "Creating file $oldfilename ........." && sleep 1
	          mv $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/$oldfilename $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/$newfilename
			  echo -e "${blink}${menu}root dir ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu7_ && break ;
    else
              menu7_ && break ;
fi
fi
#Menu 9
if [ "$selector" == "9" ] ; 
  then
	export DIR10=`echo "/${menu0_main9[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$oldfilename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just ranamed  ${number}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/${green}${green}$oldfilename${normal} ${menu}to ${green}$newfilename${normal}"`
	          #echo -e "Creating file $oldfilename ........." && sleep 1
	          mv $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/$oldfilename $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/$newfilename
			  echo -e "${blink}${menu}root dir ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu8_ && break ;
    else
              menu8_ && break ;
fi
fi
#Menu 10
if [ "$selector" == "10" ] ; 
  then
	export DIR11=`echo "/${menu0_main10[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$oldfilename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just ranamed  ${number}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/${green}${green}$oldfilename${normal} ${menu}to ${green}$newfilename${normal}"`
	          #echo -e "Creating file $oldfilename ........." && sleep 1
	          mv $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/$oldfilename $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/$newfilename
			  echo -e "${blink}${menu}root dir ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu9_ && break ;
    else
              menu9_ && break ;
fi
fi
#Menu 11
if [ "$selector" == "11" ] ; 
  then
	export DIR12=`echo "/${menu0_main11[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$oldfilename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just ranamed  ${number}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR11/${blink}${green}$oldfilename${normal} ${menu}to ${green}$newfilename${normal}"`
	          #echo -e "Creating file $oldfilename ........." && sleep 1
	          mv $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11/$oldfilename $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11/$newfilename 
			  echo -e "${blink}${menu}root dir ....${normal}" 
			  #sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu10_ && break ;
    else
              menu10_ && break ;
fi
fi
#Menu 12
if [ "$selector" == "12" ] ; 
  then
	export DIR12=`echo "/${menu0_main12[$counter]}" | awk '{print $1}'`
    read_
if [[ "$choice" == "y" ]] || [[ "$choice" == "" ]] ;
	then
if [ -n "$oldfilename" ];
     	then 
		      echo
		      export  BANNER=`echo -e "Dear "$whoami", \nYou just ranamed  ${number}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR11$DIR12/${green}${green}$oldfilename${normal} ${menu}to ${green}$newfilename${normal}"`
	          #echo -e "Creating file $oldfilename ........." && sleep 1
	          mv $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11$DIR12/$oldfilename $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11$DIR12/$newfilename
			  echo -e "${blink}${menu}root dir ....${normal}" 
			 # sleep 2
		else
		      echo -e "${blink}Nothing to create .... ${menu}Exiting.${normal}"
			  sleep 3
fi
		      menu11_ && break ;
    else
              menu11_ && break ;
fi
fi
}

function clone_ () {
unset_banner_

 set -f 
#Menu 0 mkdir -p $path2clon1 && cp -R $path2clon/. $path2clon1 
if [ "$selector" == "0" ] ; 
   then
        echo
		
		
echo -e "\t${menu}Enter target${menu} like : ${normal}/var/www/${number}my-site-clone/${menu} ${menu}${normal}"
echo -e "\t${menu}The script will create directoy [${number}my-site-clone${menu}]${normal} ${normal}"
echo -e "\t${menu}[${number}Enter${menu}] to skip${normal} ... ${normal}\n"
          export DIR1=`echo "/${menu0_main[$counter]}" | awk '{print $1}'`
          local C1="$(printf "\t${menu}Clone ${fgred}$DIR1${menu} to target${normal}: ${normal}\n")"
	      read -e -p "$C1" path2clon1
if [ "$path2clon1" == "q" ] || [ "$path2clon1" == "" ] || [ "$path2clon1" == "" ]; 
   then
          menu0_
fi
	      mkdir -p $path2clon1 &&  cp -R $DIR1/. $path2clon1
	       	echo
	        echo -e "${blink}Cloning in progres ..... ${normal}"
	        sleep 1
			export  BANNER=`echo -e "Dear "$whoami", \nYou just clone ${fgred}$DIR1${fgred}${menu0_main0[$counter]}${normal}"`
            menu0_
 
fi
#Menu 1
if [ "$selector" == "1" ] ; 
   then
        echo
				echo -e "\n\n${menu}Example: ${normal}"
echo -e "\t${menu}Enter ${number}target${menu}: ${normal}/var/www/my-site-clone${fgred}/${menu} or ${normal} var/www/my-site-clone${menu}${normal}\n"

        export DIR2=`echo "$DIR1/${menu0_main1[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}Clone ${fgred}$DIR2${menu} to target: ${normal}\n")"
	    read -e -p "$C1" path2clon1
 if [ "$path2clon1" == "q" ] || [ "$path2clon1" == "" ] ; 
   then
          menu1_
fi
	    mkdir -p $path2clon1 &&  cp -R $DIR2/. $path2clon1
		echo
	    echo -e "${blink}Cloning in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just clone ${green}$DIR1${fgred}/${menu0_main1[$counter]}${normal}"`
         menu0_ && break;

fi
#Menu 2
if [ "$selector" == "2" ] ; 
   then
    echo
					echo -e "\n\n${menu}Example: ${normal}"
echo -e "\t${menu}Enter ${number}target${menu}: ${normal}/var/www/my-site-clone${fgred}/${menu} or ${normal} var/www/my-site-clone${menu}${normal}\n"

        export DIR3=`echo "/${menu0_main2[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}Clone $DIR1$DIR2${fgred}$DIR3${menu} to target: ${normal}\n")"
	    read -e -p "$C1" path2clon1
 if [ "$path2clon1" == "q" ] || [ "$path2clon1" == "" ] ; 
   then
          menu2_
fi
	    mkdir -p $path2clon1 &&  cp -R $DIR1$DIR2$DIR3/. $path2clon1
		echo
	    echo -e "${blink}Cloning in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just clone ${green}$DIR1$DIR2/${fgred}${menu0_main2[$counter]} ${normal}"`
         menu1_ && break;

fi
#Menu 3
if [ "$selector" == "3" ] ; 
   then
       echo
	   				echo -e "\n\n${menu}Example: ${normal}"
echo -e "\t${menu}Enter ${number}target${menu}: ${normal}/var/www/my-site-clone${fgred}/${menu} or ${normal} var/www/my-site-clone${menu}${normal}\n"

        export DIR4=`echo "/${menu0_main3[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}Clone $DIR1$DIR2$DIR3${fgred}$DIR4${menu} to target: ${normal}\n")"
	    read -e -p "$C1" path2clon1
 if [ "$path2clon1" == "q" ] || [ "$path2clon1" == "" ] ; 
   then
          menu3_
fi
	    mkdir -p $path2clon1 &&  cp -R $DIR1$DIR2$DIR3$DIR4/. $path2clon1
		echo
	    echo -e "${blink}Cloning in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just clone ${green}$DIR1$DIR2$DIR3${fgred}$DIR4${normal}"`
         menu2_ && break;

fi
#Menu 4
if [ "$selector" == "4" ] ; 
   then
 echo
 				echo -e "\n\n${menu}Example: ${normal}"
echo -e "\t${menu}Enter ${number}target${menu}: ${normal}/var/www/my-site-clone${fgred}/${menu} or ${normal} var/www/my-site-clone${menu}${normal}\n"

        export DIR5=`echo "/${menu0_main4[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}Clone $DIR1$DIR2$DIR3$$DIR4${fgred}$DIR5${menu} to target: ${normal}\n")"
	    read -e -p "$C1" path2clon1
 if [ "$path2clon1" == "q" ] || [ "$path2clon1" == "" ] ; 
   then
          menu4_
fi
	    mkdir -p $path2clon1 &&  cp -R $DIR1$DIR2$DIR3$DIR4$DIR5/. $path2clon1
		echo
	    echo -e "${blink}Cloning in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just clone ${green}$DIR1$DIR2$DIR3$DIR4${fgred}$DIR5${normal}"`
         menu3_ && break;

fi

#Menu 5
if [ "$selector" == "5" ] ; 
   then
echo
				echo -e "\n\n${menu}Example: ${normal}"
echo -e "\t${menu}Enter ${number}target${menu}: ${normal}/var/www/my-site-clone${fgred}/${menu} or ${normal} var/www/my-site-clone${menu}${normal}\n"

        export DIR6=`echo "/${menu0_main5[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}Clone $DIR1$DIR2$DIR3$DIR4$DIR5${fgred}$DIR6${menu} to target: ${normal}\n")"
	    read -e -p "$C1" path2clon1
 if [ "$path2clon1" == "q" ] || [ "$path2clon1" == "" ] ; 
   then
          menu5_
fi
	    mkdir -p $path2clon1 &&  cp -R $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/. $path2clon1
		echo
	    echo -e "${blink}Cloning in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just clone ${green}$DIR1$DIR2$DIR3$DIR4$DIR5${fgred}$DIR6${normal}"`
         menu4_ && break;

fi
#Menu 6
if [ "$selector" == "6" ] ; 
   then
echo
				echo -e "\n\n${menu}Example: ${normal}"
echo -e "\t${menu}Enter ${number}target${menu}: ${normal}/var/www/my-site-clone${fgred}/${menu} or ${normal} var/www/my-site-clone${menu}${normal}\n"

        export DIR7=`echo "/${menu0_main6[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}Clone $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6${fgred}$DIR7${menu} to target: ${normal}\n")"
	    read -e -p "$C1" path2clon1
 if [ "$path2clon1" == "q" ] || [ "$path2clon1" == "" ] ; 
   then
          menu6_
fi
	    mkdir -p $path2clon1 &&  cp -R $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/. $path2clon1
		echo
	    echo -e "${blink}Cloning in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just clone ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6${fgred}$DIR7${normal}"`
         menu5_ && break;

fi

#Menu 6
if [ "$selector" == "7" ] ; 
   then
echo
				echo -e "\n\n${menu}Example: ${normal}"
echo -e "\t${menu}Enter ${number}target${menu}: ${normal}/var/www/my-site-clone${fgred}/${menu} or ${normal} var/www/my-site-clone${menu}${normal}\n"

        export DIR8=`echo "/${menu0_main7[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}Clone $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7${fgred}$DIR8${menu} to target: ${normal}\n")"
	    read -e -p "$C1" path2clon1
 if [ "$path2clon1" == "q" ] || [ "$path2clon1" == "" ] ; 
   then
          menu7_
fi
	    mkdir -p $path2clon1 &&  cp -R $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/. $path2clon1
		echo
	    echo -e "${blink}Cloning in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just clone ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7${fgred}$DIR8${normal}"`
         menu6_ && break;

fi

#Menu 8
if [ "$selector" == "8" ] ; 
   then
echo
				echo -e "\n\n${menu}Example: ${normal}"
echo -e "\t${menu}Enter ${number}target${menu}: ${normal}/var/www/my-site-clone${fgred}/${menu} or ${normal} var/www/my-site-clone${menu}${normal}\n"

        export DIR9=`echo "/${menu0_main8[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}Clone $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8${fgred}$DIR9${menu} to target: ${normal}\n")"
	    read -e -p "$C1" path2clon1
 if [ "$path2clon1" == "q" ] || [ "$path2clon1" == "" ] ; 
   then
          menu8_
fi
	    mkdir -p $path2clon1 &&  cp -R $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/. $path2clon1
		echo
	    echo -e "${blink}Cloning in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just clone ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8${fgred}$DIR9${normal}"`
         menu7_ && break;

fi

#Menu 9
if [ "$selector" == "9" ] ; 
   then
echo
				echo -e "\n\n${menu}Example: ${normal}"
echo -e "\t${menu}Enter ${number}target${menu}: ${normal}/var/www/my-site-clone${fgred}/${menu} or ${normal} var/www/my-site-clone${menu}${normal}\n"

        export DIR10=`echo "/${menu0_main9[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}Clone $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9${fgred}$DIR10${menu} to target: ${normal}\n")"
	    read -e -p "$C1" path2clon1
 if [ "$path2clon1" == "q" ] || [ "$path2clon1" == "" ] ; 
   then
          menu8_
fi
	    mkdir -p $path2clon1 &&  cp -R $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/. $path2clon1
		echo
	    echo -e "${blink}Cloning in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just clone ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9${fgred}$DIR10${normal}"`
         menu8_ && break;
fi
#Menu 10
if [ "$selector" == "10" ] ; 
   then
echo
				echo -e "\n\n${menu}Example: ${normal}"
echo -e "\t${menu}Enter ${number}target${menu}: ${normal}/var/www/my-site-clone${fgred}/${menu} or ${normal} var/www/my-site-clone${menu}${normal}\n"

        export DIR11=`echo "/${menu0_main10[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}Clone $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10${fgred}$DIR11${menu} to target: ${normal}\n")"
	    read -e -p "$C1" path2clon1
 if [ "$path2clon1" == "q" ] || [ "$path2clon1" == "" ] ; 
   then
          menu9_
fi
	    mkdir -p $path2clon1 &&  cp -R $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11/. $path2clon1
		echo
	    echo -e "${blink}Cloning in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just clone ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10${fgred}$DIR11${normal}"`
         menu9_ && break;

fi
#Menu 11
if [ "$selector" == "11" ] ; 
   then
echo
				echo -e "\n\n${menu}Example: ${normal}"
echo -e "\t${menu}Enter ${number}target${menu}: ${normal}/var/www/my-site-clone${fgred}/${menu} or ${normal} var/www/my-site-clone${menu}${normal}\n"

        export DIR12=`echo "/${menu0_main11[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}Clone $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11${fgred}$DIR12${menu} to target: ${normal}\n")"
	    read -e -p "$C1" path2clon1
		if [ "$path2clon1" == "q" ] || [ "$path2clon1" == "" ] ; 
   then
          menu10_
fi
	    mkdir -p $path2clon1 &&  cp -R $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11$DIR12/. $path2clon1
		echo
	    echo -e "${blink}Cloning in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", \nYou just clone ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11${fgred}$DIR12${normal}"`
         menu10_ && break;

fi
}



#FreePBX Asterisk Log Parser
function border_logparser_wrong_ () {
IFS=$'\n' 
echo
echo -e "                        ${blink}${number}====>${normal} Please check and fix extensions ASAP!!!  ${blink}${number}<====${normal} "
FULL111=`tail -n 5000 $FULL1 |  awk '/failed for/ {print $12, $13, $9,  $7 ,"",  $10  } ' | sed -r '/failed/ s/^(.*)$/for \1/g' |  grep -v NoOp | sed  's/for/Failed ==>/g' | sed  's/Wrong password //g' |  sed "s/:5060'/]/g" | sed 's/"/X/g'  | sed -e 's/\(X\).*\(<sip:\)/\1\2/' | sed "s/'X<sip:/From Ext-[/g" | sed "s/> '/> From IP--[/g" | sed "s/>'  '/] From IP-[/g" | sed 's/@/] Host-[/g' |  sed 's/- <sip:/ From Ext-[/g' |  sed "s/:5060>'/]/g" | sed 's/X<sip:/ From Ext-[/g' | sed 's/:.*$/:/g' | sed 's/  failed/]/g'  | sed "s/'X/[/g"  | sed 's/:/]/g'  | sort | uniq  `
longstr=`(echo "$FULL111" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
#echo -e "\t${menu}                Users              ${normal}\n"
echo -e "\t${menu1}+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t${menu1}|${normal} $line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
   echo -e "  ${menu1}|${normal}"
 else
  echo -e "  ${menu1}|${normal}"
 fi
done < <(printf '%s\n' "$FULL111")
echo -e "\t${menu1}+$edge---+${normal}"

}

function monitor_pbx_title_ () {
    clear && echo && clear
	echo -e "\t\t${menu}${menu1}------------------------------------------------------------${normal}"
	echo -e "\t\t${menu}${menu1}                      ${bgwhite}${menu}Monitor PBX Log${menu}${menu1}                       ${normal}"
	echo -e "\t\t${menu}${menu1}                                                            ${normal}"
	echo -e "\t\t${menu}${menu1}                      ${black}${blink}====>${normal}${menu}${menu1}FindMe${menu1}${black}${blink}<====${normal}${menu1}                      ${normal}"
	echo -e "\t\t${menu}${menu1}------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	unset TIMEMENUBANNER
} 

function border_logparser_ () {
IFS=$'\n' 

FULL11=`cat /tmp/findme/pbxoutput.log | uniq | more `
longstr=`(echo "$FULL11" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
#echo -e "\t${menu}                Users              ${normal}\n"
echo -e "\t${menu1}+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t${menu1}|${normal} $line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
   echo -e "  ${menu1}|${normal}"
 else
  echo -e "  ${menu1}|${normal}"
 fi
done < <(printf '%s\n' "$FULL11")
echo -e "\t${menu1}+$edge---+${normal}"

}

function main_pbx_logparser_ () {
 
function parse_log_asterisk_ () {
IFS=$'\n' 

asterisktmplog=/tmp/findme/pbxoutput.log
sed -i '/from-trunk/i\             \n------------------Incomming Call log------------------\n******************************************************' $asterisktmplog
sed -i '/language/d' $asterisktmplog
sed -n -i  '/Wait_For/{x;n;d;};1h;1!{x;p;};${x;p;}' $asterisktmplog
sed -n -i  '/OUTBOUND_GROUP/{x;n;};1h;1!{x;p;};${x;p;}' $asterisktmplog   #Delete line before and after pattern
sed -i '/"")/,+1 d' $asterisktmplog #remove whole line if match pattern
sed -i '/?start")/d' $asterisktmplog 
sed -i "s/]//g" $asterisktmplog
sed -i 's/in]//g' $asterisktmplog
sed -i 's/in//g' $asterisktmplog
sed -i 's+__RECORD_ID=SIP/+Incoming Trunk_______________[+g' $asterisktmplog
sed -i '/"0?customtrunk")/d' $asterisktmplog 
sed -i '/"AMPUSERCIDNAME=")/d' $asterisktmplog
sed -i '/startrec/d' $asterisktmplog
sed -i '/Hidden/d' $asterisktmplog                                              #If pattern matche remove whole line
sed -i "s/]//g" $asterisktmplog
sed -i '/php/d' $asterisktmplog                                                 #Find pattern and delete whole line
sed -i "s/'//g" $asterisktmplog
sed -i 's/simple_bridge/Call reached destination!!!/g' $asterisktmplog
sed -i 's/__DIRECTION=/Direction____________________[/g' $asterisktmplog
sed -i 's/"CONNECTEDLINE(name)=/Outbound CID (Rep Number)____[/g' $asterisktmplog
sed -i 's/)")/]/g' $asterisktmplog
sed -i 's/")/]/g' $asterisktmplog
sed -i 's/,1//' $asterisktmplog
sed -i 's/,2//' $asterisktmplog
sed -i "s/,//g" $asterisktmplog
sed -i 's+"CONNECTEDLINE(numi)=+In call belong to ext_________[+g' $asterisktmplog
sed -i 's/start/User dialing now ..../g' $asterisktmplog
sed -i 's/(CONNECTEDLINE(numi)=/Destination (Client Number)___[/g' $asterisktmplog
sed -i 's/(CONNECTEDLINE(namei)=CID:/Outbound User Number__________[/g' $asterisktmplog
sed -i 's/"//g' $asterisktmplog
sed -i 's/TECH=/Driver________________________[/g' $asterisktmplog
sed -i "/MASTER_CHANNEL(CFIGNORE)=]/d" $asterisktmplog
sed -i 's/MASTER_CHANNEL(FORWARD_CONTEXT)=/Called from Context__________[/g' $asterisktmplog
sed -i "s/0?Set(MASTER_CHANNEL(CONNECTEDLINE(num))=/Call answared by ext_________[/g" $asterisktmplog
sed -i "/CONNECTEDLINE(name))/ s/$/]/" $asterisktmplog                                                        #find pattern and append somthing to end of line
sed -i "/In call belong to user/ s/$/]/" $asterisktmplog 
sed -i "s/0?Set(MASTER_CHANNEL(CONNECTEDLINE(name))=/Call answared by user________[/g" $asterisktmplog
sed -i 's/RECMODE=/Record Mode___________________[/g' $asterisktmplog
sed -i 's/(TRUNKCIDOVERRIDE=/User Caller ID_______________[/g' $asterisktmplog
sed -i 's/AMPUSERCID=/Now calling ext_______________[/g' $asterisktmplog
sed -i 's/AMPUSERCIDNAME=/Now calling user______________[/g' $asterisktmplog
sed -i 's/from-trunk/Incomming Client Number______[/g' $asterisktmplog
sed -i "/Now calling user/i\      \n         \n------------------Outgoing Call log------------------\n******************************************************" $asterisktmplog   #Add line after before pattern match #Add lane after pattern is mattch
sed -i '/Now calling user/ s/$/]/' $asterisktmplog 
sed -i "s+0?Set++g" $asterisktmplog
sed -i "s+]]+]+g" $asterisktmplog
sed -i 's/1?Set//g' $asterisktmplog
sed -i 's+custom=IAX2/+Outbound Trunk________________[+g' $asterisktmplog
sed -i 's+custom=SIP/+Outbound Trunk________________[+g' $asterisktmplog
sed -i 's+IVR_MSG=custom/+IVR Recording file___________[+g' $asterisktmplog
sed -i 's/completed/Call to IVR or Group_________[Answared by user]/g' $asterisktmplog
sed -i 's/on INVITE/Trunk authentication failed_[Check Trunk Conf|User|Pass] /g' $asterisktmplog
sed -i 's/503 Invalid/Dial failed maybe ____________[wrong number]/g' $asterisktmplog
sed -i 's/"s-INVALIDNMBR1")/Dial failed maybe ____________[wrong number]/g' $asterisktmplog
sed -i '/OUTBOUND_GROUP/d' $asterisktmplog 
sed -i '/__RECORD_ID=/d' $asterisktmplog
sed -i '/1?New call is starting now ....]/d' $asterisktmplog
sed -i '/0?New call is starting now ....]/d' $asterisktmplog
sed -i '/GROUP/d' $asterisktmplog && echo
sed -i 's/\(.*\RandomCID\).*/\1/g' $asterisktmplog
sed -i '/Background/d' $asterisktmplog
sed -i 's/-RandomCID/_________________[Used Random Call]/g' $asterisktmplog
sed -i 's/TRUNKCIDOVERRIDE=/Used Number from roulette_____[/g' $asterisktmplog && echo
sed -i 's/basic-bridge//g' $asterisktmplog 
sed -i 's/1)/______________[If user used any prefix]/g' $asterisktmplog 
sed -i 's/s-INVALIDNMBR]/Invalid Number________________[Please check the number]/g' $asterisktmplog 
sed -i '/CRM_DIRECTION/d' $asterisktmplog
sed -i '/to/d' $asterisktmplog
sed -i 's/ ]//g' $asterisktmplog 
sed -i 's/^\(Set\)*//' $asterisktmplog

}

function grepegreen () {
    GREP_COLOR='5;01;32'  grep --color -E -i "$1|$" $2
}

function grepered () {
    GREP_COLOR='5;01;31'  grep --color -E -i "$1|$" $2
}

 monitor_pbx_title_
 printf "\t\t   ${number}${menu}Please provide pattern you want to search [q] to quit${normal}\n"
 local C1="$(printf "\t\t   ${menu}===> : ${normal}")"
 read -e -p "$C1" FULLPBXLOG
 if [ "$FULLPBXLOG" == "q" ] || [ "$FULLPBXLOG" == "b" ] || [ "$FULLPBXLOG" == "q" ];
 then
main_menu0_
fi
 
 
T=`hostname`
H=`echo $T`
FULL1=/var/log/asterisk/full.$H
if [ -f $FULL1 ];
then 
T=`hostname`
H=`echo $T`
FULL1=/var/log/asterisk/full.$H
echo > /tmp/findme/pbxoutput.log
tail -n 1500 $FULL1 | awk '/CONNECTEDLINE|AMPUSERCID|AMPUSERCIDNAME|RECORD_ID|start|left|from-trunk-sip|TECH|custom|TRUNKCIDOVERRIDE|Random|DIRECTION|RECMODE|MASTER_CHANNEL|OUTBOUND_GROUP|INVITE|INVALIDNMBR|Invalid|Wrong/ {print $2, "|", $8, $9 }' > /tmp/findme/pbxoutput.log;
parse_log_asterisk_
else
export FULL1=/var/log/asterisk/full
echo > /tmp/findme/pbxoutput.log
tail -n 1500 $FULL1  | awk '/CONNECTEDLINE|AMPUSERCID|AMPUSERCIDNAME|RECORD_ID|start|left|from-trunk-sip|TECH|custom|TRUNKCIDOVERRIDE|Random|DIRECTION|RECMODE|MASTER_CHANNEL|OUTBOUND_GROUP|INVITE|INVALIDNMBR|Invalid|Wrong/ {print $2, "|",  $8, $9 } ' > /tmp/findme/pbxoutput.log;
parse_log_asterisk_
fi
CHKWRONGP=`tail -n 5000 $FULL1 | awk '/failed for/ {print $12, $13, $9,  $7 ,"that trying connect from IP",  $10  } ' | grep -v NoOp | sed -e 's/\("\).*\("<\)/\1\2/' | sed  "s/'//g" | sed 's/""<sip://g' | sed  's/>//g' | sed 's/:.*$/:/g' | sed 's/://g' | grep -v failed | uniq | wc -l`
if [ "$CHKWRONGP" == 0 ];
then
border_logparser_ | grepegreen $FULLPBXLOG

pause_witout_exit_
main_pbx_logparser_
else
border_logparser_ | grepegreen $FULLPBXLOG
border_logparser_wrong_ | grepered Wrong
pause_witout_exit_
main_pbx_logparser_
fi
main_pbx_logparser_
}




#CHMOD CHOWN Permissions

function custom_permission_ () {
clear && echo && clear
echo -e "\n\n\n\n\n\n\n\n\n"
#logo_lets_do_this_
logo_permissions_
sleep 1
DIRLOCATION="$(printf "[$whoami@$hostname $PWD]#")"
  			
function apply_permissions_ () {
	  
find $PERMISIONFOLDER -maxdepth 1 -type d  \! -exec stat -c '%n %a %G %U %z'  {} \; -print | uniq -w 12 | awk '{ print $5, "  |  ",  $6, "  |     ",  $2, "     |  ", $3, "  |  ", $4 "  |  ", $1  }'  > CHMODTMPLOG1
   clear && echo && clear
    custom_permission_title_
      find $PERMISIONFOLDER -type d -exec chmod 00$PERMISION777 {} \;
        find $PERMISIONFOLDER -type f -exec chmod 00$PERMISION666 {} \;
           chown $PERMISIONUSER:$PERMISIONGROUP -R $PERMISIONFOLDER
			echo -e "\n\t${under}${menu}${menu1}Folder            :${normal}${under}${green} $PERMISIONFOLDER${normal}"  
	        echo -e "\t${under}${menu}${menu1}User              :${normal}${under}${green} $PERMISIONUSER${normal}" 
		    echo -e "\t${under}${menu}${menu1}Group             :${normal}${under}${green} $PERMISIONGROUP${normal}"
		    echo -e "\t${under}${menu}${menu1}Folder Permission :${normal}${under}${green} $PERMISION777${normal}"
			echo -e "\t${under}${menu}${menu1}Files Permission  :${normal}${under}${green} $PERMISION666${normal}\n"
			 printf "\n\t${number}${bold}${menu1}${menu}Permissions before${normal}\n"
			 border_show_folder_permission_before_ |  grepe "775|777"
			 printf "\n\t${number}${bold}${menu1}${menu}Permissions after${normal}\n"
			 border_show_folder_permission_after_   |  grepe2 755
 }
  
function current_chmod_ () {
find $PERMISIONFOLDER -maxdepth 1 -type d  \! -exec stat -c '%n %a %G %U %z'  {} \; -print | uniq -w 12 | awk '{ print $5, "  |  ",  $6, "  |     ",  $2, "     |  ", $3, "  |  ", $4 "  |  ", $1  }'  > CHMODTMPLOG1
printf "\n\t${number}${menu1}Existing Permissions${normal}\n"
border_show_folder_permission_before_ |  grepe "775|777"
pause_witout_exit_
step2_
}  
               
function step1_ () {
#Step 1 Select folder
    set -f
   custom_permission_title_
	 printf "\n\n\t${number}${menu1}Step 1: ${menu}Select folder                                       ${normal}\n\n"
         logo_folder_
		    printf "\n\t${menu1}${number}${menu}Type folder name like [/var/www] or [/var/www/]             ${normal}"
	         local C1="$(printf "\n\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
               read -e -p "$C1" PERMISIONFOLDER
			   
			     if [ "$PERMISIONFOLDER" == "b" ]
				    then
				       clear && echo && clear
                          custom_permission_
						  elif [ "$PERMISIONFOLDER" == "u" ]
						  then
						   main_user_managment_samba_microsoft_
						   elif [ "$PERMISIONFOLDER" == "s" ]
						      then
						   samba_managment_
						    fi
			   if [ "$PERMISIONFOLDER" == "p" ] ; 
                   then
		             permission_
                       fi
			    exit_from_to_custom_permission_
	              if [ -d "$PERMISIONFOLDER" ] ;
                    then
				      step2_
				        else
                          clear && echo && clear
                              echo -e "\n\n\n\n\n\n\n\n\t${green}            Hi there, Please enter valid  name${normal}"
							    logo_banner_
								counter3_
                                 step1_
                         fi
						 
	             
	}		             

function step2_ () {
#Step 2	 Select user		  
   custom_permission_title_	
	 printf "\n\n\t${number}${menu1}Step 2: ${menu}Select ${blink}User${normal}${number}${menu1}${menu} Owner of Folder                        ${normal}\n\n"
       echo -e "\n\t${under}${menu}${menu1}Folder :${normal}${under}${green} $PERMISIONFOLDER${normal}\n" 		
	     border_custom_permission_users_
		  # printf "\n\t${menu}[${number}b${menu}]<----Back\n\t[${number}c${menu}] Check current folder permission               ${normal}"
	        printf "\n\t${menu1}${number}${menu}Enter username from the list                               ${normal}"
			local C22="$(printf "\n\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
              read -e -p "$C22" PERMISIONUSER
			  if [ "$PERMISIONUSER" == "p" ] ; 
                   then
		             permission_
                       fi
	            if [ "$PERMISIONUSER" == "b" ] ; 
                   then
		             step1_
					 elif [ "$PERMISIONUSER" == "c" ] ; 
                       then
					   current_chmod_
					   elif [ "$PERMISIONUSER" == "u" ];
						  then
						   main_user_managment_samba_microsoft_
						   elif [ "$PERMISIONUSER" == "s" ];
						      then
						   samba_managment_
                         fi
					       chkuser111=`cat /etc/passwd | grep  -o "\<$PERMISIONUSER\>" | wc -l`
						     if [ "$chkuser111" != 0 ] ;
						      then
							    step3_
							      else
							       clear && echo && clear
                                       echo -e "\n\n\n\n\n\n\n\n\t${green}            Hi there, Please enter valid  name${normal}"
							            logo_banner_
										 counter3_
                                          step2_
								 	       fi
									      
		}	    
	 
function step3_ () {
#Step 3 Select Group
  custom_permission_title_
    printf "\n\n\t${number}${menu1}Step 3: ${menu}Select ${blink}Group${normal}${number}${menu1}${menu} Owner of Folder                         ${normal}\n\n"
	    echo -e "\n\t${under}${menu}${menu1}Folder :${normal} ${under}${green}$PERMISIONFOLDER${normal}"  
	    echo -e "\t${under}${menu}${menu1}User   :${normal} ${under}${green}$PERMISIONUSER${normal}\n" 
	      border_custom_permission_groups_
		  #printf "\n\t${menu}[${number}b${menu}]<----Back                  ${normal}"
	        printf "\n\t${menu1}${number}${menu}Enter group of user from the list                            ${normal}"
	          local C23="$(printf "\n\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
                read -e -p "$C23" PERMISIONGROUP
	              exit_from_to_custom_permission_
                   if [ "$PERMISIONGROUP" == "b" ] ; 
                     then
		               step2_
					   elif [ "$PERMISIONGROUP" == "u" ];
						  then
						   main_user_managment_samba_microsoft_
						   elif [ "$PERMISIONGROUP" == "s" ];
						      then
						   samba_managment_
                         fi
                          chkuser112=`cat /etc/group | grep  -o "\<$PERMISIONGROUP\>" | wc -l`
						    if [ "$chkuser112" != 0 ] ;
						      then
							    step4_
							      else
							       clear && echo && clear
                                       echo -e "\n\n\n\n\n\n\n\n\t${green}            Hi there, Please enter valid  name${normal}"
							            logo_banner_
										counter3_
                                         step3_
								 	      fi

}

function step4_ () {

#Step 4
	  
	
  clear && echo && clear
   printf "\n\t${number}    ${bold}${menu1}Step 4: ${menu}Set recurcive permission for ${blink}folder${normal}         ${normal}\n"
	 permission_help_
	   echo -e "\n\t${under}${menu}${menu1}Folder :${normal} ${under}${green}$PERMISIONFOLDER${normal}"  
	   echo -e "\t${under}${menu}${menu1}User   :${normal} ${under}${green}$PERMISIONUSER${normal}" 
	   echo -e "\t${under}${menu}${menu1}Group  :${normal} ${under}${green}$PERMISIONGROUP${normal}\n"
	  # printf "\n\t${menu}[${number}b${menu}]<----Back                  ${normal}"
	   echo -e "\t${menu1}${number}${menu}Enter permissions for folder like XXX       ${normal}"
	             local C55="$(printf "\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
                  read -e -n 3 -p  "$C55" PERMISION777
				    exit_from_to_custom_permission_
				      if [[ $PERMISION777 =~ ^[+-]?[0-9]+$ ]]; 
                       then
                         echo "Input is an integer."
						   step5_
						     elif [ "$PERMISION777" == "b" ] ; 
                               then
		                         step3_
                                    else [[ $PERMISION777 =~ ^[+-]?[0-9]+\.$ ]]; 
									 clear && echo && clear
                                      echo -e "\n\n\n\n\n\n\n\n\n\n\n\t          * ${menu}Please insert valid input like ${number}755${normal} *"
									    logo_banner_
										echo
									       counter3_
									         step4_
                                               fi
			                     
						       
					 
                         
}

function step5_ () {		 
#Step 5	
 
 clear && echo && clear			 
   printf "\n\t${number}    ${bold}${menu1}Step 5: ${menu}Set recurcive permission for ${blink}files${normal}         ${normal}\n"
	 permission_help_
	  echo -e "\n\t${under}${menu}${menu1}Folder            :${normal} ${under}${green}$PERMISIONFOLDER${normal}"  
	  echo -e "\t${under}${menu}${menu1}User              :${normal} ${under}${green}$PERMISIONUSER${normal}" 
	  echo -e "\t${under}${menu}${menu1}Group             :${normal} ${under}${green}$PERMISIONUSER${normal}"
	  echo -e "\t${under}${menu}${menu1}Folder Permission :${normal} ${under}${green}$PERMISION777${normal}"
	  #printf "\n\t${menu}[${number}b${menu}]<----Back                  ${normal}"
	  echo -e "\n\t${menu1}${number}${menu}Enter permissions for files like XXX        ${normal}"
	             local C34="$(printf "\n\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
                   read -e -n 3 -p "$C34" PERMISION666
			     				    exit_from_to_custom_permission_
				      if [[ $PERMISION666 =~ ^[+-]?[0-9]+$ ]]; 
                       then
                         echo "Input is an integer."
						   step6_
						     elif [ "$PERMISION666" == "b" ] ; 
                               then
		                         step4_
                                    else [[ $PERMISION666 =~ ^[+-]?[0-9]+\.$ ]]; 
									 clear && echo && clear
                                      echo -e "\n\n\n\n\n\n\n\n\n\n\n\t          * ${menu}Please insert valid input like ${number}644${normal} *"
									    logo_banner_
									       counter3_
									         step5_
                                               fi
}

function step6_ () {
greetgusr_
check_editor_pref_
tput reset	
 clear && echo && clear
  custom_permission_title_
    printf "\n\t${number}${menu1}Step 6: ${menu}Confirm before apply                                ${normal}\n"	
	printf "\n\n\t${number}${under}${menu1}Existing${menu} permissions for:${normal}${under}${green} $PERMISIONFOLDER${normal}\n"
	echo
	        find $PERMISIONFOLDER -maxdepth 1 -type d  \! -exec stat -c '%n %a %G %U %z'  {} \; -print | uniq -w 12 | awk '{ print $5, "  |  ",  $6, "  |     ",  $2, "     |  ", $3, "  |  ", $4 "  |  ", $1  }'  > CHMODTMPLOG1
			   border_show_folder_permission_before_ |  grepe "775|777"
				 echo -e "\n\n\t${under}${number}${menu1}New${menu} recursive permissions for:${normal}${under}${green} $PERMISIONFOLDER${normal}" 
	             echo -e "\t${under}${menu}${menu1}User              :${normal}${under}${green} $PERMISIONUSER${normal}" 
		         echo -e "\t${under}${menu}${menu1}Group             :${normal}${under}${green} $PERMISIONGROUP${normal}"
	             echo -e "\t${under}${menu}${menu1}Folder Permission :${normal}${under}${green} $PERMISION777${normal}"
	             echo -e "\t${under}${menu}${menu1}Files Permission  :${normal}${under}${green} $PERMISION666${normal}\n"
	            	 

echo
local P1OPT1=`echo -e "\${number}1. ${menu}To Apply ${normal}\n"`
local P1OPT2=`echo -e "\${number}2. ${menu}Try again ${normal}"` 
local P1OPT3=`echo -e "\${number}3. ${menu}Back to main menu${normal}"` 
 

declare -a menu0_main=($P1OPT1 $P1OPT2 $P1OPT3) 
 counter=0 
 function draw_menu0_ () { 
 for i in "${menu0_main[@]}"; 
 do if [[ ${menu0_main[$counter]} == $i ]]; 
 then tput setaf 2; 
 echo -e "     ===>${menu1}${green}$i${normal}"; tput setaf 4
        else
          echo -e "         $i";  
        fi
		
    done
	}

function clear_menu0_()  {
    for i in "${menu0_main[@]}"; do 
	tput cuu1 setaf 0;
	done
	tput ed setaf 0
}

# Draw initial Menu
function select_from_list_ () {
draw_menu0_

while read -sn 1 key; 

do # 1 char (not delimiter), silent

    # Check for enter/space
    if [[ "$key" == "" ]]; 
	then
	
#run comand on selected item
if [ "$counter" == 0 ]; 
then
apply_permissions_
  
elif [ "$counter" == 1 ]; #Find pattern
then
step1_
elif [ "$counter" == 2 ]; 
then 
start_
clear

fi
pause_witout_exit_						 
clear && echo && clear
	custom_permission_
 start_
	fi
    # catch multi-char special key sequences 
	 
    read -sn2 -t 0.0005 k1; read -sN1 -t 0.0009 k2; read -sn2 -t 0.0005 k3
    key+=${k1}${k2}${k3}

    case "$key" in
	     1) apply_permissions_ ;;
		 2) custom_permission_;;
		 3) start_ ;;
		 # 4) get_777_folder_ ;;
		 # 5) start_ ;;
		 # 6) ;;
		  $'\e') main_menu0_ ;;
		  #left
		$'\e[D'|$'\e0D')   start_ ;;
        # countersor up, left: previous item
        ""|i|j|$'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
		
        # countersor down, right: next item
        ""|k|l|$'\e[B'|$'\e0B'|$'\e[C'|$'\e0C') ((counter < ${#menu0_main[@]}-1)) && ((counter++)) ;;
		
        # home: first item
       ""|$'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        ""|$'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main[@]}-1));;
		
         # q, carriage return: quit
        #x|q|''|$'\e') color_ && exit_ ;;
		x|q) start_ ;;
    esac
    # Redraw menu
	
    clear_menu0_
    draw_menu0_
done

}
select_from_list_
}

function get_perm_ () {
#Get recursevly permissions		  
 set -f
   custom_permission_title_
	 printf "\n\n\t${number}${menu1}      ${number}Select folder to check permissions     ${normal}\n\n"
    
         logo_folder_
		   #printf "\n\t${menu}[${number}b${menu}]<----Back                  ${normal}"
		    printf "\n\t${menu1}${number}${menu}Type folder name like [/var/]                ${normal}"
	         local C3="$(printf "\n\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
               read -e -p "$C3" PERMISIONFOLDER
			    if [ "$PERMISIONFOLDER" == "b" ] ; 
                     then
		               custom_permission_
                         fi
			   if [ "$PERMISIONFOLDER" == "p" ] ; 
                   then
		             custom_permission_
                       fi
					   custom_permission_title_
			    exit_from_to_custom_permission_
	              if [ -d "$PERMISIONFOLDER" ] ;
                    then
				      border_show_folder_permission_after_   |   grepe "775|777"
					  pause_witout_exit_
					  get_perm_
				        else
                          clear && echo && clear
                             echo -e "\n\n\n\n\n\n\n\n\t${green}            Hi there, Please enter valid  name${normal}"
							 logo_banner_
                               counter3_
                                 get_perm_
                         fi



}

function get_777_folder_ () {
#Get recursevly permissions		  
 set -f
   custom_permission_title_
	 printf "\n\n\t${number}${menu1}   ${number}Select path to check if exist dirs with 777 permissions  ${normal}\n\n"
    
         logo_folder_
		    printf "\n\t${menu}${menu1}if you choose [${number}/${menu}] it can take a while end can effect to CPU ${normal}"
		    printf "\n\t${menu1}${menu}Type folder name like [${number}/var/${menu}] you wish to search            ${normal}"
	         local C44="$(printf "\n\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
               read -e -p "$C44" PERMISIONFOLDER777
			    if [ "$PERMISIONFOLDER777" == "b" ] ; 
                     then
		               custom_permission_
                         fi
						  if [ "$PERMISIONFOLDER777" == "u" ] ; 
                     then
		               main_user_managment_samba_microsoft_
                         fi
						 
			   if [ "$PERMISIONFOLDER777" == "p" ] ; 
                   then
		             custom_permission_
                       fi
					   custom_permission_title_
			             exit_from_to_custom_permission_
					   
	              if [ -d "$PERMISIONFOLDER777" ] || [ -f "$PERMISIONFOLDER777" ] ;
                    then
					
					custom_permission_title_
					printf "\n\n\t${number}${menu1}   ${number}Select path to check if exist dirs with ${blink}${green}777${number}${menu1} permissions  ${normal}\n\n"
					logo_folder_
				       #echo -e "\n\t${under}${menu}${menu1}Folder to search    :${normal} ${under}${green}$PERMISIONFOLDER777${normal}\n\n"
					     printf "\n\t${menu}${menu}Spesify how hops of folders in ${blink}${green}$PERMISIONFOLDER777${normal} \n\t${menu}you want to serach [${number}1~30${menu}] for all press [${number}Enter${menu}]?     ${normal}"
	                       local C4="$(printf "\n\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
                            read -e -p "$C4" PERMISIONFOLDER777DEP
							if [[ $PERMISIONFOLDER777DEP =~ ^[+-]?[0-9]+$ ]] || [ "$PERMISIONFOLDER777DEP" == "" ]; 
                       then
                         echo "Input is an integer."
                                    else [[ $PERMISIONFOLDER777DEP =~ ^[+-]?[0-9]+\.$ ]]; 
									 clear && echo && clear
                                      echo -e "\n\n\n\n\n\n\n\n\n\n\n\t          * ${menu}Please insert valid input between ${number}1~30${normal} *"
									    logo_banner_
										echo
									       counter3_
									        get_777_folder_
                                               fi
					  custom_permission_title_
					    printf "\n\n\t${number}${menu1}   ${number}Select path to check if exist dirs with ${blink}${green}777${normal}${menu1} permissions  ${normal}\n\n"
					     logo_folder_
						 if [ -z "$PERMISIONFOLDER777DEP" ];
						 then
						    HOPSF="Drill down all folders"
							else
							HOPSF=`echo $PERMISIONFOLDER777DEP`
							fi
					        echo -e "\n\t${under}${menu}${menu1}Folder to search            :${normal} ${under}${green}$PERMISIONFOLDER777${normal}"
							echo -e "\n\t${under}${menu}${menu1}How much hops of folders    :${normal} ${under}${green}$HOPSF${normal}\n"
							  printf "\n\t${menu}${menu}Search for ${under}folders${normal}${menu} press [${number}Enter${menu}]${normal}\n\t${menu}Search for ${under}files${normal}${menu} press [${number}1${menu}]?     ${normal}"
	                          local C8="$(printf "\n\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
                                 read -e -p "$C8" PERMISIONFOLDER644DEP
							
							
							if [ -z "$PERMISIONFOLDER777DEP" ] ;
							then
							export PERMISIONFOLDER777DEP1=30
							 else
							export  PERMISIONFOLDER777DEP1=$PERMISIONFOLDER777DEP
							  fi
							  if [ "$PERMISIONFOLDER644DEP" == 1 ] ;
							then
							export PERMISIONFOLDER644DEP1=f
							 else
							export  PERMISIONFOLDER644DEP1=d
							  fi
				               custom_permission_title_
							    echo -e "\n\t           ${green}${blink}Proccesing ........... ${menu}${normal}\n\t           Its can take time.${normal}\n\t           Do not touch keyboard!"
                                 logo_banner_
                                 PERMFINDUPS=`find $PERMISIONFOLDER777 -maxdepth $PERMISIONFOLDER777DEP1 -type $PERMISIONFOLDER644DEP1  \! -exec stat -c '%n %a %G %U %z' {} \; -print | awk '{ print $5, "  |  ",  $6, "  |    ",  $2, "    |  ", $4, "  |  ", $3 "  |  ", $1  }' | grep  "\<777\>"  > /tmp/findme/perm7XX.log  ; `
						        PERMFINDUPS1=`cat /tmp/findme/perm7XX.log | wc -l`
						
						if [ "$PERMFINDUPS1" != 0 ] ;
							then
							custom_permission_title_
					          printf "\n\n\t${menu}           All items with 777 permisions  ${normal}\n\n"
						        logo_banner_
							      border_find_permission_777_ | grepe "775|777"
								
					                pause_witout_exit_
					                  get_777_folder_
				                    
							 else
							custom_permission_title_
					          printf "\n\n\t${menu}                         ${blink}${green}All done!  ${normal}\n"
							  printf "\t${menu}We dont have bad permissions like 777 or 7777 in this folder  ${normal}\n"
							       
						        logo_banner_
								echo -e "\n\n\n\n\n\n\n\n"
					                pause_witout_exit_
					                  get_777_folder_
							  fi	
														
					   
									
									
									
									
									
									else
                                clear && echo && clear
                                   echo -e "\n\n\n\n\n\n\n\n\t${green}            Hi there, Please enter valid  name${normal}"
							        logo_banner_
									 counter3_
                                      get_perm_ 
                         fi  
                      


}

function perm_main_ () {
greetgusr_
check_editor_pref_
tput reset
clear && echo && clear
 IFS=$'\n'       
  set -f 
 tput reset
clear && echo && clear
    clear && echo && clear
	echo -e "\t${menu}${menu1}------------------------------------------------------------${normal}"
	echo -e "\t${menu}${menu1}                   ${bgwhite}${menu}Permissions Management${menu}${menu1}                   ${normal}"
	echo -e "\t${menu}${menu1}                                                            ${normal}"
	echo -e "\t${menu}${menu1}                      ${black}${blink}====>${normal}${menu}${menu1}FindMe${menu1}${black}${blink}<====${normal}${menu1}                      ${normal}"
	echo -e "\t${menu}${menu1}------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	unset TIMEMENUBANNER
				 logo_findme_
echo
local POPT1=`echo -e "\${number}1. ${menu}Set permission with 6 simple Steps${normal}\n"`
local POPT2=`echo -e "\${number}2. ${menu}Set permission for all web sites in 1 simple Step${normal}"` 
local POPT3=`echo -e "\${number}3. ${menu}Get permission recursevly per folders${normal}"` 
local POPT4=`echo -e "\${number}4. ${menu}Find files or folders with permission 777${normal}"` 
local POPT5=`echo -e "\${number}5. ${menu}Check last search of 777 (everyone full controll)${normal}"` 
local PEXIT=`echo -e "\${number}6. ${menu}Back to main menu${normal}"` 

declare -a menu0_main=($POPT1 $POPT2 $POPT3 $POPT4 $POPT5 $PEXIT) 
 counter=0 
 function draw_menu0_ () { 
 for i in "${menu0_main[@]}"; 
 do if [[ ${menu0_main[$counter]} == $i ]]; 
 then tput setaf 2; 
 echo -e "     ===>${menu1}${green}$i${normal}"; tput setaf 4
        else
          echo -e "         $i";  
        fi
		
    done
	}

function clear_menu0_()  {
    for i in "${menu0_main[@]}"; do 
	tput cuu1 setaf 0;
	done
	tput ed setaf 0
}

# Draw initial Menu
function select_from_list_ () {
draw_menu0_

while read -sn 1 key; 

do # 1 char (not delimiter), silent

    # Check for enter/space
    if [[ "$key" == "" ]]; 
	then
	
#run comand on selected item
if [ "$counter" == 0 ]; 
then
step1_
  
elif [ "$counter" == 1 ]; #Find pattern
then
permission_
elif [ "$counter" == 2 ]; 
then 
get_perm_
clear
elif [ "$counter" == 3 ]; 
then 
clear
get_777_folder_
clear
elif [ "$counter" == 4 ]; 
then 
echo -e "\n\n\tSorry for now this option is not available"
sleep 3
perm_main_
 # custom_permission_title_
# border_find_permission_777_ | grepe "775|777"
 # pause_witout_exit_
clear
elif [ "$counter" == 5 ]; 
then 
start_
clear
fi
 start_
	fi
    # catch multi-char special key sequences 
	 
    read -sn2 -t 0.0005 k1; read -sN1 -t 0.0009 k2; read -sn2 -t 0.0005 k3
    key+=${k1}${k2}${k3}

    case "$key" in
	     1) step1_ ;;
		 2) permission_;;
		 3) get_perm_ ;;
		 4) get_777_folder_ ;;
		 5) start_ ;;
		 6) start_  ;;
		  $'\e') main_menu0_ ;;
		  #left
		$'\e[D'|$'\e0D')   start_ ;;
        # countersor up, left: previous item
        ""|i|j|$'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
		
        # countersor down, right: next item
        ""|k|l|$'\e[B'|$'\e0B'|$'\e[C'|$'\e0C') ((counter < ${#menu0_main[@]}-1)) && ((counter++)) ;;
		
        # home: first item
       ""|$'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        ""|$'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main[@]}-1));;
		
         # q, carriage return: quit
        #x|q|''|$'\e') color_ && exit_ ;;
		x|q) start_ ;;
    esac
    # Redraw menu
	
    clear_menu0_
    draw_menu0_
done

}
select_from_list_

}
clear && echo && clear
perm_main_
}

function confirm_perm_ () {
printf "\t${menu} Please Confirm (y/n) or ${number}[ Enter ] ${menu}to Y ${menu}${normal}"
local C55="$(printf "\n\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
read -sn 1 -p "$C55 " confirmn
if [ "$confirmn" == "n" ];
then
custom_permission_
fi

}

function grepeyellow () {
    GREP_COLOR='01;33'  grep --color -E "$1|$" $2
}

function grepe2 () {
    GREP_COLOR='5;01;32'  grep --color -E "$1|$" $2
}

function grepe () {
    grep --color -E "$1|$" $2
}

function grepe2 () {
    GREP_COLOR='5;01;32'  grep --color -E "$1|$" $2
}

function permission_help_ () {
#echo -e " \t http://permissions-calculator.org/decode/\n"
echo -e "\n\t${menu1}         Permission 777 [Everyone full control]  ${normal}"
echo -e " \t${normal}User${normal}             ${normal}Group${normal}             ${normal}Other${normal}"
echo -e " \t${green}can read${normal}         ${green}can read${normal}          ${green}can read${normal}"
echo -e " \t${green}can write${normal}        ${green}can write${normal}         ${green}can write${normal}"
echo -e " \t${green}can execute${normal}      ${green}can execute${normal}       ${green}can execute${normal}"

echo -e "\n\t${menu1}          Permission 775                         ${normal}"
echo -e " \t${normal}User${normal}             ${normal}Group${normal}             ${normal}Other${normal}"
echo -e " \t${green}can read${normal}         ${green}can read${normal}          ${green}can read${normal}"
echo -e " \t${green}can write${normal}        ${fgred}cannot write${normal}      ${fgred}cannot write${normal}"
echo -e " \t${green}can execute${normal}      ${green}can execute${normal}       ${green}can execute${normal}"

echo -e "\n\t${menu1}          Permission 770 [User]                  ${normal}"
echo -e " \t${normal}User${normal}             ${normal}Group${normal}             ${normal}Other${normal}"
echo -e " \t${green}can read${normal}         ${green}can read${normal}          ${fgred}cannot read${normal}"
echo -e " \t${green}can write${normal}        ${green}can write${normal}         ${fgred}cannot write${normal}"
echo -e " \t${green}can execute${normal}      ${green}can execute${normal}       ${fgred}cannot execute${normal}"


echo -e "\n\t${menu1}          Permission 755 [WWW folders]           ${normal}"
echo -e " \t${normal}User${normal}             ${normal}Group${normal}             ${normal}Other${normal}"
echo -e " \t${green}can read${normal}         ${green}can read${normal}          ${green}can read${normal}"
echo -e " \t${green}can write${normal}        ${green}can write${normal}         ${fgred}cannot write${normal}"
echo -e " \t${green}can execute${normal}      ${green}can execute${normal}       ${green}can execute${normal}"

echo -e "\n\t${menu1}          Permission 700                         ${normal}"
echo -e " \t${normal}User${normal}             ${normal}Group${normal}             ${normal}Other${normal}"
echo -e " \t${green}can read${normal}         ${fgred}cannot read${normal}        ${fgred}cannot read${normal}"
echo -e " \t${green}can write${normal}        ${fgred}cannot write${normal}       ${fgred}cannot write${normal}"
echo -e " \t${green}can execute${normal}      ${fgred}cannot execute${normal}     ${fgred}cannot execute${normal}"


echo -e "\n\t${menu1}          Permission 644 [WWW files]             ${normal}"
echo -e " \t${normal}User${normal}             ${normal}Group${normal}             ${normal}Other${normal}"
echo -e " \t${green}can read${normal}         ${green}can read${normal}          ${green}can read${normal}"
echo -e " \t${green}can write${normal}        ${fgred}cannot write${normal}      ${fgred}cannot write${normal}"
echo -e " \t${fgred}cannot execute${normal}   ${fgred}cannot execute${normal}    ${fgred}cannot execute${normal}"

echo -e "\n\t${menu1}          Permission 600 [WWW SSL CRT files]     ${normal}"
echo -e " \t${normal}User${normal}             ${normal}Group${normal}             ${normal}Other${normal}"
echo -e " \t${green}can read${normal}         ${fgred}cannot read${normal}       ${fgred}cannot read${normal}"
echo -e " \t${green}can write${normal}        ${fgred}cannot write${normal}      ${fgred}cannot write${normal}"
echo -e " \t${fgred}cannot execute${normal}   ${fgred}cannot execute${normal}    ${fgred}cannot execute${normal}"

echo -e "\n\t${menu1}          Permission 400                         ${normal}"
echo -e " \t${normal}User${normal}             ${normal}Group${normal}             ${normal}Other${normal}"
echo -e " \t${green}can read${normal}         ${fgred}cannot read${normal}       ${fgred}cannot read${normal}"
echo -e " \t${fgred}cannot write${normal}     ${fgred}cannot write${normal}      ${fgred}cannot write${normal}"
echo -e " \t${fgred}cannot execute${normal}   ${fgred}cannot execute${normal}    ${fgred}cannot execute${normal}"

}

function custom_permission_title_ () {
#check_editor_pref_
 nano_banner_
 vim_banner_
 vi_banner_
IFS=$'\n' 
  set -f 
 CAT=$GREP
clear && echo && clear
	printf "\t${menu}${menu1}--------------------------------------------${menu}${menu1}----------------${normal}\n"
	#echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}][${number}0${menu}]${normal}"         
	#echo -e "\n\t${menu}        Change folder permission and owner 5 simple steps                              ${normal}" 
	# echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "\t${menu}${menu1}Back to previous menu   [${number}b${menu}]${black}${blink}<=  =>${normal}${menu1}${menu}Go to user managment  [${number}u${menu}]  ${normal}"
	echo -e "\t${menu}${menu1}Back to main menu press [${number}q${menu}]${black}${blink}<=  =>${normal}${menu1}${menu}Go to samba managment [${number}s${menu}]  ${normal}"
	echo -e "\t${menu}${menu1}Get help                [${number}h${menu}]${black}${blink}<=    ${normal}${menu1}                           ${normal}"
	echo -e "\t${menu}${menu1}------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	#echo -e "$DIRLOCATION ${green} $CURLOCATION1 ${normal}"
	unset BANNER
} 

function border_custom_permission_users_ () {
USERSLIST11=`cat /etc/passwd | grep -v 'false\|shutdown\|halt\|operator\|ftp\|dbus\|chrony\|polkitd\|adm' | grep -v 'sync\|messagebus\|landscape\|_apt\|ntp\|tcpdump\|lp' | grep -v 'daemon\|games\|backup\|sys\|uucp\|proxy\|syslog\|uuid\|sshd\|news\|list\|irc\|nobody\|gnats\|man'  | awk -F':' '{ print $1 }'`
longstr=`(echo "$USERSLIST11" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "\t${menu}                Users              ${normal}\n"
echo -e "\t             ${menu1}+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t             ${menu1}|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
   echo -e "  ${menu1}|${normal}"
 else
  echo -e "  ${menu1}|${normal}"
 fi
done < <(printf '%s\n' "$USERSLIST11")
echo -e "\t             ${menu1}+$edge---+${normal}"

}

function border_custom_permission_groups_ () {
SHOUGROUPS=`compgen -g | grep -v 'false\|shutdown\|halt\|operator\|ftp\|dbus\|chrony\|polkitd\|adm' | grep -v 'sync\|messagebus\|landscape\|_apt\|ntp\|tcpdump\|lp' | grep -v 'daemon\|games\|backup\|sys\|uucp\|proxy\|syslog\|uuid\|sshd\|news\|list\|irc\|nobody\|gnats\|man'  | cat /etc/passwd | grep -v 'false\|shutdown\|halt\|operator\|ftp\|dbus\|chrony\|polkitd\|adm' | grep -v 'sync\|messagebus\|landscape\|_apt\|ntp\|tcpdump\|lp' | grep -v 'daemon\|games\|backup\|sys\|uucp\|proxy\|syslog\|uuid\|sshd\|news\|list\|irc\|nobody\|gnats\|man' | awk -F':' '{ print $1 }'`
# SHOUGROUPS=`compgen -g | grep -v 'false\|shutdown\|halt\|operator\|ftp\|dbus\|chrony\|polkitd\|adm' | grep -v 'sync\|messagebus\|landscape\|_apt\|ntp\|tcpdump\|lp' | grep -v 'daemon\|games\|backup\|sys\|uucp\|proxy\|syslog\|uuid\|sshd\|news\|list\|irc\|nobody\|gnats\|man'  | cat /etc/passwd | grep -v 'false\|shutdown\|halt\|operator\|ftp\|dbus\|chrony\|polkitd\|adm' | grep -v 'sync\|messagebus\|landscape\|_apt\|ntp\|tcpdump\|lp' | grep -v 'daemon\|games\|backup\|sys\|uucp\|proxy\|syslog\|uuid\|sshd\|news\|list\|irc\|nobody\|gnats\|man' | awk -F':' '{ print $1 }'  |  sort | column -c 74`
longstr=`(echo "$SHOUGROUPS" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
#echo -e "${menu1}             Active Users                ${normal}"
echo -e "\t${menu}                Groups              ${normal}"
echo -e "\t             ${menu1}+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
  echo -e -n "\t             ${menu1}|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
    echo -e "  ${menu1}|${normal}"
 else
  echo -e "  ${menu1}|${normal}"
 fi
done < <(printf '%s\n' "$SHOUGROUPS")
echo -e "\t             ${menu1}+$edge---+${normal}"

}

function border_find_permission_777_ () {
unset TTT
 #PERMISIONFOLDER777=/var/www
#TTT=`find $PERMISIONFOLDER777  -type d  \! -exec stat -c '%n %a %G %U %z' {} \; -print | awk '{ print $5, "  |  ",  $6, "  |    ",  $2, "    |  ", $4, "  |  ", $3 "  |  ", $1  }' | grep  "\<777\>"  `
#TTT=`find $PERMISIONFOLDER777 -maxdepth $PERMISIONFOLDER777DEP1 -type $PERMISIONFOLDER644DEP1  \! -exec stat -c '%n %a %G %U %z' {} \; -print | awk '{ print $5, "  |  ",  $6, "  |    ",  $2, "    |  ", $4, "  |  ", $3 "  |  ", $1  }' | grep  "\<777\>"; `
TTT=`cat /tmp/findme/perm7XX.log`
longstr=`(echo "$TTT" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}

n=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "\n\n" 
echo -e "      Date        Time of last change     Permission      User       Group              Path${normal}"
echo -e "+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "|${normal} $line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "  |${normal}"
 else
  echo -e "  |${normal}"
 fi
done < <(printf '%s\n' "$TTT"  )
echo -e "+$edge---+${normal}"
}

function border_show_folder_permission_after_ () {
 set -f
TTT=`find $PERMISIONFOLDER -maxdepth 1 -type d  \! -exec stat -c '%n %a %G %U %z'  {} \; -print | uniq -w 12 | awk '{ print $5, "  |  ",  $6, "  |     ",  $2, "    |  ", $4, "  |  ", $3 "  |  ", $1  }'  `
longstr=`(echo "$TTT" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
#echo -e "\n\n\n\n" 
echo -e "        Date      Time of last change     Permission    User      Group      Dir/File${normal}"
echo -e "+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "|${normal} $line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "  |${normal}"
 else
  echo -e "  |${normal}"
 fi
done < <(printf '%s\n' "$TTT"  )
echo -e "+$edge---+${normal}"
unset TTT
}

function border_show_folder_permission_before_ () {
local CHMOD1=`cat CHMODTMPLOG1`
longstr=`(echo "$CHMOD1" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "        Date      Time of last change     Permission      User       Group        Dir/File${normal}"
echo -e "+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "|${normal} $line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "  |${normal}"
 else
  echo -e "  |${normal}"
 fi
done < <(printf '%s\n' "$CHMOD1")
echo -e "+$edge---+${normal}"
}

function exit_from_to_custom_permission_ () {
if [ "$PERMISIONFOLDER" == "q" ] ; 
                   then
		             start_
                       fi
}

function remove_www_cron_permisions_ () {
#crontab -l | grep '5 * * * * ; cd $CRONDIR && sh www_permision_monitor_centos_httpd'  | crontab - 
crontab -l | grep '5 * * * * ; cd $CRONDIR && sh www_permision_monitor_centos_nginx'  | crontab -
crontab -l | grep '5 * * * * ; cd $CRONDIR && sh www_permision_monitor_ubuntu_apache2'  | crontab - ;
crontab -l | grep '5 * * * * ; cd $CRONDIR && sh www_permision_monitor_centos_httpd'  | crontab - 
}

function install_www_permision_monitor_centos_nginx_ ( ) { 
#Add cron job to monitor and set correct permissions forr WWW folder
remove_www_cron_permisions_
local chkcron=`crontab -l | grep '5 * * * * ; cd /tmp/findme/cron && sh www_permision_monitor_centos_nginx' | wc -l`
echo "
#!/bin/bash
#!/bin/sh -
find toreplace -type f -exec chmod 664 {} \;
find toreplace -type d -exec chmod 755 {} \;
chown nginx:nginx -R toreplace" >> $CRONDIR/www_permision_monitor_centos_nginx

sed -i "s+toreplace+$httpdchoice1+g" $CRONDIR/www_permision_monitor_centos_nginx
chmod +x $CRONDIR/www_permision_monitor_centos_nginx
sed -i -e 's/\r$//' $CRONDIR/www_permision_monitor_centos_nginx
 if [ "$chkcron" == 0 ];
then
    crontab -l | { cat; echo "5 * * * * ; cd $CRONDIR && sh www_permision_monitor_centos_nginx"; } | crontab -;
fi
systemctl restart crond
}

function install_www_permision_monitor_centos_httpd_ ( ) {
#Add cron job to monitor and set correct permissions forr WWW folder
remove_www_cron_permisions_
local chkcron=`crontab -l | grep -v '5 * * * * ; cd /tmp/findme/cron && sh www_permision_monitor_centos_httpd' | wc -l`
echo "
#!/bin/bash
#!/bin/sh -
find toreplace -type f -exec chmod 664 {} \;
find toreplace -type d -exec chmod 755 {} \;
chown apache:apache -R toreplace" >> $CRONDIR/www_permision_monitor_centos_httpd

sed -i "s+toreplace+$httpdchoice1+g" $CRONDIR/www_permision_monitor_centos_httpd
chmod +x $CRONDIR/www_permision_monitor_centos_httpd
sed -i -e 's/\r$//' $CRONDIR/www_permision_monitor_centos_httpd
 if [ "$chkcron" == 0 ];
then
    crontab -l | { cat; echo "5 * * * * ; cd $CRONDIR && sh www_permision_monitor_centos_httpd"; } | crontab -;
fi
systemctl restart crond
}

function install_www_permision_monitor_ubuntu_apache2_ ( ) {
#Add cron job to monitor and set correct permissions forr WWW folder
remove_www_cron_permisions_
local chkcronu=`crontab -l | grep www_permision_monitor_ubuntu_apache2 | wc -l`
echo "
#!/bin/bash
#!/bin/sh -
find toreplace -type f -exec chmod 664 {} \;
find toreplace -type d -exec chmod 755 {} \;
chown www-data:www-data -R toreplace" >> $CRONDIR/www_permision_monitor_ubuntu_apache2
sed -i "s+toreplace+$httpdchoice1+g" $CRONDIR/www_permision_monitor_ubuntu_apache2
chmod +x $CRONDIR/www_permision_monitor_ubuntu_apache2
sed -i -e 's/\r$//' $CRONDIR/www_permision_monitor_ubuntu_apache2
 if [ "$chkcronu" == 0 ];
then
    crontab -l | { cat; echo "5 * * * * ; cd $CRONDIR && sh www_permision_monitor_ubuntu_apache2"; } | crontab - 
fi
systemctl restart cron
}

function permission_title_www_chk_ () {
clear && echo && clear
echo -e "\n\n\n\n"
logo2_
echo -e "\n\n\n\n\n\n\n\n\t${menu}We cannot proceed to this menu\n\tBecause you dont have instaled\n\tor running web server${normal}"
echo -e "\t${menu}First of all install web server                     ${normal}\n"
counter_
custom_permission_

}

function permission_ () {
custom_permission_title_
echo
echo
logo_lets_do_this_
set -f
local UBUNTUHTTPD=`pgrep -x apache2 | wc -l`
local CENTOSHTTPD=`pgrep -x httpd | wc -l`
local CHKNGINX=`pgrep -x nginx | wc -l`



#####################Step 1
if [ "$CENTOS" != 0 ] && [ "$CHKNGINX" != 0 ] ;
then
     echo -e "\n\t${menu1}I will set recursive permissions:      ${normal}\n\t${menu1}For all directory: ${green}755                 ${normal}\n\t${menu1}For all files    : ${green}644                 ${normal}\n\t${menu1}${under}Owner:${normal}                                 ${normal}\n\t${menu1}User:            : ${green}apache              ${normal}\n\t${menu1}Group            :${green} apache              ${normal}\n "
     printf "\t${number}*${menu}Provide full path to sites ${normal}"
	 local C1="$(echo -e "\n\t$DIRLOCATION ${normal}")"
     read -e -p "$C1" httpdchoice1
	 if [ "$httpdchoice1" == "q" ] || [ "$httpdchoice1" == "b" ]; 
   then
     
     custom_permission_
  fi

if [ -d "$httpdchoice1" ] ;
                    then
				      echo 
				        else
                          clear && echo && clear
                             echo -e "\n\n\n\n\n\n\n\n\t${blink}${green}${blink}${green}$httpdchoice1${menu}${normal} this folder not exist.\n\tPlease enter valid folder name${normal}"
                               counter3_
                                 permission_
                         fi


  if [ "$httpdchoice1" == "q" ] || [ "$httpdchoice1" == "" ]; 
   then
   
     custom_permission_
  fi

if [ "$httpdchoice1" == "h" ] ; 
  then
   clear
    permission_help_
	  pause_witout_exit_
	   clear && echo && clear
		 logo_big_
		   sleep 1
		     permission_
 
fi
unset PERMISIONFOLDER
export PERMISIONFOLDER=$httpdchoice1
find $PERMISIONFOLDER -maxdepth 1 -type d  \! -exec stat -c '%n %a %G %U %z'  {} \; -print | uniq -w 12 | awk '{ print $5, "  |  ",  $6, "  |     ",  $2, "     |  ", $3, "  |  ", $4 "  |  ", $1  }'  > CHMODTMPLOG1
echo
echo
printf "\n\t${number}${bold}${menu1}${menu}Permissions before${normal}\n"
border_show_folder_permission_after_   |  grepe2 "755"
echo
echo
confirm_perm_
echo -e "\n\t${blink}Seting in progress ..... ${normal}"
     find $httpdchoice1 -type f -exec chmod 00644 {} \;
     find $httpdchoice1 -type d -exec chmod 00755 {} \;
     chown nginx:nginx -R $httpdchoice1
     custom_permission_title_
	 echo
echo
#logo_lets_do_this_
     echo -e "\n\n\t${menu}${menu1}All done ${green}"$whoami",                           ${normal}${normal}\n\t${menu1}Please check permissions                 ${normal}\n"
    logo_all_done_
   echo

		     printf "\n\t${number}${bold}${menu1}${menu}Permissions before${normal}\n"
			 border_show_folder_permission_before_ |  grepe "775|777"
			 printf "\n\t${number}${bold}${menu1}${menu}Permissions after${normal}\n"
			 border_show_folder_permission_after_   |  grepe2 755
      
     local C3="$(printf "\n\t${menu}${menu1}To set cron job to monitor              ${normal}\n\t${menu}${menu1}permisions every 5 min                  ${normal}\n\n\t${menu}Press [${number}1${menu}] or [${number}Enter${menu}] to back: ${normal}\n")"
     read -e -n1 -p "$C3" cronchoice
	 
if [ "$cronchoice" == 1 ];
  then
    install_www_permision_monitor_centos_nginx_
      echo
        crontab -l
          echo
            pause_witout_exit_
			clear && echo && clear
fi

 
#####################Step 2
elif [ "$CENTOS" != 0 ] && [ "$CENTOSHTTPD" != 0 ] ;
 then
  echo -e "\n\t${menu1}I will set recursive permissions:      ${normal}\n\t${menu1}For all directory: ${green}755                 ${normal}\n\t${menu1}For all files    : ${green}644                 ${normal}\n\t${menu1}${under}Owner:${normal}${menu1}                                 ${normal}\n\t${menu1}User:            : ${green}apache              ${normal}\n\t${menu1}Group            :${green} apache              ${normal}\n "
     printf "\t${number}*${menu}Provide full path to sites ${normal}"
	 local C1="$(echo -e "\n\t$DIRLOCATION ${normal}")"
     read -e -p "$C1" httpdchoice2
	  if [ "$httpdchoice2" == "q" ] || [ "$httpdchoice2" == "b" ]; 
   then
   
     custom_permission_
  fi
	 if [ -d "$httpdchoice2" ] ;
                    then
				      echo 
				        else
                          clear && echo && clear
                             echo -e "\n\n\n\n\n\n\n\n\t${blink}${green}${blink}${green}$httpdchoice2${menu}${normal} this folder not exist.\n\tPlease enter valid folder name${normal}"
                               counter3_
                                 permission_
                         fi
	 
	 
if [ "$httpdchoice2" == "q" ] || [ "$httpdchoice2" == "" ] ; 
  then
  
    custom_permission_
fi

if [ "$httpdchoice2" == "h" ] ; 
  then
   clear
     permission_help_
	   pause_witout_exit_
		 clear && echo && clear
		   logo_big_
		     sleep 1
		       permission_
 
fi
unset PERMISIONFOLDER
export PERMISIONFOLDER=$httpdchoice2
find $PERMISIONFOLDER -maxdepth 1 -type d  \! -exec stat -c '%n %a %G %U %z'  {} \; -print | uniq -w 12 | awk '{ print $5, "  |  ",  $6, "  |     ",  $2, "     |  ", $3, "  |  ", $4 "  |  ", $1  }'  > CHMODTMPLOG1
echo
echo
printf "\n\t${number}${bold}${menu1}${menu}Permissions before${normal}\n"
border_show_folder_permission_after_   |  grepe2 "755"
echo
echo
confirm_perm_
echo -e "\n\t${blink}Seting in progress ..... ${normal}"
echo 
        find $httpdchoice2 -type f -exec chmod 00644 {} \;
        find $httpdchoice2 -type d -exec chmod 00755 {} \;
        chown apache:apache -R $httpdchoice2
        custom_permission_title_
		echo
echo
#logo_lets_do_this_
        echo -e "\n\n\t${menu}${menu1}All done ${green}"$whoami",                           ${normal}${normal}\n\t${menu1}Please check permissions                 ${normal}\n"
    logo_all_done_
   echo
			 printf "\n\t${number}${bold}${menu1}${menu}Permissions before${normal}\n"
			 border_show_folder_permission_before_ |  grepe "775|777"
			 printf "\n\t${number}${bold}${menu1}${menu}Permissions after${normal}\n"
			 border_show_folder_permission_after_   |  grepe2 755
      
     local C3="$(printf "\n\t${menu}${menu1}To set cron job to monitor              ${normal}\n\t${menu}${menu1}permisions every 5 min                  ${normal}\n\n\t${menu}Press [${number}1${menu}] or [${number}Enter${menu}] to back: ${normal}\n")"
     read -e -n1 -p "$C3" cronchoice
 if [ "$cronchoice" == 1 ];
  then
    install_www_permision_monitor_centos_httpd_
     echo
      crontab -l
       echo
        pause_witout_exit_
   
   fi
   
   
   #####################Step 3
elif [ "$UBUNTU" != 0 ] && [ "$UBUNTUHTTPD" != 0 ] || [ "$CHKNGINX" != 0 ];
  then
    echo -e "\n\t${menu1}I will set recursive permissions:      ${normal}\n\t${menu1}For all directory: ${green}755                 ${normal}\n\t${menu1}For all files    : ${green}644                 ${normal}\n\t${menu1}${under}Owner:${normal}                                 ${normal}\n\t${menu1}User:            : ${green}apache              ${normal}\n\t${menu1}Group            :${green} apache              ${normal}\n "
     printf "\t${number}*${menu}Provide full path to sites ${normal}"
	 local C1="$(echo -e "\n\t$DIRLOCATION ${normal}")"
     read -e -p "$C1" httpdchoice3
	 
	  if [ "$httpdchoice3" == "q" ] || [ "$httpdchoice3" == "b" ]; 
   then
   
     custom_permission_
  fi
	 
	 	 if [ -d "$httpdchoice3" ] ;
                    then
				      echo
				        else
                          clear && echo && clear
                             echo -e "\n\n\n\n\n\n\n\n\t${blink}${green}${blink}${green}$httpdchoice3${menu}${normal} this folder not exist.\n\tPlease enter valid folder name${normal}"
                               counter3_
                                 permission_
                         fi
	       if [ "$httpdchoice3" == "q" ] || [ "$httpdchoice3" == "" ] ; 
             then
			 
              custom_permission_
           fi
		   
if [ "$httpdchoice3" == "h" ] ; 
   then
    clear
     permission_help_
	  pause_witout_exit_
	   clear && echo && clear
		logo_big_
		 sleep 1
		  permission_
 
fi
unset PERMISIONFOLDER
export PERMISIONFOLDER=$httpdchoice3
find $PERMISIONFOLDER -maxdepth 1 -type d  \! -exec stat -c '%n %a %G %U %z'  {} \; -print | uniq -w 12 | awk '{ print $5, "  |  ",  $6, "  |     ",  $2, "     |  ", $3, "  |  ", $4 "  |  ", $1  }'  > CHMODTMPLOG1
echo
echo
printf "\n\t${number}${bold}${menu1}${menu}Permissions before${normal}\n"
border_show_folder_permission_after_   |  grepe2 "755"
echo
echo
confirm_perm_
echo -e "\n\t${blink}Seting in progress ..... ${normal}"
      find $httpdchoice3 -type f -exec chmod 00644 {} \;
      find $httpdchoice3 -type d -exec chmod 00755 {} \;
      chown www-data:www-data -R $httpdchoice3
      custom_permission_title_
      echo -e "\n\n\t${menu}${menu1}All done ${green}"$whoami",                           ${normal}${normal}\n\t${menu1}Please check permissions                 ${normal}\n"
    logo_all_done_
   echo
		    printf "\n\t${number}${bold}${menu1}${menu}Permissions before${normal}\n"
			 border_show_folder_permission_before_ |  grepe "775|777"
			 printf "\n\t${number}${bold}${menu1}${menu}Permissions after${normal}\n"
			 border_show_folder_permission_after_   |  grepe2 755
      
     local C3="$(printf "\n\t${menu}${menu1}To set cron job to monitor              ${normal}\n\t${menu}${menu1}permisions every 5 min                  ${normal}\n\n\t${menu}Press [${number}1${menu}] or [${number}Enter${menu}] to back: ${normal}\n")"
     read -e -n1 -p "$C3" cronchoice
if [ "$cronchoice" == 1 ];
 then
  install_www_permision_monitor_ubuntu_apache2_
   echo
    crontab -l
     echo
      pause_witout_exit_
fi
else
permission_title_www_chk_
fi
custom_permission_
clear && echo && clear
#return 0

custom_permission_
ls -la $httpdchoice1
}
 

#------------Samba---------------

#this function for if you first time run helpme on server and server hav esamba users this function automaticali add them to Samba-Users group
function add_samba_users_to_samba_group_ () {
SMBUSERS=`pdbedit -L | awk -F':' '{print $1 }'`
for i in $SMBUSERS ; do gpasswd -a $i Samba-User ; done
}

function remove_samba_users_to_samba_group_ () {
SMBUSERS=`pdbedit -L | awk -F':' '{print $1 }'`
for i in $SMBUSERS ; do gpasswd -d $i Samba-User ; done
}

#this function for :to check if user in samba then add them to Samba-Users group
function add_existing_samba_users_to_samba_user_ () { 
SMBCHKwqINS=`compgen -g | grep Samba-User | wc -l`
SMBCHRTTK=`ps -ef | grep [s]mb | wc -l`
 
if [ "$SMBCHKwqINS" == 0 ] && [ "$SMBCHRTTK" != 0 ];
  then
  groupadd Samba-User
    add_samba_users_to_samba_group_
   fi
}

function chk_samba_install_ () { 
SMBCHKINS=`ps -ef | grep [s]mb | wc -l`
if [ "$SMBCHKINS" == 0 ];
  then
    install_samba_
   
	fi
} 

function border_smb_connected_users_ () {
SMBCHK=`ps -ef | grep [s]mb | wc -l`
if [ "$SMBCHK" != 0 ];
  then
SMBUSERSTATWC=`smbstatus -b  | awk '{print   $3,"|",$4  }' | grep -v Group  | grep -v 4.9.* | column -t | sed -e '1,2d' | wc -l`
  if [ "$SMBUSERSTATWC" == 0 ] || [ "$SMBUSERSTATWC" == 1 ] ;
  then
  echo -e "\t\t\t      +------------------+"
  echo -e "\t\t\t      |No Connected users|"
  echo -e "\t\t\t      +------------------+"
  else
  
findmepath=/tmp/findme
SMBUSERS=`pdbedit -L | awk -F':' '{print $1 }'`
SMBUSERSTAT=`smbstatus -b  | awk '{print   $3,"|",$4  }' | grep -v Group  | grep -v 4.9.* | column -t | sed -e '1,2d'`
longstr=`(echo "$SMBUSERSTAT" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "\n\n\t\t\t ${menu1}${under}${menu}Connected users${normal}"
echo -e "\t\t    Users        From IP "
echo -e "\t\t   ${menu1}+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t\t   ${menu1}|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "  ${menu1}|${normal}"
 else
  echo -e "  ${menu1}|${normal}"
 fi
done < <(printf '%s\n' "$SMBUSERSTAT")
echo -e "\t\t   ${menu1}+$edge---+${normal}"
 fi
 fi
}

function grepegreennoblink () {
    GREP_COLOR='01;32'  grep --color -E -i "$1|$" $2
}

function border_all_smb_users_ () {
SMBCHK=`ps -ef | grep [s]mb | wc -l`
if [ "$SMBCHK" != 0 ];
  then
   
findmepath=/tmp/findme
SMBUSERS=`pdbedit -L | awk -F':' '{print $1 }'`
SMBUSERSTAT=`smbstatus -b  | awk '{print   $3,"|",$4  }' | grep -v Group  | grep -v 4.9.* | column -t | sed -e '1,2d'`
longstr=`(echo "$SMBUSERS" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "\t\t\t\t   Users "
echo -e "\t\t\t\t${menu1}+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t\t\t\t${menu1}${menu1}|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "  ${menu1}|${normal}"
 else
  echo -e "  ${menu1}|${normal}"
 fi
done < <(printf '%s\n' "$SMBUSERS")
echo -e "\t\t\t\t${menu1}+$edge---+${normal}"
fi
}

function border_all_smb_shares_ () {
SMBCHK=`ps -ef | grep [s]mb | wc -l`
if [ "$SMBCHK" != 0 ];
  then
findmepath=/tmp/findme
#SHARES=`while read line; do     [[ "$line" =~ ^\[ ]] && name="$line";     [[ "$line" =~ ^[[:space:]]*path ]] && echo -e "\n$name\n$line\n" | sed '/^$/d' ; done </etc/samba/smb.conf`
#SHARES=` cat /etc/samba/smb.conf | awk '/]|path/ {print $0} ' |  sed '/]/i\             ' | sed '/]/s/^/Share-Name = /' |  sed 's/^[ \t]*//' `

#cat /etc/samba/smb.conf | awk '/]/ {print $0} ' |  sed 's/^[ \t]*//' | sed 's/^[[ \t]*//' | sed 's/]//g' | awk '{print "\\\\\\hostname\\"$0}' | sed "s/hostname/$hostname/g"
SHARES=`cat /etc/samba/smb.conf | awk '/]|path/ {print $0} ' |  sed '/]/i__________ ' | sed '/]/s/^/Share Name  = /' |  sed 's/^[ \t]*//' | sed 's/path = /Folder Path = [/g' |  sed "/Folder Path / s/$/]/"`

longstr=`(echo "$SHARES" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 

echo -e "\n\t\t\t    ${menu}      Active share ${normal} "
echo -e "\t\t   ${menu1}+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t\t   ${menu1}|${normal} $line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "  ${menu1}|${normal}"
 else
  echo -e "  ${menu1}|${normal}"
 fi
done < <(printf '%s\n' "$SHARES")
echo -e "\t\t   ${menu1}+$edge---+${normal}"
fi
}

function samba_shares_advance_help_ () {
clear && clear
echo -e "\n\n"

echo -e "\n\tTo set hidden share folder add '${fgred} $ ${normal}' to end of sharename like [your_hidden_shared_folder${fgred}$ ${normal}] ${normal}\n "
echo -e "\t${under}Example of hidden per User${normal}: ${normal} "
echo -e "\t\t\t${fgred}[${normal}your_hidden_shared_folder${fgred}$]${normal}" 
echo -e "\t\t\tcomment = Otional     ${normal}"  
echo -e "\t\t\tpath = /home/folder/     ${normal}"  
echo -e "\t\t\tvalid users = User1, User2, User3, User4, User5     ${normal}"  
echo -e "\t\t\twritable = yes     ${normal}"  
echo -e "\t\t\tbrowsable = yes     ${normal}"  
echo -e "\t\t\tcreate mask = 0664     ${normal}"  
echo -e "\t\t\tforce create mode = 0664     ${normal}"  
echo -e "\t\t\tforce directory mode = 0755     ${normal}"
echo -e "\t\t\tforce group = apache${normal} # ${fgred}<=====${normal} ${menu}Here i use apache becouse developers must changed files and folders${normal}   "
echo -e "\t\t\tforce user = apache${normal}  # ${fgred}<=====${normal} ${menu}After Dev user change file permissions automaticaly set to apache for security reason and normal work${normal}   "
echo -e "\t\t\t#To Hide so folder or files from users: add (hide files =) and (veto files =)     ${normal}"
echo -e "\t\t\thide files = /litan/BCKP     ${normal}"
echo -e "\t\t\tveto files = /litan/BCKP     ${normal}"



echo -e "\n\n\t${under}Example per Group${normal}: ${normal} "
echo -e "\t\t\t${fgred}[${normal}your_hidden_shared_folder${fgred}$]${normal}" 
echo -e "\t\t\tcomment = Otional     ${normal}"  
echo -e "\t\t\tpath = /home/folder/     ${normal}"  
echo -e "\t\t\tvalid users = @Your_Group     ${normal}"  
echo -e "\t\t\twritable = yes     ${normal}"  
echo -e "\t\t\tbrowsable = yes     ${normal}"  
echo -e "\t\t\tcreate mask = 0664     ${normal}"  
echo -e "\t\t\tforce create mode = 0664     ${normal}"  
echo -e "\t\t\tforce directory mode = 0755     ${normal}"
echo -e "\t\t\tforce group = apache${normal} # ${fgred}<=====${normal} ${menu}Use any group or disable it but if you disable it user maybe cannot use another files if wass changed with difernt user${normal}   "
echo -e "\t\t\tforce user = apache${normal}  # ${fgred}<=====${normal} ${menu}Use any group or disable it but if you disable it user maybe cannot use another files if wass changed with difernt user${normal} "
echo -e "\t\t\t#To Hide so folder or files from users: add (hide files =) and (veto files =)     ${normal}"
echo -e "\t\t\thide files = /litan/BCKP     ${normal}"
echo -e "\t\t\tveto files = /litan/BCKP     ${normal}"


echo -e "\n\n\t${under}Example for Domain Users${normal}: ${normal} "
echo -e "\t\t\t${fgred}[${normal}your_hidden_shared_folder${fgred}$]${normal}" 
echo -e "\t\t\tcomment = Otional     ${normal}"  
echo -e "\t\t\tpath = /home/folder/     ${normal}"  
echo -e "\t\t\tvalid users = user1@domain.local, user2@@domain.local, user3@domain.local     ${normal}"  
echo -e "\t\t\twritable = yes     ${normal}"  
echo -e "\t\t\tbrowsable = yes     ${normal}"  
echo -e "\t\t\tcreate mask = 0664     ${normal}"  
echo -e "\t\t\tforce create mode = 0664     ${normal}"  
echo -e "\t\t\tforce directory mode = 0755     ${normal}"
echo -e "\t\t\tforce group = apache${normal} # ${fgred}<=====${normal} ${menu}Use any group or disable it but if you disable it user maybe cannot use another files if wass changed with difernt user${normal}   "
echo -e "\t\t\tforce user = apache${normal}  # ${fgred}<=====${normal} ${menu}Use any group or disable it but if you disable it user maybe cannot use another files if wass changed with difernt user${normal} "
echo -e "\t\t\t#To Hide so folder or files from users: add (hide files =) and (veto files =)     ${normal}"
echo -e "\t\t\thide files = /litan/BCKP     ${normal}"
echo -e "\t\t\tveto files = /litan/BCKP     ${normal}"




pause_witout_exit_
 samba_shares_advance_
}

function samba_shares_advance_ () {
unset ADVANCESHARES
samba_shares_managment_title_
echo -e "\n\t\t\t${menu}${under}Host: ${green}$hostname${normal}${under}${menu} Domain: $DOMAINBANN${normal}\n "
SMBCHK=`ps -ef | grep [s]mb | wc -l`
if [ "$SMBCHK" != 0 ];
  then
findmepath=/tmp/findme
#SHARES=`while read line; do     [[ "$line" =~ ^\[ ]] && name="$line";     [[ "$line" =~ ^[[:space:]]*path ]] && echo -e "\n$name\n$line\n" | sed '/^$/d' ; done </etc/samba/smb.conf`
#SHARES=` cat /etc/samba/smb.conf | awk '/]|path/ {print $0} ' |  sed '/]/i\             ' | sed '/]/s/^/Share-Name = /' |  sed 's/^[ \t]*//' `
SHARES=`cat /etc/samba/smb.conf  |  sed '/]/i\                ' | sed '/]/s/^/Share Name = /' |  sed 's/^[ \t]*//'` 

longstr=`(echo "$SHARES" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 

echo -e "\n\t\t${menu}            Active share ${normal} "
echo -e "\t${menu1}+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t${menu1}|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "  ${menu1}|${normal}"
 else
  echo -e "  ${menu1}|${normal}"
 fi
done < <(printf '%s\n' "$SHARES")
echo -e "\t${menu1}+$edge---+${normal}"
fi

 echo -e "\n\t${menu}To edit press [${number}e${menu}] help press [${number}h${menu}] back press [${number}Enter${menu}] ${normal}\n "
 local C1="$(printf "\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
read -e -n 1 -p "$C1" ADVANCESHARES
			
if [ "$ADVANCESHARES" == "h" ];	
then		
		samba_shares_advance_help_	   
			 fi  
			   
			   
			   
   if [ "$ADVANCESHARES" == "e" ];
   then
 vi /etc/samba/smb.conf
 samba_shares_managment_title_
 logo_findme_
     echo -e "\n\t\t${menu}To restart Samba service press [${number}r${menu}] back press [${number}Enter${menu}] ${normal}\n "
     local C1="$(printf "\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
               read -e -n 1 -p "$C1" ADVANCESHARES
			   if [ "$ADVANCESHARES" == "r" ]  ;
			   then
			   if [ "$CENTOS" == 1 ] || [ "$SANGOMA" == 1 ] ;
	    then
             systemctl restart smb
			 systemctl restart nmb
			  echo -e "\n\t\t${fgred}${blink}Restarting smb .... ${normal}\n "
			  sleep 2
			  samba_shares_managment_title_
               logo_findme_
			  echo -e "\n\t\t${fgred}${blink}Restarting nmb .... ${normal}\n "
			  sleep 2
			  
			  yes | testparm
			 elif [ "$UBUNTU" == 1 ] ;
	    then
           systemctl restart smbd
		   samba_shares_managment_title_
           logo_findme_
		     echo -e "\n\t\t${fgred}${blink}Restarting smbd .... ${normal}\n "
			  sleep 2
		  smb_details_ 
		  fi
		  fi
		  fi
		 samba_shares_managment_ 
}

function install_samba_ () {
yes | cp /etc/samba/smb.conf /tmp/findme/smb.conf-$LD
echo -e "\n\n\n\n\n\n\n"
 logo_findme_
 echo -e "\n\n\t ${menu}Samba will be installed ${normal}"
 confirm_users_
#main_user_managment_samba_microsoft_
 if [ "$CENTOS" == 1 ] || [ "$SANGOMA" == 1 ] ;
	    then
		  echo -e "\n\n\n\n\n\n\n"
echo -e "\t${blink}Installing Samba in progress ..... ${normal}"
			 sudo yum -y install samba samba-client samba-common >&- 2>&-
			
			
			 echo
		      
	        
			 systemctl enable smb.service 
			 systemctl start smb.service
			 systemctl restart smb
			 systemctl restart nmb
			 echo -e "\n\n\n\n\n\n\n"
 logo_findme_
			 yes | cp  /etc/samba/smb.conf /etc/samba/smb.conf.orig
			 systemctl status smb
			 echo
			 export  BANNER=`echo -e "Dear "$whoami", You just installed ${number}SAMBA${menu0_main0[$counter]}${normal}"`
			 add_samba_users_to_samba_group_
			 main_user_managment_samba_microsoft_
			 elif [ "$UBUNTU" == 1 ];
			then
			echo -e "\n\n\n\n\n\n\n"
 logo_findme_
  confirm_users_
#main_user_managment_samba_microsoft_
echo -e "\t${blink}Installing Samba in progress ..... ${normal}"
			sudo apt-get install samba -y >&- 2>&-
			sudo ufw allow 'Samba'
			
			 
			 echo
			 echo -e "\n\n\n\n\n\n\n"
 logo_findme_
 add_samba_users_to_samba_group_
			 yes | cp /etc/samba/smb.conf /etc/samba/smb.conf.orig
			 export  BANNER=`echo -e "Dear "$whoami", You just installed ${number}SAMBA${menu0_main0[$counter]}${normal}"`
			 systemctl status smbd
			 
			 systemctl restart smbd
			 
			 main_user_managment_samba_microsoft_
		   fi


}

function remove_samba_ () {
yes | cp /etc/samba/smb.conf /tmp/findme/smb.conf-$LD
remove_samba_users_to_samba_group_
 logo_findme_
 echo -e "\n\n\t ${menu}Samba will be removed ${normal}"
 confirm_users_
 #main_user_managment_samba_microsoft_
if [ "$CENTOS" == 1 ] || [ "$SANGOMA" == 1 ] ;
	    then
yum remove samba* -y >&- 2>&-
elif [ "$UBUNTU" == 1 ];
			then
sudo apt-get remove samba* -y
fi
export  BANNER=`echo -e "Dear "$whoami", You just removed ${number}SAMBA${menu0_main0[$counter]}${normal}"`
main_user_managment_samba_microsoft_
}

function smb_details_ () {
samba_shares_managment_title_
echo -e "\n\t\t\t${menu}${under}Host: ${green}$hostname${normal}${under}${menu} Domain: $DOMAINBANN${normal}\n "
border_all_smb_users_
border_smb_connected_users_
border_all_smb_shares_ | grepegreennoblink 'Share Name'

 echo -e "\n\t\t${menu}To view advance mode press [${number}a${menu}] back press [${number}Enter${menu}] ${normal}\n "
 local C1="$(printf "\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
               read -e -n 1 -p "$C1" ADVANCESHARES
   if [ "$ADVANCESHARES" == "a" ];
   then
   samba_shares_managment_title_
      samba_shares_advance_
	else
	samba_shares_managment_
	fi
#border_all_smb_shares_advance_
samba_shares_managment_
}

function chk_box_local_users_ () {
findmepath=/tmp/findme
cat /etc/passwd | grep -v 'false\|shutdown\|halt\|operator\|ftp\|dbus\|chrony\|polkitd\|adm' | 
grep -v 'rpc\|radiusd\|redis\|sync\|messagebus\|landscape\|_apt\|ntp\|tcpdump\|lp' |
grep -v 'unbound\|daemon\|games\|backup\|sys\|uucp\|proxy\|syslog\|uuid\|sshd\|news\|list\|irc\|nobody\|gnats\|man'  |
awk -F':' '{ print $1 }' | tee >$findmepath/.userlist.txt

# cat $findmepath/.userlist.txt
#! /bin/bash
# customize with your own.

start_title_
logo_banner_start_
check_editor_pref_

showusers=`cat /tmp/findme/.userlistg.txt | grep -v : | column -t ` 
USERLIST=`cat $findmepath/.userlist.txt `
declare -a options=($USERLIST)


menu_list_() {
clear
echo -e "\n\n\t\tAvaliable options:"
for i in ${!options[@]}; do
printf "\n\t\t%3d%s) %s\t\t" $((i+1)) "${choices[i]:- }" "${options[i]}"
done
[[ "$msg" ]] && echo -e "\n\n\t\t$msg"; :
}
prompt=`echo -e "\n\t\tSelect users from list\n\t\tAgain to uncheck, ENTER when done:" `
while menu_list_ && read -n 1 -rp  "$prompt" num && [[ "$num" ]]; do
[[ "$num" != *[![:digit:]]* ]] && (( num > 0 && num <= ${#options[@]} )) || 
{
msg="Invalid option: $num"; continue
}
((num--)); msg="${options[num]} was ${choices[num]:+un}checked"
[[ "${choices[num]}" ]] && choices[num]="" || choices[num]="[+]"
done

printf "\n\t\tYou selected: "; 
msg=" nothing"
for i in ${!options[@]}; do
[[ "${choices[i]}" ]] && { printf "\n\t\t %s" "${options[i]}"; msg="";  }
done | tee >/tmp/findme/.local-users-list.txt

SELECTEDU=`cat /tmp/findme/.local-users-list.txt`
echo $SELECTEDU
for users in $SELECTEDU; do sudo gpasswd -a "$users" www-data ; done 


}

function samba_shares_managment_title_ () {
#check_editor_pref_
unset BANNERLOCKED
unset BANNERLOCKED1
nano_banner_
vim_banner_
vi_banner_
chkifexist=`ls -a /tmp/findme | grep .lockedusers.log | wc -l `
chkifexist1=`cat /tmp/findme/.lockedusers.log | wc -l`
if [ "$chkifexist" != 0 ] && [ "$chkifexist1" != 0 ]; 
then
			BANNERLOCKED1=`cat $lockedusers`
			BANNERLOCKED=`echo "$BANNERLOCKED1"`
			BANNERLOCKED2=`echo "Blocked Users:"`
			else
			BANNERLOCKED=' '
			fi
 CAT=$GREP
  
clear && echo && clear
    echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	printf "${menu}${menu1}                                  ${normal}${menu1}Samba Managment${menu}${menu1}                               ${normal}"
	#echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "\n${menu}${menu1}                                                                                ${normal}"
    echo -e "${menu}${menu1}                                 ${black}${blink}====>${normal}${menu}${menu1}FindMe${menu1}${black}${blink}<====${normal}${menu1}                               ${normal}"
    echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}${menu1}                                                                                ${normal}"
	echo -e "${menu1}Alerts${normal}${menu}: $BANNER${normal}${menu1}${green}${normal}${green}$GREPBANN${normal}"
	
	echo -e "${menu}$BANNERLOCKED2${number}$BANNERLOCKED${normal}        "
	echo -e "${menu}${menu1}                                                                                ${normal}"
	#echo -e "$DIRLOCATION ${green} $PATH1${normal}"
	#echo -e "$DIRLOCATION ${green} $CURLOCATION1 ${normal}"
	unset BANNER
	
	echo
	#clear Back to explorer     [${number}esc${menu}] 
} 

function share_this_folder_ () {
unset_banner_
#logo_lets_do_this_
 set -f 
#Menu 0
if [ "$selector" == "0" ] ; 
   then
            echo
            export DIR1=`echo "/${menu0_main[$counter]}" | awk '{print $1}'`
            local C1="$(printf "\t${menu}The folder ${green}$DIR1${menu} will be shared:${menu} ${normal}\n")"
	        read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	        echo $DIR1 
			printf "\t${menu}Please Select users from list ${normal}\n"
			                                                         #1. Please Select users from list
                                                                             #2. Create file with selected users like user1, user2, user3 
                                                                                   #3. change  VALIDUSERS to all users 
																				          #4. VALIDPATH=$DIR1 Change VALIDPATH to $DIR1 
																						          #5. Ask if this a web folder and explain that we set user Apache and Owner Apache 
																								       #5.1 If web folder than check os and set or apache or www-root
																									         #5.2 If no force user [shareusr] and group [shareusr]
																											     #5.3 change apachepattern to  shareusr
																											          #6. Add 
																											    
																				   
                                                                                          [$FOLDERSHARENAME$]
                                                                                          path = VALIDPATH
                                                                                          valid users = VALIDUSERS
                                                                                          writable = yes
                                                                                          browsable = yes
                                                                                          create mask = 0664
                                                                                          force create mode = 0664
                                                                                          directory mask = 0755
                                                                                          force directory mode = 0755
                                                                                          force group = apachepattern
                                                                                          force user = apachepattern
																				   
			printf "\t${menu}Share for Local Group${menu} ${normal}\n"
			printf "\t${menu}Share for Microsoft User${menu} ${normal}\n"
			printf "\t${menu}Share for Microsoft Group${menu} ${normal}\n"
			
			echo
	       local C1="$(printf "\t${menu}Share for User or for Group?${menu} ${normal}\n")"
	        read -e -p "$C1" choise2d
			export  BANNER=`echo -e "Dear "$whoami", You just shared ${fgred}$DIR1${fgred}${normal}"`
            menu0_
   else
	        menu0_
fi
fi
#Menu 1
if [ "$selector" == "1" ] ; 
   then
         echo
		echo
		echo
		echo
        export DIR2=`echo "$DIR1/${menu0_main1[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}This ${fgred}$DIR2${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR2
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", You just remove ${green}$DIR2 ${normal}"`
         menu0_ && break;
	else
	     menu0_ && break;
fi
fi
#Menu 2
if [ "$selector" == "2" ] ; 
   then
         echo
		echo
		echo
		echo
        export DIR3=`echo "/${menu0_main2[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}This $DIR1$DIR2${fgred}/$DIR3${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR1$DIR2$DIR3
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", You just remove ${green}$DIR1$DIR2/${fgred}$DIR3 ${normal}"`
         menu1_ && break;
	else
	     menu1_ && break;
fi
fi
#Menu 3
if [ "$selector" == "3" ] ; 
   then
        echo
		echo
		echo
		echo
        export DIR4=`echo "/${menu0_main3[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}This $DIR1$DIR2$DIR3${fgred}$DIR4${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR1$DIR2$DIR3$DIR4
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", You just remove ${green}$DIR1$DIR2$DIR3${fgred}$DIR4${normal}"`
         menu2_ && break;
	else
	     menu2_ && break;
fi
fi
#Menu 4
if [ "$selector" == "4" ] ; 
   then
 echo
		echo
		echo
		echo
        export DIR5=`echo "/${menu0_main4[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}This $DIR1$DIR2$DIR3$$DIR4${fgred}$DIR5${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR1$DIR2$DIR3$DIR4$DIR5
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", You just remove ${green}$DIR1$DIR2$DIR3$DIR4${fgred}$DIR5${normal}"`
         menu3_ && break;
	else
	     menu3_ && break;
fi
fi
#Menu 5
if [ "$selector" == "5" ] ; 
   then
 echo
		echo
		echo
		echo
        export DIR6=`echo "/${menu0_main5[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}This $DIR1$DIR2$DIR3$DIR4$DIR5${fgred}$DIR6${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", You just remove ${green}$DIR1$DIR2$DIR3$DIR4$DIR5${fgred}$DIR6${normal}"`
         menu4_ && break;
	else
	     menu4_ && break;
fi
fi
#Menu 6
if [ "$selector" == "6" ] ; 
   then
 echo
		echo
		echo
		echo
        export DIR7=`echo "/${menu0_main6[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}This $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6${fgred}$DIR7${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", You just remove ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6${fgred}$DIR7${normal}"`
         menu5_ && break;
	else
	     menu5_ && break;
fi
fi
#Menu 6
if [ "$selector" == "7" ] ; 
   then
 echo
		echo
		echo
		echo
        export DIR8=`echo "/${menu0_main7[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}This $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7${fgred}$DIR8${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", You just remove ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7${fgred}$DIR8${normal}"`
         menu6_ && break;
	else
	     menu6_ && break;
fi
fi
#Menu 8
if [ "$selector" == "8" ] ; 
   then
 echo
		echo
		echo
		echo
        export DIR9=`echo "/${menu0_main8[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}This $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8${fgred}$DIR9${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", You just remove ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8${fgred}$DIR9${normal}"`
         menu7_ && break;
	else
	     menu7_ && break;
fi
fi
#Menu 9
if [ "$selector" == "9" ] ; 
   then
 echo
		echo
		echo
		echo
        export DIR10=`echo "/${menu0_main9[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}This $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9${fgred}$DIR10${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", You just remove ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9${fgred}$DIR10${normal}"`
         menu8_ && break;
	else
	     menu8_ && break;
fi
fi
#Menu 10
if [ "$selector" == "10" ] ; 
   then
 echo
		echo
		echo
		echo
        export DIR11=`echo "/${menu0_main10[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}This $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10${fgred}$DIR11${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", You just remove ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10${fgred}$DIR11${normal}"`
         menu9_ && break;
	else
	     menu9_ && break;
fi
fi
#Menu 11
if [ "$selector" == "11" ] ; 
   then
 echo
		echo
		echo
		echo
        export DIR12=`echo "/${menu0_main11[$counter]}" | awk '{print $1}'`
        echo
        local C1="$(printf "${menu}This $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11${fgred}$DIR12${menu} will be ${fgred}deleted${menu}! Please confirm (y/n): ${normal}\n")"
	    read -e -p "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
	    rm -rf $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11$DIR12
		echo
	    echo -e "${blink}Delete in progres ..... ${normal}"
	    sleep 1
		export  BANNER=`echo -e "Dear "$whoami", You just remove ${green}$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11${fgred}$DIR12${normal}"`
         menu10_ && break;
	else
	     menu10_ && break;
fi
fi
}

function samba_shares_managment_title1_ () {
#check_editor_pref_
 nano_banner_
 vim_banner_
 vi_banner_
IFS=$'\n' 
  set -f 
 CAT=$GREP
clear && echo && clear
	printf "${menu}${menu1}--------------------------------${normal}Local Group Managment${menu}${menu1}---------------------------${normal}\n"
	#echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}][${number}0${menu}]${normal}"         
	#echo -e "\n\t${menu}        Change folder permission and owner 5 simple steps                              ${normal}" 
	# echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "\t${menu}${menu1}Back to previous menu   [${number}b${menu}]${black}${blink}<=  =>${normal}${menu1}${menu}Go to user managment  [${number}u${menu}]  ${normal}"
	echo -e "\t${menu}${menu1}Back to main menu press [${number}q${menu}]${black}${blink}<=  =>${normal}${menu1}${menu}Go to samba managment [${number}s${menu}]  ${normal}"
	echo -e "\t${menu}${menu1}Get help                [${number}h${menu}]${black}${blink}<=    ${normal}${menu1}                           ${normal}"
	echo -e "\t${menu}${menu1}------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	#echo -e "$DIRLOCATION ${green} $CURLOCATION1 ${normal}"
	unset BANNER
} 

#Main Samba
 function samba_shares_managment_ () {
greetgusr_
check_editor_pref_
tput reset
chk_samba_install_
clear && echo && clear
 IFS=$'\n'       
  set -f 
 tput reset 
clear && echo && clear
# time_change_title_
# show_server_time_
# logo_findme_

# time_banner_
samba_shares_managment_title_  
echo -e "\n\t\t\t${menu}${under}Host: ${green}$hostname${normal}${under}${menu} Domain: $DOMAINBANN${normal}\n "
border_smb_connected_users_
border_all_smb_shares_ | grepegreennoblink 'Share Name'
echo
local TOPG1=`echo -e "\t${number}1. ${menu}View Samba Statistics${normal}"`
local TOPG2=`echo -e "\t${number}2. ${menu}Advance Share folder${normal}"` 
local TOPG3=`echo -e "\t${number}3. ${menu}Remove Samba Service${normal}"` 
local TOPG4=`echo -e "\t${number}4. ${menu}Generate Windows batch file${normal}"` 
local TOPG5=`echo -e "\t${number}5. ${menu}Back to main menu${normal}"`
# local TOPT5=`echo -e "\t${number}5. ${menu}Disable auto time Sync${normal}"` 
# # local OPT6=`echo -e "${number}5. ${menu}System Stat Managment${normal}"` 
# local TEXIT=`echo -e "\t${number}6. ${menu}Back to main menu${normal}"` 

declare -a menu0_main=($TOPG1 $TOPG2 $TOPG3 $TOPG4 $TOPG5) 
 counter=0 
 function draw_menu0_ () { 
 for i in "${menu0_main[@]}"; 
 do if [[ ${menu0_main[$counter]} == $i ]]; 
 then tput setaf 2; 
 echo -e "\t           ===>${menu1}${green}$i${normal}"; tput setaf 4
        else
          echo -e "\t           $i";  
        fi
		
    done
	}

function clear_menu0_()  {
    for i in "${menu0_main[@]}"; do 
	tput cuu1 setaf 0;
	done
	tput ed setaf 0
}

# Draw initial Menu
function select_from_list_ () {
draw_menu0_

while read -sn 1 key; 

do # 1 char (not delimiter), silent

    # Check for enter/space
    if [[ "$key" == "" ]]; 
	then
	
#run comand on selected item
if [ "$counter" == 0 ]; 
then
smb_details_
elif [ "$counter" == 1 ]; #Find pattern
then
samba_shares_advance_
elif [ "$counter" == 2 ]; 
then 
remove_samba_
clear
elif [ "$counter" == 3 ]; 
then 
clear
generate_batch_file_for_windows_share_
elif [ "$counter" == 4 ]; 
then 
clear
main_user_managment_samba_microsoft_ 
fi


time_banner_
	 unset C1
	 unset C3
	 unset C2
       start_
	fi
    # catch multi-char special key sequences 
	 
    read -sn2 -t 0.0005 k1; read -sN1 -t 0.0009 k2; read -sn2 -t 0.0005 k3
    key+=${k1}${k2}${k3}

    case "$key" in
	     1) smb_details_ ;;
		 2) samba_shares_advance_ ;;
		 3) remove_samba_ ;;
		 4) main_user_managment_samba_microsoft_ ;;
		# 5) uninstall_disable_ntp_ ;;
		  6) start_ ;;
		   $'\e') main_user_managment_samba_microsoft_ ;;
        # countersor up, left: previous item
		#left
		$'\e[D'|$'\e0D')   main_user_managment_samba_microsoft_ ;;
		
        ""|i|j|$'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
		
        # countersor down, right: next item
        ""|k|l|$'\e[B'|$'\e0B'|$'\e[C'|$'\e0C') ((counter < ${#menu0_main[@]}-1)) && ((counter++)) ;;
		
        # home: first item
       ""|$'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        ""|$'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main[@]}-1));;
		
         # q, carriage return: quit
        #x|q|''|$'\e') color_ && exit_ ;;
		x|q) start_ ;;
    esac
    # Redraw menu
	
    clear_menu0_
    draw_menu0_
done

}
select_from_list_

}

function generate_for_windows_group_policy_share_ () {

cat /etc/samba/smb.conf | awk '/]/ {print $0} ' |  sed 's/^[ \t]*//' | sed 's/^[[ \t]*//' | sed 's/]//g' | awk '{print "\\\\\\hostname\\"$0}' | sed "s/hostname/$hostname/g" > /tmp/findme/generatebatch.log
#GENERATEBATCH1=`cat /etc/samba/smb.conf | awk '/]/ {print $0} ' |  sed 's/^[ \t]*//' | sed 's/^[[ \t]*//' | sed 's/]//g' | awk '$0="net use Z: \\\\hostname\\"$0' | awk '{print $0" user_passwd /user:hostname\\Username /persistent:yes"} ' | sed "s/hostname/$hostname/g"`
#GENERATEBATCH1=`cat /etc/samba/smb.conf | awk '/]/ {print $0} ' |  sed 's/^[ \t]*//' | sed 's/^[[ \t]*//' | sed 's/]//g' | awk '{print "net use Z: \\\\hostname\\"$0}'  | awk '{print $0" user_passwd /user:hostname\\Username /persistent:yes"} ' | sed "s/hostname/$hostname/g"`
GENERATEBATCH=`cat /tmp/findme/generatebatch.log`
longstr=`(echo "$GENERATEBATCH" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 

echo -e "\n\t\t       ${menu}Use for Group Policy"
echo -e "\t\t    ${menu1}+$edge--+${normal}"

while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t\t    ${menu1}|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "  ${menu1}|${normal}"
 else
  echo -e "  ${menu1}|${normal}"
 fi
done < <(printf '%s\n' "$GENERATEBATCH")
echo -e "\t\t    ${menu1}+$edge--+${normal}"
}

function generate_batch_file_for_windows_share_ () {
samba_shares_managment_title_
logo_findme_
cat /etc/samba/smb.conf | awk '/]/ {print $0} ' |  sed 's/^[ \t]*//' | sed 's/^[[ \t]*//' | sed 's/]//g' | awk '{print "net use Z: \\\\\\hostname\\"$0}'  | awk '{print $0" user_passwd /user:hostname\\Username /persistent:yes"} ' | sed "s/hostname/$hostname/g" > /tmp/findme/generatebatch.log
#GENERATEBATCH1=`cat /etc/samba/smb.conf | awk '/]/ {print $0} ' |  sed 's/^[ \t]*//' | sed 's/^[[ \t]*//' | sed 's/]//g' | awk '$0="net use Z: \\\\hostname\\"$0' | awk '{print $0" user_passwd /user:hostname\\Username /persistent:yes"} ' | sed "s/hostname/$hostname/g"`
#GENERATEBATCH1=`cat /etc/samba/smb.conf | awk '/]/ {print $0} ' |  sed 's/^[ \t]*//' | sed 's/^[[ \t]*//' | sed 's/]//g' | awk '{print "net use Z: \\\\hostname\\"$0}'  | awk '{print $0" user_passwd /user:hostname\\Username /persistent:yes"} ' | sed "s/hostname/$hostname/g"`
GENERATEBATCH=`cat /tmp/findme/generatebatch.log`
longstr=`(echo "$GENERATEBATCH" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "\n\t\t    ${menu}Use for Batch or run from cmd${normal}"
echo -e "\t\t 1.You can change Z later to your own"
echo -e "\t\t 2.Change user_passwd to user password"
echo -e "\t\t 3.Change username to user password"
echo -e "${menu1}+$edge--+${normal}"

while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "${menu1}|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "  ${menu1}|${normal}"
 else
  echo -e "  ${menu1}|${normal}"
 fi
done < <(printf '%s\n' "$GENERATEBATCH")
echo -e "${menu1}+$edge--+${normal}"
echo
generate_for_windows_group_policy_share_
    pause_witout_exit_
    samba_shares_managment_
}



  
  



# # SHARESFOLDERS=`cat /etc/samba/smb.conf | awk '/]/ {print $0} ' |  sed 's/^[ \t]*//' | sed 's/^[[ \t]*//' | sed 's/]//g'`
# while read /tmp/findme/generatebatch.log ; do 
# for s in $SHARESFOLDERS; do 



#Local User Managment
function local_user_mgmt_title_ () {
#check_editor_pref_
unset BANNERLOCKED
unset BANNERLOCKED2
nano_banner_
vim_banner_
vi_banner_
chkifexist=`ls -a /tmp/findme | grep .lockedusers.log | wc -l `
chkifexist1=`cat /tmp/findme/.lockedusers.log | wc -l`
if [ "$chkifexist" != 0 ] && [ "$chkifexist1" != 0 ]; 
then
			BANNERLOCKED1=`cat $lockedusers`
			BANNERLOCKED=`echo "$BANNERLOCKED1"`
			BANNERLOCKED2=`echo "Blocked Users:"`
			else
			BANNERLOCKED=' '
			fi
 CAT=$GREP
  
 clear && echo && clear
 printf "${menu}${menu1}--------------------------------${normal}Local User Managment${menu}${menu1}---------------------------${normal}\n"
 #echo -e "${menu}${menu1}                                                                               ${normal}"
 	echo -e  "${menu1}${number}   1. ${menu}Create user       [${number}insert${menu}]      ${number}7. ${menu}Lock user                       [${number}a${menu}]   ${normal}"
	
	echo -e  "${menu1}${number}   2. ${menu}Delete user       [${number}delete${menu}] ${normal}${menu1}     ${number}8. ${menu}Unlock user                     [${number}s${menu}]   ${normal}"
           
	echo -e  "${menu1}${number}   3. ${menu}Add user to group [${number}+${menu}]           ${number}9. ${menu}Remove user from group          [${number}-${menu}]${normal}${menu1}   ${normal}"
	 echo -e  "${menu1}${number}   4. ${menu}Change passwd     [${number}p${menu}]${normal}${menu1}           ${number}10. ${menu}Add user to ${green}asterisk${menu} admin     [${number}A${menu}]   ${normal}" 
     echo -e  "${menu1}${number}   5. ${menu}Add User to Samba [${number}==>${menu}]${normal}${menu1}         ${number}11. ${menu}Reset passwd to Samba User     [${number}==>${menu}] ${normal}"  
     echo -e  "${menu1}${number}   6. ${menu}Add User to FTP   [${number}<==${menu}]${normal}${menu1}         ${number}12. ${menu}Generate new password for User [${number}G${menu}]   ${normal}"
     echo -e  "${menu1}${number}   *. ${menu}All Users Logins  [${number}L${menu}]${normal}${menu1}           ${number} *. ${menu}Show online FTP users          [${number}F${menu}]   ${normal}"    	 
   echo -e "${menu1}Alerts${normal}: $BANNER${normal}${menu1}${green}${normal}${green}$GREPBANN${normal}"
	#echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNERLOCKED2${number}\n$BANNERLOCKED${normal}        "
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
 
 
 }
 
function border_list_user_groups_ () {
findmepath=/tmp/findme
longstr=`(echo "$showusers" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "\t             ${menu1}+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t             ${menu1}|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "  ${menu1}|${normal}"
 else
  echo -e "  ${menu1}|${normal}"
 fi
done < <(printf '%s\n' "$showusers")
echo -e "\t             ${menu1}+$edge---+${normal}"
}

function border_user_passwd_nologin_ () {
clear && echo && clear
local_user_mgmt_title_
logo_findme_
export DELUSER=`echo "${userlist[$counter]} " | awk '{print  $1 }' `
SYSU=`cat /etc/passwd | grep $DELUSER | grep nologin | awk '{print "User "$0}' | awk -F':' '{ print $1, "system", "user", "without", "login"}' | awk '{$1=$1;print}' | sed '/^$/d'`
longstr=`(echo "$showusers" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$SYSU" | sed 's/./-/g') 
echo -e "\t             ${menu1}+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t             ${menu1}|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "  ${menu1}|${normal}"
 else
  echo -e "  ${menu1}|${normal}"
 fi
done < <(printf '%s\n' "$SYSU")
echo -e "\t             ${menu1}+$edge---+${normal}"
pause_witout_exit_
local_user_managment_
}



function list_user_groups_ () {
mkdir -p /tmp/findme/
findmepath=/tmp/findme

USERLIST=`cat $findmepath/.userlist.txt `
declare -a userlist=($USERLIST)
for i in  "${userlist[@]}"; do 
t=`groups $i `
 echo -e "\t$t "
done | tee >$findmepath/.userlistg.txt  
showusers=`cat /tmp/findme/.userlistg.txt | column -t ` 

 echo -e "\n\t              Users         Groups"
border_list_user_groups_ $showusers 
}

function create_list_user_groups_ () {
mkdir -p /tmp/findme/
findmepath=/tmp/findme
#cat /etc/sudoers | grep karia.local  | grep  -o -P '(?<=()).*(?=ALL=)'  | sed 's/%//g'

#getent group linuxadmin@karia.local | cut -d: -f4 | sed 's/,/ /g'  | awk '{print $1,"\n", $2,"\n"$3,"\n",$4,"\n",$5,"\n",$6,"\n",$7,"\n",$8,"\n",$9,"\n",$10"\n"}'  | sed '/^$/d' | sed 's/^[ \t]*//' | sed 's/,//g' | sed  '/^$/d'



cat /etc/passwd | grep -v 'daemon\|games\|backup\|sys\|uucp\|proxy\|syslog\|uuid\|sshd\|news\|list\|irc\|nobody\|gnats\|man' | grep -v 'radiusd\|rpc\|false\|shutdown\|halt\|operator\|dbus\|chrony\|polkitd\|adm' | grep -v 'sync\|messagebus\|landscape\|_apt\|ntp\|tcpdump\|lp\|sssd'  | awk -F':' '{ print $1 }' | tee >$findmepath/.userlist.txt
USERLIST=`cat $findmepath/.userlist.txt `
declare -a userlist=($USERLIST)
for i in  "${userlist[@]}"; do 
t=`groups $i ` 
 echo -e "\t$t "
done | tee >$findmepath/.userlistg.txt  
showusers=`cat /tmp/findme/.userlistg.txt   | column -t ` 

 echo -e "\n\t Users     All User Groups"
 echo -e "\t -----     ---------------"
#border_list_user_groups_ $showusers 
}

function border_show_users_last_login_ () {
findmepath=/tmp/findme
longstr=`(echo "$showusers" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "  |${normal}"
 else
  echo -e "  |${normal}"
 fi
done < <(printf '%s\n' "$showusers")
echo -e "+$edge---+${normal}"
}

function show_users_last_login_ () {
user_mgmt_cyber_title_
mkdir -p /tmp/findme/
findmepath=/tmp/findme

USERLIST=`cat $findmepath/.userlist.txt `
declare -a userlist=($USERLIST)
for i in  "${userlist[@]}"; do 
t=`last -F | grep $i | awk '{print  $1,"|", $3, "|",$6,"|", $5, "|", $8, "|", $7 }' | head -50 | grep -v reboot`
 echo -e "\t$t "
#last -F | grep root | awk '{print  $1,"|", $3, "|",$6,"|", $5, "|", $8, "|", $7 }' | sort | head -4
done | tee >$findmepath/.userlistglast.txt  
showusers=`cat $findmepath/.userlistglast.txt | column -t `

echo -e "                    ${menu}Last Users login${normal} "
 echo -e "\n Users        From IP        Day   Month    Year       Time"
border_show_users_last_login_ $showusers 

#echo -e "\n                    ${menu}Samba Users${normal} "
#border_smb_connected_users_
pause_witout_exit_ 
main_user_managment_samba_microsoft_
}

function border_last_login_per_user_ () {
findmepath=/tmp/findme
longstr=`(echo "$LASTU1" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "  |${normal}"
 else
  echo -e "  |${normal}"
 fi
done < <(printf '%s\n' "$LASTU1")
echo -e "+$edge---+${normal}"
}

function last_login_per_user_ () {
 LASTPERUSER=`echo "${userlist[$counter]} " | awk '{print  $1 }'`
 # LASTPERUSER1=`last -F | grep $LASTPERUSER`		
   local_user_mgmt_title_
    mkdir -p /tmp/findme/
     findmepath=/tmp/findme
# last -F | grep Hen | awk '{print  $1,"|", $3, "|",$6,"|", $5, "|", $8, "|", $7 }' | head -30 | grep -v reboot | column -t
       LASTU1=`last -F | grep $LASTPERUSER | awk '{print  $1,"|", $3, "|",$6,"|", $5, "|", $8, "|", $7 }' | head -30 | grep -v reboot | column -t`
        echo -e "                    ${menu}Last User login${normal} "
         echo -e "\n Users        From IP        Day   Month    Year       Time"
          border_last_login_per_user_ $LASTU1 
           pause_witout_exit_ 
            local_user_managment_
}

function add_user_to_smb_ () {

user_mgmt_cyber_title_
chk_samba_install_
echo -e "\n ${menu}Samba Users${normal} \n"
border_all_smb_users_
  export USER2GROUP=`echo "${userlist[$counter]} " | awk '{print  $1 }' `
  echo -e "\n${menu}For back press [${number}Enter${menu}]... ${normal}"
          local C1="$(printf "\n${menu}User ${green}$USER2GROUP${menu} will be added SMB or reset password (y/n): ${normal}\n")"
	      read -e -p 		  "$C1" user2group
if [ -z "$user2group" ] || [ "$user2group" == "n" ]; 
   then
   main_user_managment_samba_microsoft_
   fi
   SMBGROUPCHK=`compgen -g | grep Samba-User | wc -l`
   if [ "$SMBGROUPCHK" == 0 ]; 
   then
   groupadd Samba-User
   fi
        smbpasswd -a $USER2GROUP 
	    gpasswd -a $USER2GROUP Samba-User
	       	echo

			export  BANNER=`echo -e "Dear "$whoami", \nYou just add user ${green}$USER2GROUP${normal} to smb or reset password${normal}"`
		
			
			user_mgmt_cyber_title_
			echo
			echo
		echo -e "\n${menu}User $USER2GROUP was added to smb or reset password${normal}"
		sleep 1
            
			main_user_managment_samba_microsoft_
     


}


#Local Group Managment
 function local_group_mgmt_title_ () {
#check_editor_pref_
unset BANNERLOCKED
nano_banner_
vim_banner_
vi_banner_
unset BANNER
chkifexist=`ls -a /tmp/findme | grep .lockedusers.log | wc -l `
chkifexist1=`cat /tmp/findme/.lockedusers.log | wc -l`
if [ "$chkifexist" != 0 ] && [ "$chkifexist1" != 0 ]; 
then
			BANNERLOCKED1=`cat $lockedusers`
			BANNERLOCKED=`echo "$BANNERLOCKED1"`
			BANNERLOCKED2=`echo "Blocked Users:"`
			else
			BANNERLOCKED=' '
			fi
 CAT=$GREP
 
  # 0      0
 # /|\    /|\   
 # / \    / \  
 
  
 clear && echo && clear
 printf "${menu}${menu1}--------------------------------${normal}Local Group Managment${menu}${menu1}---------------------------${normal}\n"
 #echo -e "${menu}${menu1}                                                                               ${normal}"
 	echo -e  "${menu1}${number}                               1. ${menu}Create group         [${number}f${menu}]                      ${normal}"
	
	echo -e  "${menu1}${number}                               2. ${menu}Delete group         [${number}d${menu}]                      ${normal}"
           
	echo -e  "${menu1}${number}                               3. ${menu}Create group for DEV [${number}g${menu}]                      ${normal}"
	      
   echo -e "${menu1}Alerts${normal}${menu}: $BANNER${normal}${menu1}${green}${normal}${green}$GREPBANN${normal}"
	#echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNERLOCKED2${number}\n$BANNERLOCKED${normal}        "
	echo -e "${menu}${menu1}                                                                                ${normal}"
	#logo_findme_
SHOUGROUPS=`compgen -g | sort | column`

echo -e "$SHOUGROUPS" | grepegreen $choise2d
echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
 

 
 
 
 
 
 
 }
 
 function local_group_title_ () {
#check_editor_pref_
 nano_banner_
 vim_banner_
 vi_banner_
IFS=$'\n' 
  set -f 
 CAT=$GREP
clear && echo && clear
	printf "${menu}${menu1}--------------------------------${normal}Local Group Managment${menu}${menu1}---------------------------${normal}\n"
	#echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}][${number}0${menu}]${normal}"         
	#echo -e "\n\t${menu}        Change folder permission and owner 5 simple steps                              ${normal}" 
	# echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "\t${menu}${menu1}Back to previous menu   [${number}b${menu}]${black}${blink}<=  =>${normal}${menu1}${menu}Go to user managment  [${number}u${menu}]  ${normal}"
	echo -e "\t${menu}${menu1}Back to main menu press [${number}q${menu}]${black}${blink}<=  =>${normal}${menu1}${menu}Go to samba managment [${number}s${menu}]  ${normal}"
	echo -e "\t${menu}${menu1}Get help                [${number}h${menu}]${black}${blink}<=    ${normal}${menu1}                           ${normal}"
	echo -e "\t${menu}${menu1}------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	#echo -e "$DIRLOCATION ${green} $CURLOCATION1 ${normal}"
	unset BANNER
} 

 function local_group_mgmt_ () {
greetgusr_
check_editor_pref_
tput reset
clear && echo && clear
 IFS=$'\n'       
  set -f 
 tput reset
clear && echo && clear
# time_change_title_
# show_server_time_
# logo_findme_

# time_banner_
local_group_mgmt_title_
echo
local TOPG1=`echo -e "\t${number}1. ${menu}Create group${normal}"`
local TOPG2=`echo -e "\t${number}2. ${menu}Delete group${normal}"` 
local TOPG3=`echo -e "\t${number}3. ${menu}Create group for DEV${normal}"` 
local TOPG4=`echo -e "\t${number}4. ${menu}Back to main menu${normal}"` 
# local TOPT5=`echo -e "\t${number}5. ${menu}Disable auto time Sync${normal}"` 
# # local OPT6=`echo -e "${number}5. ${menu}System Stat Managment${normal}"` 
# local TEXIT=`echo -e "\t${number}6. ${menu}Back to main menu${normal}"` 

declare -a menu0_main=($TOPG1 $TOPG2 $TOPG3 $TOPG4) 
 counter=0 
 function draw_menu0_ () { 
 for i in "${menu0_main[@]}"; 
 do if [[ ${menu0_main[$counter]} == $i ]]; 
 then tput setaf 2; 
 echo -e "\t           ===>${menu1}${green}$i${normal}"; tput setaf 4
        else
          echo -e "\t           $i";  
        fi
		
    done
	}

function clear_menu0_()  {
    for i in "${menu0_main[@]}"; do 
	tput cuu1 setaf 0;
	done
	tput ed setaf 0
}

# Draw initial Menu
function select_from_list_ () {
draw_menu0_

while read -sn 1 key; 

do # 1 char (not delimiter), silent

    # Check for enter/space
    if [[ "$key" == "" ]]; 
	then
	
#run comand on selected item
if [ "$counter" == 0 ]; 
then
create_new_group_
elif [ "$counter" == 1 ]; #Find pattern
then
delete_group_
elif [ "$counter" == 2 ]; 
then 
add_dev_group_
clear
elif [ "$counter" == 3 ]; 
then 
clear
main_user_managment_samba_microsoft_ 

fi
time_banner_
	 unset C1
	 unset C3
	 unset C2
       start_
	fi
    # catch multi-char special key sequences 
	 
    read -sn2 -t 0.0005 k1; read -sN1 -t 0.0009 k2; read -sn2 -t 0.0005 k3
    key+=${k1}${k2}${k3}

    case "$key" in
	     1) create_new_group_ ;;
		 2) delete_group_ ;;
		 3) add_dev_group_ ;;
		 4) main_user_managment_samba_microsoft_ ;;
		# 5) uninstall_disable_ntp_ ;;
		  6) start_ ;;
		   $'\e') main_user_managment_samba_microsoft_ ;;
        # countersor up, left: previous item
		#left
		$'\e[D'|$'\e0D')   main_user_managment_samba_microsoft_ ;;
		
        ""|i|j|$'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
		
        # countersor down, right: next item
        ""|k|l|$'\e[B'|$'\e0B'|$'\e[C'|$'\e0C') ((counter < ${#menu0_main[@]}-1)) && ((counter++)) ;;
		
        # home: first item
       ""|$'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        ""|$'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main[@]}-1));;
		
         # q, carriage return: quit
        #x|q|''|$'\e') color_ && exit_ ;;
		x|q) start_ ;;
    esac
    # Redraw menu
	
    clear_menu0_
    draw_menu0_
done

}
select_from_list_
}
 
function grepegreen () {
    GREP_COLOR='5;01;32'  grep --color -E -i "$1|$" $2
}

function delete_group_ () {
local_group_mgmt_title_

# echo -e "\n                       ${menu}All active groups${normal}"
# echo -e "${menu}--------------------------------------------------------------------------------${normal}"
# echo -e "$SHOUGROUPS"
# echo -e "${menu}--------------------------------------------------------------------------------${normal}\n"
echo -e "\n${menu}For back press [${number}Enter${menu}]... ${normal}"
          local C1="$(printf "${menu}Type group name you wish to delete: ${normal}\n")"
	      read -e -p "$C1" choise2d
if [ -z "$choise2d" ] || [ -z "$choise2d" ]; 
   then
   local_group_mgmt_
   fi
   
	        groupdel $choise2d
		
	        sleep 1
			export  BANNER=`echo -e "Dear "$whoami", You just removed ${blink}${fgred}$choise2d${fgred}${normal}"`
			
		
local_group_mgmt_	
			local_group_mgmt_title_
echo -e "$SHOUGROUPS" | grepegreen $choise2d
			pause_witout_exit_
            local_group_mgmt_

}

function create_new_group_ () {
local_group_mgmt_title_

# SHOUGROUPS=`compgen -g | sort | column`
# echo -e "\n                       ${menu}All active groups${normal}"
# echo -e "${menu}--------------------------------------------------------------------------------${normal}"
# echo -e "$SHOUGROUPS"
# echo -e "${menu}--------------------------------------------------------------------------------${normal}\n"
echo -e "\n${menu}For back press [${number}Enter${menu}]... ${normal}"
          local C1="$(printf "${menu}Type name for new group: ${normal}\n")"
	      read -e -p "$C1" choise2d
if [ -z "$choise2d" ] || [ -z "$choise2d" ]; 
   then
   local_group_mgmt_
   fi

   
	        groupadd $choise2d
		
	        sleep 1
			export  BANNER=`echo -e "Dear "$whoami", You just create ${fgred}$choise2d${fgred}${normal}"`
			
			#echo -e "${menu}New Dev group secsefully created now you can create user and add him to dev group\nAnd developer can connect with winscp or use this link:\n ${green}https://pro-wiki.com/knowledgebase/centos-7-manage-users-setup-winscp-to-root-user-without-pass/${normal}			${normal}"
		local_group_mgmt_	
			SHOUGROUPS=`compgen -g | sort | column`
			local_group_mgmt_title_
echo -e "$SHOUGROUPS" | grepegreen $choise2d
			pause_witout_exit_
            local_group_mgmt_

}

function add_dev_group_ () {
          echo -e "\n${menu}For back press [${number}Enter${menu}]... ${normal}"
          local C1="$(printf "${menu}Type name for dev group: ${normal}\n")"
	      read -e -p "$C1" choise2d
if [ -z "$choise2d" ] || [ -z "$choise2d" ]; 
   then
   local_group_mgmt_
   fi
   
    GROUPDEVCHK=`cat /etc/sudoers | grep dev | wc -l`
   if [ -z "$choise2d" ] || [ -z "$choise2d" ]; 
   then
   local_group_mgmt_
   fi
	        groupadd $choise2d
			
			echo "Cmnd_Alias choise2d = /bin/login ,/bin/chown, /bin/chmod, /bin/chgrp ,/bin/mkdir ,/bin/rm ,/bin/rename ,/bin/read ,/bin/replace ,/bin/mv ,/bin/cp ,/bin/cd ,/bin/scp ,/bin/sh ,/bin/expand ,/bin/rmdir ,/bin/size ,/bin/su " >> /etc/sudoers
            echo ""%"choise2d   ALL=(ALL)      NOPASSWD: choise2d" >> /etc/sudoers
			sed -i "s+choise2d+$choise2d+g" /etc/sudoers
			echo -e "${blink}Creating in progres ..... ${normal}"
	        sleep 1
			export  BANNER=`echo -e "Dear "$whoami", You just create ${fgred}$ADDUSER${fgred}${menu0_main0[$counter]}${normal}"`
		
			echo -e "${menu}New Dev group secsefully created now you can create user and add him to [$choise2d] group\nAnd developer can connect with winscp or use this link:\n ${green}https://pro-wiki.com/knowledgebase/centos-7-manage-users-setup-winscp-to-root-user-without-pass/${normal}			${normal}"
			pause_witout_exit_
            local_group_mgmt_

}



#local user managment
function add_user_to_group_asterisk_ () {
local_user_mgmt_title_
SHOUGROUPS=`compgen -g | sort | column `
echo -e "\n                       ${menu}All active groups${normal}"
echo -e "${menu}--------------------------------------------------------------------------------${normal}"
echo -e "$SHOUGROUPS"
echo -e "${menu}--------------------------------------------------------------------------------${normal}\n"
  export USER2GROUP=`echo "${userlist[$counter]} " | awk '{print  $1 }' `
          local C1="$(printf "\n${menu}User ${green}$USER2GROUP${menu} will be added to asterisk managment (y/n): ${normal}\n")"
	      read -e -p 		  "$C1" user2group
if [ -z "$user2group" ] || [ -z "$user2group" ] || [ "$user2group" == "n"]; 
   then
   local_user_managment_
   fi
       gpasswd -a $USER2GROUP asterisk
	   gpasswd -a $USER2GROUP wheel
	   cd /usr/sbin && chmod 755 asterisk
	       	echo

			export  BANNER=`echo -e "Dear "$whoami", You just add user ${green}$USER2GROUP${normal} to group ${green}asterisk${normal}"`
		
			
			local_user_managment_
			echo
			echo
		echo -e "\n${menu}User $USER2GROUP was added to group ${green}asterisk ${normal}"
		sleep 1
            
			local_user_managment_
     


}

function remove_user_from_group_ () {
 export USER2GROUP=`echo "${userlist[$counter]} " | awk '{print  $1 }' `
function border_remove_user_from_groups_ () {
findmepath=/tmp/findme
SHOUGROUPS=`groups $USER2GROUP | awk '{print $3,$4,$5,$6,$7,$8}'`
longstr=`(echo "$SHOUGROUPS" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "\t             ${menu1}+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t             ${menu1}|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "  ${menu1}|${normal}"
 else
  echo -e "  ${menu1}|${normal}"
 fi
done < <(printf '%s\n' "$SHOUGROUPS")
echo -e "\t             ${menu1}+$edge---+${normal}"
}

border_remove_user_from_groups_

local_user_mgmt_title_
echo -e "\n                         ${menu}User groups${normal}"
border_remove_user_from_groups_ 
  export USER2GROUP=`echo "${userlist[$counter]} " | awk '{print  $1 }' `
  echo -e "\n${menu}For back press [${number}Enter${menu}]... ${normal}"
          local C1="$(printf "\n${menu}Type group name from the list you want to remove user ${green}$USER2GROUP${menu}: ${normal}\n")"
	      read -e -p 		  "$C1" user2group
if [ -z "$user2group" ] || [ -z "$user2group" ]; 
   then
   local_user_managment_
   fi
       gpasswd -d $USER2GROUP $user2group
	       	echo

			export  BANNER=`echo -e "Dear "$whoami", You just remove user ${green}$USER2GROUP${normal} from group ${green}$user2group${normal}"`
		
			
		local_user_managment_
			echo
		echo -e "\n${menu}User $USER2GROUP was removed from group ${green}$user2group ${normal}"
		sleep 1
            
			local_user_managment_
     


}

function new_usr_dtl_ () {
echo -e "User: $newusername1$GENERATENEWP " 
echo -e "Pass: $SHOWSISMA"
}

function border_new_local_user_created_ () {
longstr=`(echo "$(new_usr_dtl_)" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "\n\n\t\t\t${menu}    User Details${normal} "
echo -e "\t\t+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t\t|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "  |${normal}"
 else
  echo -e "  |${normal}"
 fi
done < <(printf '%s\n' "$(new_usr_dtl_)")
echo -e "\t\t+$edge---+${normal}"
}

function create_user_generate_passwd_ {
#Generate Password and Create New User
clear && echo && clear
local_user_mgmt_title_
logo_findme_
SISMA=`openssl rand -base64 20 | sed 's/=//g' | sed 's/+/-/g' | sed 's+/+GenKa+g' `
SHOWSISMA=`echo $SISMA`
useradd -m -p $(openssl passwd -1 $SHOWSISMA)  $newusername1
clear && echo && clear
clear && echo && clear
local_user_mgmt_title_
logo_findme_
border_new_local_user_created_
unset SHOWSISMA
pause_witout_exit_
local_user_managment_
}

function generate_password_for_existing_user_ () {
unset SHOWSISMA
GENERATENEWP=`echo "${userlist[$counter]} " | awk '{print  $1 }' `
echo  > /usr/lib/cssam/mod/tmp/.sismuy.tmp
SISMA=`openssl rand -base64 20 | sed 's/=//g' | sed 's/+/HuY/g' | sed 's+/+GenNady+g' `
SHOWSISMA=`echo $SISMA`
useradd -p $(openssl passwd -1 $SHOWSISMA) $GENERATENEWP
echo -e "$SHOWSISMA\n$SHOWSISMA" | passwd $GENERATENEWP
local_user_mgmt_title_
logo_findme_
border_new_local_user_created_
unset SHOWSISMA
echo > /usr/lib/cssam/mod/tmp/.sismuy.tmp
pause_witout_exit_
local_user_managment_
# unset SHOWSISMA
# read -s -p "Please copy Password"
}

function generate_new_user_password_ () {
clear && echo && clear
local_user_mgmt_title_
logo_findme_
SISMA=`openssl rand -base64 20 | sed 's/=//g' | sed 's/+/HuY/g' | sed 's+/+GenNady+g' `
SHOWSISMA=`echo $SISMA`
echo -e "$SHOWSISMA\n$SHOWSISMA" | passwd $newusername1
clear && echo && clear
clear && echo && clear
local_user_mgmt_title_
logo_findme_
border_new_local_user_created_
unset SHOWSISMA
pause_witout_exit_
local_user_managment_
}

function create_user_ () {
 tput reset
#clear && echo && clear
 #   clear && echo && clear
	echo -e "\t${menu}${menu1}------------------------------------------------------------${normal}"
	echo -e "\t${menu}${menu1}                   ${bgwhite}${menu}Create New System User             ${menu}${menu1}      ${normal}"
	echo -e "\t${menu}${menu1}                                                            ${normal}"
	echo -e "\t${menu}${menu1}                      ${black}${blink}====>${normal}${menu}${menu1}FindMe${menu1}${black}${blink}<====${normal}${menu1}                      ${normal}"
	echo -e "\t${menu}${menu1}------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	unset TIMEMENUBANNER
				 logo_findme_
				 list_user_groups_
export UBUNTU=`awk -F= '/^NAME/{print $2}' /etc/os-release | grep -o Ubuntu | wc -l`
export CENTOS=`awk -F= '/^NAME/{print $2}' /etc/os-release | grep -o CentOS | wc -l`
export SANGOMA=`awk -F= '/^NAME/{print $2}' /etc/os-release | grep -o Sangoma | wc -l`
local UBUNTUHTTPD=`pgrep -x apache2 | wc -l`
local CENTOSHTTPD=`pgrep -x smbd | wc -l`

  export ADDUSER=`echo "${userlist[$counter]} " | awk '{print  $1 }' `
  
  # echo -e "\n${menu}For back press [${number}Enter${menu}] ${normal}"
          printf "\n\t       ${menu}Type new username or [${number}Enter${menu}] for back${normal}"
		  local C1="$(printf "\n\t       ${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
	      read -e -p 		  "$C1" newusername1
		  local C2="$(printf "\t       ${menu}Add user to sudoers (y/n) ?: ${normal}\n")"
	      read -e -p 		  "$C2" addtogroup
		  if [ -z "$newusername1" ] || [ -z "$addtogroup"  ] || [ "$newusername1" == "" ];
		   then
		   local_user_managment_
		   fi
		  if [ "$addtogroup" == "n" ] || [ "$addtogroup" == "N" ];
		   then
		   if [ "$CENTOS" == 1 ] || [ "$SANGOMA" == 1 ] ;
	    then
		   adduser $newusername1
		    local C2="$(printf "\t   ${menu}Set password for user $newusername ${normal}\n")"
			
			 generate_new_user_password_
			 echo
			   echo -e "\t          ${blink}Creating in progress ..... ${normal}"
	         
			 local_user_managment_
			 elif [ "$UBUNTU" == 1 ];
			then
			echo
			 create_user_generate_passwd_
			   echo -e "\t          ${blink}Creating in progress ..... ${normal}"
	         
			 local_user_managment_
		   fi
		   fi
if [ "$newusername1" == "y" ] || [ "$newusername1" == "" ] || [ "$addtogroup" == "y" ] || [ "$addtogroup" == "" ]; 
   then      
   
      if [ "$CENTOS" == 1 ] || [ "$SANGOMA" == 1 ];
	    then
             adduser $newusername1 
			    gpasswd -a $newusername1 wheel
				 echo
				 echo
			     #local_user_mgmt_title_
			      local C2="$(printf "\t   ${menu}Set password for user $newusername ${normal}\n")"
				   generate_new_user_password_
				    export  BANNER=`echo -e "Dear "$whoami", You just create admin user ${fgred}$newusername1${fgred} and added to group wheel${menu0_main0[$counter]}${normal}"`
         elif [ "$UBUNTU" == 1 ];
			then
			   create_user_generate_passwd_ 
			     gpasswd -a $newusername1 sudo
				 export  BANNER=`echo -e "Dear "$whoami", You just create admin user ${fgred}$newusername1${fgred}and added to group wheel${menu0_main0[$counter]}${normal}"`
	   fi
	        echo -e "\t   ${blink}Creating in progress ..... ${normal}"
	        
			 
	         
			 export  BANNER=`echo -e "Dear "$whoami", You just create ${fgred}$newusername1${fgred}${menu0_main0[$counter]}${normal}"`
            local_user_managment_
   else
	   local_user_managment_     
fi
}

function delete_users_ () {
  export DELUSER=`echo "${userlist[$counter]} " | awk '{print  $1 }' `
          local C1="$(printf "\n${menu}User ${blink}${green}$DELUSER${normal}${menu} also will be ${under}deleted${normal}${menu} from SMB (y/n) or [${normal}Enter${menu}] to yes${menu}: ${normal}\n")"
	      read -e -n 1 -p 		  "$C1" choise2d
		  if [ "$choise2d" == "n" ] || [ "$choise2d" == "N" ]; 
   then
		local_user_managment_
fi		
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
   
    sed -i "s/$DELUSER//" /etc/vsftpd/chroot_list 
	        userdel -r $DELUSER
			
			SMBCHK=`ps -ef | grep [s]mb | wc -l`
             if [ "$SMBCHK" != 0 ];
                   then
                  pdbedit -x -u $DELUSER
	                 fi
			
	       	echo
	        sed -i "/$DELUSER/d" $lockedusers
			
			# local C2="$(printf "\n${menu}Also delete /home/${fgred}$DELUSER${normal}${menu} of user ${fgred}$DELUSER${menu} (y/n${normal}${menu}) or [${number}Enter${menu}] to delete: ${normal}\n")"
	      # read -e -p "$C2" delhomefolder
# if [ "$delhomefolder" == "y" ] || [ "$delhomefolder" == "" ]; 
# then    
          
			# userdel -r $DELUSER
			# sed -i "/$DELUSER/d" $lockedusers
# fi

echo -e "${blink}Delete in progres ..... ${normal}"
	        sleep 1
			export  BANNER=`echo -e "Dear "$whoami", You just remove ${fgred}$DELUSER${fgred}${menu0_main0[$counter]}${normal}"`
            local_user_managment_
   else
	   local_user_managment_     
fi
}

function lock_user_ () {
local chkifexist=`ls -a /tmp/findme | grep .lockedusers.log | wc -l `
if [ "$chkifexist" == 0 ];
then 
echo '' > $lockedusers
sed -i '/^$/d' $lockedusers 
fi
  export LOCKUSER=`echo "${userlist[$counter]} " | awk '{print  $1 }' `
          local C1="$(printf "\n${menu}User ${fgred}$LOCKUSER${menu} will be ${fgred}locked${menu}! Please confirm (y/n): ${normal}\n")"
	      read -e -p 		  "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
       passwd -l $LOCKUSER
	       	echo
			export  BANNER=`echo -e "Dear "$whoami", You just locked user ${fgred}$LOCKUSER${fgred}${menu0_main0[$counter]}${normal}"`
			echo $LOCKUSER >> $lockedusers
            sed -i '/^$/d' $lockedusers
			local chkusr=`cat $lockedusers | grep $LOCKUSER | wc -l `
			if [ "$chkusr" == 2 ]; then
			sed -i "/$LOCKUSER/d" $lockedusers
			echo $LOCKUSER >> $lockedusers
			fi
			if [ "$chkifexist" != 0 ]; then
			BANNERLOCKED1=`cat $lockedusers`
			BANNERLOCKED=`echo "Blocked Users:\n$BANNERLOCKED1"`
			else
			return 0
			fi
			local_user_managment_
			echo
			echo
		echo -e "${menu}User $LOCKUSER was ${green}locked${normal}"
		sleep 1
            
			local_user_managment_
   else
	   local_user_managment_     
fi
}

function unlock_user_ () {
  export UNLOCKUSER=`echo "${userlist[$counter]} " | awk '{print  $1 }' `
          local C1="$(printf "\n${menu}User ${fgred}$LOCKUSER${menu} will be ${green}unlocked${menu} Please confirm (y/n): ${normal}\n")"
	      read -e -p 		  "$C1" choise2d
if [ "$choise2d" == "y" ] || [ "$choise2d" == "" ]; 
   then
       passwd -u $UNLOCKUSER
	       	echo
          sed -i "/$UNLOCKUSER/d" $lockedusers
			export  BANNER=`echo -e "Dear "$whoami", You just unlocked user ${fgred}$UNLOCKUSER${fgred}${menu0_main0[$counter]}${normal}"`
			local_user_managment_
			echo
			echo
		echo -e "${menu}User $UNLOCKUSER was ${green}unlocked${normal}"
		sleep 1
            
			local_user_managment_
   else
	   local_user_managment_     
fi
}

function change_password_ () {
  export CHNGPASSWD=`echo "${userlist[$counter]} " | awk '{print  $1 }' `
       passwd  $CHNGPASSWD
	       	echo
			export  BANNER=`echo -e "Dear "$whoami", You just chenged password for ${blink}${fgred}$CHNGPASSWD${normal}"`
	   local_user_managment_     

}

function add_user_to_group_ () {
local_user_mgmt_title_
SHOUGROUPS=`compgen -g | sort | column`
echo -e "\n                       ${menu}All active groups${normal}"
echo -e "${menu}--------------------------------------------------------------------------------${normal}"
echo -e "$SHOUGROUPS"
echo -e "${menu}--------------------------------------------------------------------------------${normal}\n"
  export USER2GROUP=`echo "${userlist[$counter]} " | awk '{print  $1 }' `
  echo -e "\n${menu}For back press [${number}Enter/n${menu}]... ${normal}"
          local C1="$(printf "\n${menu}Type group name you wish to add user ${green}$USER2GROUP${normal}: ${normal}\n")"
	      read -e -p 		  "$C1" user2group
if [ -z "$user2group" ] || [ -z "$user2group" ] || [ "$user2group" == "n" ];
   then
   local_user_managment_
   fi
       gpasswd -a $USER2GROUP $user2group
	       	echo

			export  BANNER=`echo -e "Dear "$whoami", \nYou just add user ${green}$USER2GROUP${normal} to group ${green}$user2group${normal}"`
		
			local_user_mgmt_title_
			echo
			echo
		echo -e "\n${menu}User $USER2GROUP was added to group ${green}$user2group ${normal}"
		sleep 1
            
			local_user_managment_
     }

function get_root_users_ () {
echo  > stam1.log
echo  > stam2.log
getu1=`getent group wheel | cut -d: -f4`
getu2=`getent group sudo | cut -d: -f4`
getu3=`getent group admin | cut -d: -f4`
getu4=`sudo cat /etc/sudoers | grep --color=always -o -P '(?<=(^)).*(?=ALL=)' | grep -v % | grep -v "#"`
echo $getu1 >> stam1.log 
echo $getu2 >> stam1.log 
echo $getu3 >> stam1.log 
echo $getu4 >> stam1.log
sed -i '/^$/d' stam1.log
sed -i "s/,/ /g" stam1.log
getu5=`cat stam1.log | tr ' ' "\n" > stam2.log`
sed '$d'  stam2.log >stam1.log
printf %b '\033[m'

local chk=`cat stam1.log | wc -l`
printf %b '\033[m'



}





#FTP Users 
function create_ftp_ip_connect_list_ () {
FTPPORT=`cat /etc/vsftpd/vsftpd.conf | grep listen_port | sed 's/listen_port=//g'`
IPLFTP=`hostname -I | awk '{print $1,"\n"$2,"\n",$3  }' | sed  '/:/d' |  awk 'NF > 0' | sed 's/^[ \t]*//' | sed 's/[[:blank:]]*$//' `
for i in $IPLFTP; do echo -e "ftp://$USER2GROUP:password@$i:$FTPPORT" ; done
}

function border_create_ftp_ip_connect_list_ () {

#DOMFIN=`realm list |  awk '/domain-name|login-formats|login-policy|permitted/ {print $1,"|",$2,$3,$4,$5,$6,$7,$8,$9,$10}' | sed 's/%U/username/g' | sed 's/domain-name:/Join-Domain/g' | sed 's/login-formats:/1.Login-Format/g' | sed 's/login-policy:/2.Login-Policy/g' | sed 's/allow-realm-logins/Any-domain-user-can-login-to-ssh/g' | sed 's/permitted-logins:/3.Permitted-Users/g' | sed 's/permitted-groups:/4.Permitted-Groups/g'  | column -t`
longstr=`(echo "$(create_ftp_ip_connect_list_)" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "\t\t   ${menu1}+$edge-+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t\t   ${menu1}|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "${menu1}|${normal}"
 else
  echo -e "${menu1}|${normal}"
 fi
done < <(printf '%s\n' "$(create_ftp_ip_connect_list_)")
echo -e "\t\t   ${menu1}+$edge-+${normal}"
echo -e "\t\t  ${menu}     Just Change ${green}password${normal}"
}

function border_vsftpd_ () {
DOMFIN=`cat /etc/vsftpd/vsftpd.conf`
FTPPORT=`cat /etc/vsftpd/vsftpd.conf | grep listen_port | sed 's/listen_port=//g'`
#DOMFIN=`realm list |  awk '/domain-name|login-formats|login-policy|permitted/ {print $1,"|",$2,$3,$4,$5,$6,$7,$8,$9,$10}' | sed 's/%U/username/g' | sed 's/domain-name:/Join-Domain/g' | sed 's/login-formats:/1.Login-Format/g' | sed 's/login-policy:/2.Login-Policy/g' | sed 's/allow-realm-logins/Any-domain-user-can-login-to-ssh/g' | sed 's/permitted-logins:/3.Permitted-Users/g' | sed 's/permitted-groups:/4.Permitted-Groups/g'  | column -t`
longstr=`(echo "$DOMFIN" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 

echo -e "\t\t\t${menu}    FTP Port is ${fgred}$FTPPORT${normal}"
echo -e "\t\t  ${menu} You can change FTP port from FTP managment${normal}"
echo -e "\t\t   ${menu1}+$edge-+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t\t   ${menu1}|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "${menu1}|${normal}"
 else
  echo -e "${menu1}|${normal}"
 fi
done < <(printf '%s\n' "$DOMFIN")
echo -e "\t\t   ${menu1}+$edge-+${normal}"

}

function add_ftp_users_to_ftp_group_ () {

FTPUSERS=`cat /etc/vsftpd/chroot_list`
for i in $FTPUSERS ; do gpasswd -a $i FTP-User ; done

}

function add_existing_ftp_users_to_ftp_group_ () { 
FTPCHKwqINS=`compgen -g | grep FTP-User | wc -l`
FTPCHRTTK=`ps -ef | grep [vs]ftpd | wc -l`
 
if [ "$FTPCHKwqINS" == 0 ] && [ "$FTPCHRTTK" != 0 ];
  then
     groupadd FTP-User
    add_ftp_users_to_ftp_group_
	local_user_managment_
   fi
}

function install_ftp_ () {
clear && echo && clear

if [ "$CENTOS" == 1 ] || [ "$SANGOMA" == 1 ] ;
	    then
		  echo -e "\n\n\n\n\n\n\n"

echo -e  "\t\t\t${blink}${number}Instaling FTP server.... Please Wait${normal}"
yum install vsftpd -y   
	  clear && echo && clear      
systemctl enable vsftpd 
systemctl start vsftpd
systemctl restart vsftpd
			clear && echo && clear
			 echo -e "\n\n\n\n\n\n\n"
 logo_findme_
			
			 echo
			 export  BANNER=`echo -e "Dear "$whoami", You just installed ${number}FTP${menu0_main0[$counter]}${normal}"`
			 add_existing_ftp_users_to_ftp_group_
			 
elif [ "$UBUNTU" == 1 ];
	then
	echo -e "\n\n\n\n\n\n\n"
     logo_findme_
      confirm_users_
#main_user_managment_samba_microsoft_
        echo -e  "\t\t\t${blink}${number}Instaling FTP server.... Please Wait${normal}"
         sudo apt-get install vsftpd -y
	      echo -e "\n\n\n\n\n\n\n"
		  clear && echo && clear
           logo_findme_
		   
            export  BANNER=`echo -e "Dear "$whoami", You just installed ${number}FTP${menu0_main0[$counter]}${normal}"`
systemctl enable vsftpd 
systemctl start vsftpd
systemctl restart vsftpd
clear && echo && clear
			 add_existing_ftp_users_to_ftp_group_
			
		   fi


cat > /etc/vsftpd/vsftpd.conf << EOF
listen_port=48821
ftp_data_port=48820
pasv_max_port=48890
pasv_min_port=48830
anonymous_enable=NO
local_enable=YES
write_enable=YES
local_umask=022
dirmessage_enable=YES
xferlog_enable=YES
connect_from_port_20=YES
xferlog_std_format=YES
chroot_local_user=NO
chroot_list_enable=YES
chroot_list_file=/etc/vsftpd/chroot_list
allow_writeable_chroot=YES
setproctitle_enable=YES
listen=YES
listen_ipv6=NO
pam_service_name=vsftpd
userlist_enable=YES
tcp_wrappers=YES
EOF
 
#Create chroot_list file with all permited users
touch  /etc/vsftpd/chroot_list 
sed -i '/^$/d' /etc/vsftpd/chroot_list && sed -i 's/^[ \t]*//' /etc/vsftpd/chroot_list

#generate_new_password_for_alerter_
sleep 3
echo -e -n "\t\t\t${blink}${number}Starting FTP server. Please Wait${normal}\n\n"
systemctl enable vsftpd
systemctl start vsftpd
systemctl restart vsftpd
sleep 2
clear
#Add group to Deny
echo 'DenyGroups FTP-User #NextGroup' >>  /etc/ssh/sshd_config && sed -i.bak-$LD '$!N; /^\(.*\)\n\1$/!P; D' /etc/ssh/sshd_config
systemctl restart sshd
add_existing_ftp_users_to_ftp_group_

firewall-cmd --permanent --add-port=48821/tcp
firewall-cmd --reload
clear && echo && clear
local_user_mgmt_title_
logo_findme_
border_vsftpd_
echo -e -n "\t\t      ${menu}For Security Reason FTP port is 48821${normal}\n\n"
border_create_ftp_ip_connect_list_
pause_witout_exit_
systemctl restart vsftpd
local_user_managment_
}

function chk_ftp_if_instaled_ () {
FTPCHRTTK=`ps -ef | grep [vs]ftpd | wc -l`
CHKCHROOTFILE=`ls /etc | grep vsftpd | wc -l`
 if [ "$CHKCHROOTFILE" == 0 ] || [ "$FTPCHRTTK" == 0 ];
	 then
	 clear && echo && clear
      local_user_mgmt_title_
      logo_findme_
       echo -e "\n\t\t\t${menu}Sorry You dont have Installed FTP server${normal}"
	   #echo -e "\n\t\t\t${menu}Press [${number}Enter${menu}] to Install [${number}n${menu}] to No${normal}"
	   local C1="$(printf "\n\t\t\t${menu}Press [${number}Enter${menu}] to Install [${number}n${menu}] to Back: ${normal}")"
	      read -e -s -n 1 -p "$C1" INSTALLFTP
	   
	   if [ "$INSTALLFTP" == "" ] || [ "$INSTALLFTP" == "Y" ] || [ "$INSTALLFTP" == "y" ];
	   then
	   install_ftp_
	   local_user_managment_
	   fi
	   fi
}	 
 
function show_connected_ftp_users_ () {

clear && echo && clear
local_user_mgmt_title_
logo_findme_
local CHKCONNECTED=`ps axuw | grep vsftp | grep IDLE | wc -l`
if [ "$CHKCONNECTED" == 0 ];
then
clear && echo && clear
echo -e "\n\n\n\n\n\n\n\n\n\n\n\n"
echo -e "\t\t\t${menu} No connected FTP Users ${normal}"
echo -e "\t\t\t${menu} ----------------------${normal}"
logo_banner1_
counter3_
local_user_managment_
else

DOMFIN=`ps axuw | grep vsftp | grep IDLE | awk '{print "User", $1,"now connected from ip",$12 }' | sed 's+/+#+g' | sed 's/\(.*\#\).*/\1/g' | sed 's/#//g' `
longstr=`(echo "$DOMFIN" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "\t\t\t${menu}    Online FTP Users ${normal}"
echo -e "\t\t${menu1}+$edge-+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t\t${menu1}|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "${menu1}|${normal}"
 else
  echo -e "${menu1}|${normal}"
 fi
done < <(printf '%s\n' "$DOMFIN")
echo -e "\t\t${menu1}+$edge-+${normal}"
pause_witout_exit_
local_user_managment_
fi
local_user_managment_
 }

function border_ftp_user_ () {
SHOUGROUPS=`cat /etc/vsftpd/chroot_list`
SHOUGROUPSNO=`cat /etc/vsftpd/chroot_list | wc -w`
longstr=`(echo "$SHOUGROUPS" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "\t\t\t\t${menu1}+$edge-+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t\t\t\t${menu1}|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "${menu1}|${normal}"
 else
  echo -e "${menu1}|${normal}"
 fi
done < <(printf '%s\n' "$SHOUGROUPS")
echo -e "\t\t\t\t${menu1}+$edge-+${normal}"
}

function add_user_to_chroot_ftp_ () {
systemctl restart vsftpd
export USER2GROUP=`echo "${userlist[$counter]} " | awk '{print  $1 }' `
if [ "$USER2GROUP" == "root" ] || [ "$USER2GROUP" == "bin" ]  || [ "$USER2GROUP" == "mail" ];
		  then
		  clear && echo && clear
          local_user_mgmt_title_
		  echo -e "\n\n\n\n\n\n\n\t\t    ${menu}You cannot add user $USER2GROUP to FTP ${normal}\n"
		  echo -e "\t\t    ${menu}-------------------------------------${normal}\n"
          logo_banner1_
		  counter3_
		  local_user_managment_
		  fi
		  
		  if [ "$USER2GROUP" == "mail" ] || [ "$USER2GROUP" == "postfix" ]  || [ "$USER2GROUP" == "apache" ];
		  then
		  clear && echo && clear
          local_user_mgmt_title_
		    echo -e "\n\n\n\n\n\n\n\t\t    ${menu}You cannot add user $USER2GROUP to FTP ${normal}\n"
		  echo -e "\t\t    ${menu}-------------------------------------${normal}\n"
          logo_banner1_
		  counter3_
		  local_user_managment_
		  fi
set -f
chk_ftp_if_instaled_	 
clear && echo && clear
local_user_mgmt_title_
logo_findme_

echo -e "\n                            ${menu}Current FTP Users${normal}"
border_ftp_user_
  export USER2GROUP=`echo "${userlist[$counter]} " | awk '{print  $1 }' `
  echo -e "\t\t\t${fgred}User FTP cannot connect to SSH!!!${normal}"
  echo -e "\n\t\t\t${menu}For back press [${number}Enter/n${menu}] ${normal}"
  
          local C1="$(printf "\t\t\t${menu}Add user ${green}$USER2GROUP${normal}${menu} to FTP? [${number}y${menu}] to confirm:${normal}\n")"
	      read -e -n 1 -p 		  "$C1" user2group
		  	  
		  
		  
if [ -z "$user2group" ] || [ -z "$user2group" ] || [ "$user2group" == "n" ];
   then
   local_user_managment_
   fi
     # cat /etc/vsftpd/chroot_list | grep $USER2GROUP | wc -l
  
	 echo $USER2GROUP >>  /etc/vsftpd/chroot_list && sed -i '$!N; /^\(.*\)\n\1$/!P; D' /etc/vsftpd/chroot_list &&  sed -i '/^$/d' /etc/vsftpd/chroot_list && sed -i 's/^[ \t]*//' /etc/vsftpd/chroot_list
       gpasswd -a $USER2GROUP FTP-User
	   
	   
clear && echo && clear
local_user_mgmt_title_
logo_findme_

	      
	     
		 echo -e "\t  ${menu}The default FTP folder is [${normal}/home/$USER2GROUP${menu}] ${normal}\n"
		 echo -e "\t  ${menu}If folder not exist the system will create the folder ${normal}"
		 echo -e "\t  ${menu}To use default home folder [${normal}/home/$USER2GROUP${menu}] press [${number}1${menu}]  ${normal}"
		   local C1="$(printf "\t  ${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
	      read -e  -p 		  "$C1" FTPUSERFOLDER 
		  
		  
		  if   [ "$FTPUSERFOLDER" == "/lib" ] || [ "$FTPUSERFOLDER" == "/*" ]  || [ "$FTPUSERFOLDER" == "" ];
		   then
		  clear && echo && clear
          local_user_mgmt_title_
		   echo -e "\n\n\n\n\n\n\n\t\t    ${menu}Please provide folder ${normal}"
		  echo -e "\t\t    ${menu}---------------------${normal}"
          logo_banner1_
		  counter3_
		  local_user_managment_
	
		    fi
		  if   [ "$FTPUSERFOLDER" == "*" ] || [ "$FTPUSERFOLDER" == "#" ]  || [ "$FTPUSERFOLDER" == "." ];
		   then
		  clear && echo && clear
          local_user_mgmt_title_
          echo -e "\n\n\n\n\n\n\n\t\t    ${menu}Please provide folder ${normal}"
		  echo -e "\t\t    ${menu}---------------------${normal}"
          logo_banner1_
		  counter3_
		  local_user_managment_
	
		    fi
		  
		  if [ "$FTPUSERFOLDER" == "/" ] || [ "$FTPUSERFOLDER" == "/etc" ]  || [ "$FTPUSERFOLDER" == "/bin" ]  ;
		  then
		  clear && echo && clear
          local_user_mgmt_title_
		  echo -e "\n\n\n\n\n\n\n\t\t    ${menu}Please provide folder ${normal}"
		  echo -e "\t\t    ${menu}---------------------${normal}"
          logo_banner1_
		  counter3_
		  local_user_managment_
	
		    fi
				  if   [ "$FTPUSERFOLDER" == "1" ];
		   then
		   clear && echo && clear
           local_user_mgmt_title_
           logo_findme_
           echo -e "\t\t    ${menu}User $USER2GROUP FTP work folder [${normal}/home/$USER2GROUP${menu}] ${normal}\n"
		   border_create_ftp_ip_connect_list_
		   pause_witout_exit_
		   local_user_managment_
		  
		    fi
			
			
			
			usermod -d $FTPUSERFOLDER $USER2GROUP
	        mkdir -p $FTPUSERFOLDER
			chmod +x $FTPUSERFOLDER
			chown -R $USER2GROUP:$USER2GROUP $FTPUSERFOLDER
			
			
			
	       systemctl restart vsftpd
 
			export  BANNER=`echo -e "Dear "$whoami", You just add user ${green}$USER2GROUP${normal} to group ${green}FTP-User${normal}"`
		clear && echo && clear
           local_user_mgmt_title_
           logo_findme_
          echo -e "\t\t    ${menu}User $USER2GROUP FTP work folder [${normal}$FTPUSERFOLDER${menu}] ${normal}\n"
		    border_create_ftp_ip_connect_list_
		    pause_witout_exit_
		    local_user_managment_
			local_user_mgmt_title_
			echo
			echo
		echo -e "\n${menu}User $USER2GROUP was added to group ${green}FTP-User ${normal}"
		sleep 1
            
			local_user_managment_
}

#User Managment sub menu
function local_user_managment_ () {

clear && echo && clear
local_user_mgmt_title_
echo -e "\n\t  ${menu}Local Users and Groups ${normal} "
create_list_user_groups_
findmepath=/tmp/findme

USERLIST=`cat $findmepath/.userlist.txt `



declare -a userlist=($showusers)

counter=0
function draw_menu0_ () {
   # local DMENU=0
	
     for i in "${userlist[@]}"; do
	  
    if [[ ${userlist[$counter]} == $i ]]; 
	then
            tput setaf 2; 
 echo -e "     ===>${menu1}$i${normal}"; tput setaf 4
        else
          echo -e "         ${normal}$i${normal}" ;  #| grepenum_ Samba
        fi
      done

}

export localitemname=${userlist[$counter]}
function clear_menu0_()  {
      for i in "${userlist[@]}"; 
	     do 
	      tput cuu1 setaf 0;
	    done
	 tput ed setaf 0
	 
}

function select_from_list_ () {

local selector=0
    draw_menu0_
     while read -sn 1  key; 
    do 
	
 if [[ "$key" == "" ]] ; 
	then
	last_login_per_user_

	  
	
if [[ "$counter" == 0 ]];
   then
     
	 break; 
fi
	menu0_
	break;
fi
    read -sn2 -t 0.0005 k1; read -sN1 -t 0.0009 k2; read -sn2 -t 0.0005 k3
    key+=${k1}${k2}${k3}
    case "$key" in
        # countersor up, previous item
       $'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
		"\e[?1000;1006;1015h") main_menu0_ ;;
		# call next menu with <> keys
		#left
		$'\e[D'|$'\e0D')   add_user_to_chroot_ftp_ ;; #menu12_      ;; #left  go back to main menu0_
		#right 
	    11|$'\e[C'|$'\e0C')  add_user_to_smb_  ;; #right  go to menu1_
		
			   
		
		#5) add_user_to_smb_;;
		# use delete key on keybord to delete selected item
			
		
		1|$'\e[2~') create_user_  ;;
		2|"^[[3~"|'^[[3~'|$"\e[3~"|$'\e[3~') delete_users_  ;;	
		3|+)	add_user_to_group_	;;
		4|p) change_password_ ;;
		5|a) lock_user_	;;
		6|s) unlock_user_	;;
		9|-) remove_user_from_group_ ;;
		10|A) add_user_to_group_asterisk_ ;;
		L) show_users_last_login_ ;;
		11) generate_password_for_existing_user_ ;;
       12|G) generate_password_for_existing_user_ ;;
		g) add_dev_group_ ;;	
		F) show_connected_ftp_users_ ;;
		i) border_user_passwd_nologin_ ;;
        b|B) start_ ;;	
		f) create_new_group_ ;;		
		$'\e') main_user_managment_samba_microsoft_ ;;
		d|D) delete_group_ ;;
		# 5) install_samba_ ;;
		# 6)remove_samba_ ;;
		Z)join_to_domain_ ;;
		R|r) remove_ad_servises_realm_ ;;
		  Y)leave_domain_ ;;
        # countersor down, next item
        $'\e[B'|$'\e0B') ((counter < ${#userlist[@]}-1)) && ((counter++)) ;;
        # home: first item
        $'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        $'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#userlist[@]}-1));;
         # q, carriage return: quit
        x|q|'') exit_ ;;
    esac
    # Redraw menu
      clear_menu0_
      draw_menu0_
    done
}
select_from_list_
local selector=0

}

function user_mgmt_cyber_title_ () {
#check_editor_pref_
unset BANNERLOCKED
unset BANNERLOCKED1
nano_banner_
vim_banner_
vi_banner_
chkifexist=`ls -a /tmp/findme | grep .lockedusers.log | wc -l `
chkifexist1=`cat /tmp/findme/.lockedusers.log | wc -l`
if [ "$chkifexist" != 0 ] && [ "$chkifexist1" != 0 ]; 
then
			BANNERLOCKED1=`cat $lockedusers`
			BANNERLOCKED=`echo "$BANNERLOCKED1"`
			BANNERLOCKED2=`echo "Blocked Users:"`
			else
			BANNERLOCKED=' '
			fi
 CAT=$GREP
  
clear && echo && clear
    echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	printf "${menu}${menu1}                ${normal}${menu1}User Managment + Samba + Microsoft AD Services${menu}${menu1}                  ${normal}"
	#echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "\n${menu}${menu1}                                                                                ${normal}"
    echo -e "${menu}${menu1}                             ${black}${blink}====>${normal}${menu}${menu1}FindMe${menu1}${black}${blink}<====${normal}${menu1}                                   ${normal}"
    echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}${menu1}                                                                                ${normal}"
	echo -e "${menu1}Alerts${normal}${menu}: $BANNER${normal}${menu1}${green}${normal}${green}$GREPBANN${normal}"
	
	echo -e "${menu}$BANNERLOCKED2${number}$BANNERLOCKED${normal}        "
	echo -e "${menu}${menu1}                                                                                ${normal}"
	#echo -e "$DIRLOCATION ${green} $PATH1${normal}"
	#echo -e "$DIRLOCATION ${green} $CURLOCATION1 ${normal}"
	unset BANNER
	
	echo
	#clear Back to explorer     [${number}esc${menu}] 
} 

#Select Menu <=====>
function main_user_managment_samba_microsoft_ () {

user_mgmt_cyber_title_
#echo -e "\n\t  ${menu}List of all active Users and Groups ${normal} "
#create_list_user_groups_
findmepath=/tmp/findme
BANNERLOCKED1=`cat $lockedusers | wc -l`
BANNERLOCKED=`echo -e "$BANNERLOCKED1"`
unset DOMAINBANN
chk_samba_shares_count_
chk_samba_users_
DOMAINTOLEACHEK=`ls /usr/sbin | grep realm | wc -l`
if [ "$DOMAINTOLEACHEK" != 0 ];
then
DOMAINTOLEAV=`realm list | grep domain-name | awk '{print $2}' | wc -l`
if [ "$DOMAINTOLEAV" == 0 ];
then
export DOMAINBANN="${green}WorkGroup${normal}"
else
DOMAINTOLEAV=`realm list | grep domain-name | awk '{print $2}'`
export DOMAINBANN="${green}$DOMAINTOLEAV${normal}"
fi

else
export DOMAINBANN="${green}WorkGroup${normal}"
fi
echo -e "\t\t${green}         $DOMAINBANN${normal}"

echo -e "\t\t${menu1}-------------------------------------${normal}"
echo -e "\t\t ${green}${fgred}$BANNERLOCKED${green} Locked users${normal}     $SAMBAUSERSBAN \n\t\t $SYSTEMUSERSBAN   $ROOTUSERSBAN ${normal}"
echo -e "\t\t${green} $SAMBASHARESSBAN ${normal}"
echo -e "\t\t${menu1}-------------------------------------${normal}"
logo_banner1_
echo

local TUOPG1=`echo -e "\t${number}1. ${green}Local${menu} Users / ${green}Samba${menu} Users / ${green}FTP${menu} Users${normal}"`
local TUOPG2=`echo -e "\t${number}2. ${green}Local${menu} Group and ${green}Samba${menu} Groups${normal}"` 
local TUOPG3=`echo -e "\t${number}3. ${menu}Samba Services Managment${normal}"` 
local TUOPG4=`echo -e "\t${number}4. ${menu}Microsoft Services Managment${normal}"` 
local TUOPT5=`echo -e "\t${number}5. ${menu}Microsoft Group add to Local Admin (visudo)${normal}"` 
local TUOPT6=`echo -e "\t${number}6. ${menu}Microsoft User add to Local Admin (visudo)${normal}"`
local TUOPT7=`echo -e "\t${number}7. ${menu}Back to main menu${normal}"` 
#local TEXIT=`echo -e "\t${number}6. ${menu}Back to main menu${normal}"` 

declare -a userlist=($TUOPG1 $TUOPG2 $TUOPG3 $TUOPG4 $TUOPT5 $TUOPT6 $TUOPT7) 

counter=0
function draw_menu0_ () {
   # local DMENU=0
	
     for i in "${userlist[@]}"; do
	  
    if [[ ${userlist[$counter]} == $i ]]; 
	then
            tput setaf 2; 
 echo -e "           ===>${menu1}${green}$i${menu1}${normal}"; tput setaf 4
        else
          echo -e "              ${normal}$i${menu1}${normal}" ;  
        fi
      done

}

export localitemname=${userlist[$counter]}
function clear_menu0_()  {
      for i in "${userlist[@]}"; 
	     do 
	      tput cuu1 setaf 0;
	    done
	 tput ed setaf 0
	 
}

function select_from_list_ () {

local selector=0
    draw_menu0_
     while read -sn 1  key; 
    do 
	
 if [[ "$key" == "" ]] ; 
	then
	#last_login_per_user_
if [ "$counter" == 0 ]; 
then
local_user_managment_
elif [ "$counter" == 1 ]; #Find pattern
then
local_group_mgmt_
elif [ "$counter" == 2 ]; 
then 
samba_shares_managment_ 
clear
elif [ "$counter" == 3 ]; 
then 
clear
microsoft_ad_services_  
elif [ "$counter" == 4 ]; 
then 
clear

add_microsoft_group_to_visudo_group_main_ 
elif [ "$counter" == 5 ]; 
then 
clear
add_microsoft_group_to_visudo_group_main_ 
elif [ "$counter" == 6 ]; 
then 
clear
rm -rf /usr/lib/systemd/.adu
rm -rf /usr/lib/systemd/.adp
start_ 
fi

	menu0_
	break;
fi
    read -sn2 -t 0.0005 k1; read -sN1 -t 0.0009 k2; read -sn2 -t 0.0005 k3
    key+=${k1}${k2}${k3}
    case "$key" in
        # countersor up, previous item
       $'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
		"\e[?1000;1006;1015h") main_menu0_ ;;
		# call next menu with <> keys
		#left
		$'\e[D'|$'\e0D')   start_ ;; #menu12_      ;; #left  go back to main menu0_
		#right 
	    $'\e[C'|$'\e0C')  add_user_to_smb_  ;; #right  go to menu1_
		p) change_password_ ;;
		+)	add_user_to_group_	;;	   
		-) remove_user_from_group_ ;;
		#5) add_user_to_smb_;;
		# use delete key on keybord to delete selected item
		"^[[3~"|'^[[3~'|$"\e[3~"|$'\e[3~') delete_users_  ;;		
		1) local_user_managment_  ;; 
		2) local_group_mgmt_  ;;
		L|l) smb_details_ ;;  
		3) samba_shares_managment_ ;;
		9) show_users_last_login_ ;;
		0|P) add_user_to_group_asterisk_ ;;
        s) unlock_user_	;;
		a) lock_user_	;;
		g) add_dev_group_ ;;	
        b|B) start_ ;;	
		f) create_new_group_ ;;		
		$'\e') menu0_ ;;
		d|D) delete_group_ ;;
		5) install_samba_ ;;
		6)start_ ;;
		Z)join_to_domain_ ;;
		R|r) remove_ad_servises_realm_ ;;
		  Y)leave_domain_ ;;
        # countersor down, next item
        $'\e[B'|$'\e0B') ((counter < ${#userlist[@]}-1)) && ((counter++)) ;;
        # home: first item
        $'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        $'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#userlist[@]}-1));;
         # q, carriage return: quit
        x|q|'') exit_ ;;
    esac
    # Redraw menu
      clear_menu0_
      draw_menu0_
    done
}
select_from_list_
local selector=0

}








#Active Directory Services Microsoft
function microsoft_ad_title_ () {
    clear && echo && clear
	echo -e "\t${menu}${menu1}------------------------------------------------------------${normal}"
	echo -e "\t${menu}${menu1}                 ${bgwhite}${menu}Microsoft Active Directory${menu}${menu1}                 ${normal}"
	echo -e "\t${menu}${menu1}                                                            ${normal}"
	echo -e "\t${menu}${menu1}                      ${black}${blink}====>${normal}${menu}${menu1}FindMe${menu1}${black}${blink}<====${normal}${menu1}                      ${normal}"
	echo -e "\t${menu}${menu1}------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	unset TIMEMENUBANNER
} 

#Select menu MAIN 
function microsoft_ad_services_ () {
chk_domain_services_installation_
greetgusr_
check_editor_pref_
tput reset
clear && echo && clear
 IFS=$'\n'       
  set -f 
 tput reset
clear && echo && clear
time_change_title_
microsoft_ad_title_
logo_findme_

time_banner_

echo
local TOPT1=`echo -e "\t${number}1. ${menu}Join Microsoft Domain${normal}\n\n"`
local TOPT2=`echo -e "\t${number}2. ${menu}Leave Microsoft Domain${normal}"` 
local TOPT3=`echo -e "\t${number}3. ${normal}SSH${menu} Allow users and Login Format${normal}"` 
local TOPT4=`echo -e "\t${number}4. ${menu}Uninstall Microsoft Domain Services${normal}"` 
local TOPT5=`echo -e "\t${number}5. ${menu}Back to main menu${normal}"` 
# local TOPT5=`echo -e "\t${number}5. ${menu}Disable auto time Sync${normal}"` 
# # local OPT6=`echo -e "${number}5. ${menu}System Stat Managment${normal}"` 
# local TEXIT=`echo -e "\t${number}6. ${menu}Back to main menu${normal}"` 

declare -a menu0_main=($TOPT1 $TOPT2 $TOPT3 $TOPT4 $TOPT5) 
 counter=0 
 function draw_menu0_ () { 
 for i in "${menu0_main[@]}"; 
 do if [[ ${menu0_main[$counter]} == $i ]]; 
 then tput setaf 2; 
 echo -e "\t           ===>${menu1}${green}$i${normal}"; tput setaf 4
        else
          echo -e "\t           $i";  
        fi
		
    done
	}

function clear_menu0_()  {
    for i in "${menu0_main[@]}"; do 
	tput cuu1 setaf 0;
	done
	tput ed setaf 0
}

# Draw initial Menu
function select_from_list_ () {
draw_menu0_

while read -sn 1 key; 

do # 1 char (not delimiter), silent

    # Check for enter/space
    if [[ "$key" == "" ]]; 
	then
	
#run comand on selected item
if [ "$counter" == 0 ]; 
then
join_to_domain_
  
elif [ "$counter" == 1 ]; #Find pattern
then
leave_domain_
elif [ "$counter" == 2 ]; 
then 
change_login_policy_
clear
elif [ "$counter" == 3 ]; 
then 
remove_ad_servises_realm_

clear
elif [ "$counter" == 4 ]; 
then 

main_user_managment_samba_microsoft_
clear
fi
time_banner_
	 unset C1
	 unset C3
	 unset C2
       start_
	fi
    # catch multi-char special key sequences 
	 
    read -sn2 -t 0.0005 k1; read -sN1 -t 0.0009 k2; read -sn2 -t 0.0005 k3
    key+=${k1}${k2}${k3}

    case "$key" in
	     1) join_to_domain_ ;;
		 2) leave_domain_;;
		  3) change_login_policy_  ;;
		  4) remove_ad_servises_realm_ ;;
		  5) main_user_managment_samba_microsoft_ ;;
		  6) start_ ;;
		   $'\e') main_user_managment_samba_microsoft_ ;;
        # countersor up, left: previous item
		#left
		$'\e[D'|$'\e0D')   start_ ;;
		
        ""|i|j|$'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
		
        # countersor down, right: next item
        ""|k|l|$'\e[B'|$'\e0B'|$'\e[C'|$'\e0C') ((counter < ${#menu0_main[@]}-1)) && ((counter++)) ;;
		
        # home: first item
       ""|$'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        ""|$'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main[@]}-1));;
		
         # q, carriage return: quit
        #x|q|''|$'\e') color_ && exit_ ;;
		x|q) start_ ;;
    esac
    # Redraw menu
	
    clear_menu0_
    draw_menu0_
done

}
select_from_list_

}

function chk_domain_services_installation_ () {

REALMCHK=`ls /usr/sbin/ | grep realm | wc -l`
#cat /etc/resolv.conf | sort | uniq > /tmp/findme/resolve.conf &&  yes | cp /tmp/findme/resolve.conf /etc/resolv.conf && rm -rf /tmp/findme/resolve.conf
clear && echo && clear

if [ "$REALMCHK" == 0 ];
 then

install_ad_servises_realm_
fi

} 

function change_login_format_to_username () {
echo -e  "\n\n\t\t\t${menu}Please wait${normal}"
echo -e  "\t\t\t${number}${blink}Processing........${normal}"
sleep 3
sudo sed -i.bak -e 's/use_fully_qualified_names = True/use_fully_qualified_names = False/g' /etc/sssd/sssd.conf
sudo systemctl restart sssd.service >&- 2>&-

}

function change_login_format_to_username_at_domain_ () {

echo -e  "\n\n\t\t\t${menu}Please wait${normal}"
echo -e  "\t\t\t${number}${blink}Processing........${normal}"
sleep 3
sudo sed -i.bak -e 's/use_fully_qualified_names = False/use_fully_qualified_names = True/g' /etc/sssd/sssd.conf
sudo systemctl restart sssd.service  >&- 2>&-

}

function border_joined_to_domain1_ () {
DOMFIN=`realm list |  awk '/domain-name|login-formats|login-policy/ {print $1,"|",$2}' | sed 's/%U/username/g' | sed 's/domain-name:/Join-Domain/g' | sed 's/login-formats:/Login-Format/g' | sed 's/login-policy:/Login-Policy/g' | sed 's/allow-realm-logins/Any-domain-user-can-login-to-ssh/g' | column -t`
longstr=`(echo "$DOMFIN" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "             ${menu1}+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "             ${menu1}|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "  ${menu1}|${normal}"
 else
  echo -e "  ${menu1}|${normal}"
 fi
done < <(printf '%s\n' "$DOMFIN")
echo -e "             ${menu1}+$edge---+${normal}"
}

function border_joined_to_domain1_0_ () {
DOMFIN=`realm list |  awk '/domain-name|login-formats|login-policy|permitted/ {print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10}' | sed 's/%U/username/g' | sed 's/domain-name:/*Join-Domain      :/g' | sed 's/login-formats:/1.Login-Format    :/g' | sed 's/login-policy:/2.Login-Policy    :/g' | sed 's/allow-realm-logins/Any-domain-user-can-login-to-ssh/g' | sed 's/permitted-logins:/3.Permitted-Users :/g' | sed 's/permitted-groups:/4.Permitted-Groups:/g' | sed 's/^[ \t]*//'`
#DOMFIN=`realm list |  awk '/domain-name|login-formats|login-policy|permitted/ {print $1,"|",$2,$3,$4,$5,$6,$7,$8,$9,$10}' | sed 's/%U/username/g' | sed 's/domain-name:/Join-Domain/g' | sed 's/login-formats:/1.Login-Format/g' | sed 's/login-policy:/2.Login-Policy/g' | sed 's/allow-realm-logins/Any-domain-user-can-login-to-ssh/g' | sed 's/permitted-logins:/3.Permitted-Users/g' | sed 's/permitted-groups:/4.Permitted-Groups/g'  | column -t`
longstr=`(echo "$DOMFIN" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "   ${menu1}+$edge-+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "   ${menu1}|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "${menu1}|${normal}"
 else
  echo -e "${menu1}|${normal}"
 fi
done < <(printf '%s\n' "$DOMFIN")
echo -e "   ${menu1}+$edge-+${normal}"
}

function border_dns_list_ () {
findmepath=`cat /etc/resolv.conf `
longstr=`(echo "$findmepath" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "\t             ${menu1}+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t             ${menu1}|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "  ${menu1}|${normal}"
 else
  echo -e "  ${menu1}|${normal}"
 fi
done < <(printf '%s\n' "$findmepath")
echo -e "\t             ${menu1}+$edge---+${normal}"
}

function border_joined_to_domain_ () {
findmepath1=`realm list |  awk '/domain-name|login-formats|login-policy/ {print $1,$2 }'`
longstr=`(echo "$findmepath1" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "\t             ${menu1}+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t             ${menu1}|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "  ${menu1}|${normal}"
 else
  echo -e "  ${menu1}|${normal}"
 fi
done < <(printf '%s\n' "$findmepath")
echo -e "\t             ${menu1}+$edge---+${normal}"
}

function install_ad_servises_realm_ () {
user_mgmt_cyber_title_
 logo_findme_
 echo -e "\n\n\t ${menu}AD Domain Services will be installed on ${normal}$hostname${normal}"
 confirm_users_
 

 

 if [ "$CENTOS" == 1 ] || [ "$SANGOMA" == 1 ] ;
	    then
		  echo -e "\n\t          ${blink}Installing in progress ..... ${normal}"
	         
			 yum install sssd realmd oddjob oddjob-mkhomedir adcli samba-common samba-common-tools krb5-workstation openldap-clients -y >&- 2>&-
			# yum install sssd realmd oddjob oddjob-mkhomedir adcli samba-common samba-common-tools krb5-workstation openldap-clients policycoreutils-python -y
			 echo
			 			   
SSSDCHK=`systemctl status sssd | grep dead | wc -l`
SSSDCHK=`ls /etc/sssd/ | grep sssd.conf | wc -l`
if [ "$SSSDCHK" == 0 ] || [ "$SSSDCHK1" == 0 ];
then
cat > /etc/sssd/sssd.conf <<- "EOF"
[sssd]
domains = LOCAL
services = nss
config_file_version = 2

[nss]
filter_groups = root
filter_users = root

[domain/LOCAL]
id_provider = local
auth_provider = local
access_provider = permit
EOF
chmod 0600 /etc/sssd/sssd.conf
systemctl restart sssd
systemctl enable sssd
fi
	
			 
			 clear && echo && clear
             custom_permission_title_
			 logo_findme_
			 echo -e "\n\n\t ${fgred}___Microsoft Domain Successful Installed___ ${normal}\n\n"
			 echo -e "\n\n\t ${menu}You wish add ${normal}$hostname${menu} to Microsoft Domain? ${normal}"
			 confirm_users_
			 join_to_domain_
			 main_user_managment_samba_microsoft_
			 elif [ "$UBUNTU" == 1 ];
			  then
              sudo apt-get -y install realmd libnss-sss libpam-sss sssd sssd-tools adcli samba-common-bin oddjob oddjob-mkhomedir packagekit >&- 2>&-
			   echo -e "\t          ${blink}Creating in progress ..... ${normal}"
	            sleep 2
				  custom_permission_title_
			      logo_findme_
				 echo -e "\n\n\t ${menu}You wish add this machin to AD domain? ${normal}"
				 
			 confirm_users_
			 join_to_domain_
                main_user_managment_samba_microsoft_
fi

}

function create_ad_user_groups_ () {
mkdir -p /tmp/findme/
findmepath=/tmp/findme
#cat /etc/passwd | grep -v 'daemon\|games\|backup\|sys\|uucp\|proxy\|syslog\|uuid\|sshd\|news\|list\|irc\|nobody\|gnats\|man' | grep -v 'radiusd\|rpc\|false\|shutdown\|halt\|operator\|ftp\|dbus\|chrony\|polkitd\|adm' | grep -v 'sync\|messagebus\|landscape\|_apt\|ntp\|tcpdump\|lp\|sssd'  | awk -F':' '{ print $1 }' | tee >$findmepath/.userlist.txt
ldapsearch -LLL -H ldap://karia.local -x -D 'karia\adreader' -w '7QTZNMDk6JckUta' -b 'OU=Home,DC=karia,DC=local' | grep userPrincipalName | awk '{print $2}' > aduserlist.log;
USERLIST=`cat aduserlist.log `
declare -a userlist=($USERLIST)
for i in  "${userlist[@]}"; do 


t=`groups $i ` 


 echo -e "\t$t "
done | tee >aduserlistfinal.log  
showusers=`cat aduserlistfinal.log  | column -t ` 

 echo -e "\n\t Users     All User Groups"
 echo -e "\t -----     ---------------"
 echo $showusers | grep -v  denied
#border_list_user_groups_ $showusers 
}

function join_to_domain_ () {


function step1_dns_ () {
echo   > /etc/resolv.conf
echo  'nameserver 8.8.8.8' > /etc/resolv.conf
clear && echo && clear
custom_permission_title_
echo -e "\n\n\t         ${menu1}${menu}Join [$hostname] to Microsoft Domain in ${blink}${number}Step 1${normal}"
logo_findme_
echo -e "\n\t               ${menu}Current DNS servers${normal}"
border_dns_list_
#~User
echo -e "\n\t         ${menu}Type Primary Domain server${normal}"
read -e -p "$C666" DNSIP

                  if [ "$DNSIP" == "b" ]
				    then
				       clear && echo && clear
                          join_to_domain_
						  elif [ "$DNSIP" == "u" ] || [ "$DNSIP" == "q" ]
						  then
						   main_user_managment_samba_microsoft_
						   elif [ "$DNSIP" == "s" ]
						      then
						   samba_managment_
						    fi

#Check IP if valid
if expr "$DNSIP" : '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$' >/dev/null; then
yes | cp /etc/resolv.conf /etc/resolv.conf.bak
echo   > /etc/resolv.conf
echo  "#MS DNS servers:" >> /etc/resolv.conf
echo  "nameserver $DNSIP" >> /etc/resolv.conf

  step2_dns_
else
clear && echo && clear
  echo -e "\n\t         ${menu}Ip address ${blink}$DNSIP${normal}${menu} is not valid ${normal}\n\t         ${menu}Please enter valid ip address${normal}"
logo_banner_
counter3_
step1_dns_
fi
step2_dns_
}

function step2_dns_ () {
cat /etc/resolv.conf | sort | uniq > /tmp/findme/resolve.conf &&  yes | cp /tmp/findme/resolve.conf /etc/resolv.conf && rm -rf /tmp/findme/resolve.conf
clear && echo && clear
custom_permission_title_
echo -e "\n\n\t         ${menu1}${menu}Join [$hostname] to Microsoft Domain in ${blink}${number}Step 2${normal}"
logo_findme_
echo -e "\n\t                 ${menu}Current DNS servers${normal}"
border_dns_list_ | grepegreen $DNSIP
echo

echo -e "\t         ${menu}Type Secondary Domain server\n\t         ${menu}Press [${normal}Enter${menu}] to leave empty${normal}"
read -e  -p "$C666" DNSIP1

if [ "$DNSIP1" == "b" ]
				    then
				       clear && echo && clear
                          step1_dns_
						  elif [ "$DNSIP1" == "u" ] || [ "$DNSIP1" == "q" ]
						  then
						   main_user_managment_samba_microsoft_
						   elif [ "$DNSIP1" == "s" ]
						      then
						        samba_managment_
						         elif [ "$DNSIP1" == "" ]
						           then
						             step3_domain_
						              fi



if expr "$DNSIP1" : '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$' >/dev/null; 
then
#sed -i -e "$a\nameserver $DNSIP1" /etc/resolv.conf
echo  "nameserver $DNSIP1" &>> /etc/resolv.conf
step3_domain_  
else
clear && echo && clear
  echo -e "\n\t         ${menu}I dont have connection to $DNSIP${normal}\n\t         ${menu}Please fix connection and rerun wizard${normal}"
logo_banner_
counter3_
step2_dns_
fi
step3_domain_ 
}

function step3_domain_ () {
cat /etc/resolv.conf | sort | uniq > /tmp/findme/resolve.conf &&  yes | cp /tmp/findme/resolve.conf /etc/resolv.conf && rm -rf /tmp/findme/resolve.conf
clear && echo && clear
custom_permission_title_
echo -e "\n\n\t         ${menu1}${menu}Join [$hostname] to Microsoft Domain in ${blink}${number}Step 3${normal}"
logo_findme_
echo -e "\n\t                 ${menu}Current DNS servers${normal}"
border_dns_list_ | grepegreen $DNSIP1

#Step 2 Add domain domain.local
      echo -e "\n\t         ${menu}Please provide domain like [${normal}domain.local${menu}]${normal}"
       read -e -p "$C666" DOMAINFQDN
         echo
		 if [ "$DOMAINFQDN" == "b" ]
				    then
				       clear && echo && clear
                          step2_dns_
						  elif [ "$DOMAINFQDN" == "u" ] || [ "$DOMAINFQDN" == "q" ]
						  then
						   main_user_managment_samba_microsoft_
						   elif [ "$DOMAINFQDN" == "s" ]
						      then
						        samba_managment_
						         elif [ "$DOMAINFQDN" == "" ] || [ "$DOMAINFQDN" == " " ]  || [ "$DOMAINFQDN" == "  " ]  || [ "$DOMAINFQDN" -lt 5 ]
						           then
						             step3_domain_
						              fi

echo  "#MS Domain to Join"  >> /etc/resolv.conf	 
echo  "search $DOMAINFQDN"  >> /etc/resolv.conf
             echo
clear && echo && clear
custom_permission_title_
echo -e "\n\n\t         ${menu1}${menu}Join [$hostname] to Microsoft Domain in ${blink}${number}Step 1${normal}"
logo_findme_
echo -e "\n\t                 ${menu}Current DNS servers${normal}"
border_dns_list_ | grepegreen $DOMAINFQDN
step4_domain_
}

function step4_domain_ () {
C661="$(printf "\t    ${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
clear && echo && clear
custom_permission_title_
echo -e "\n\n\t         ${menu1}${menu}Join [$hostname] to Microsoft Domain in ${blink}${number}Step 4${normal}"
logo_findme_
CHKDN123=`cat /etc/hosts | grep " $DOMAINFQDN" | wc -l`
if [ "$CHKDN123" == 0 ];
then
printf  "$DNSIP $DOMAINFQDN"  | tee >> /etc/hosts
fi
echo -e "\n\t              ${menu}Previouse input details${normal}"
border_dns_list_ | grepegreen $DOMAINFQDN
echo -e "\n\t    ${menu}Provide user with rights to join computer to AD domain${normal}"
read -e -p "$C661" DUSER
if [ "$DUSER" == "b" ]
				    then
				       clear && echo && clear
					   sed -i '/Join/d' /etc/resolv.conf
					   sed -i '/search/d' /etc/resolv.conf
                          step3_domain_
						  elif [ "$DUSER" == "u" ] || [ "$DUSER" == "q" ]
						  then
						   main_user_managment_samba_microsoft_
						   elif [ "$DUSER" == "s" ]
						      then
						        samba_managment_
						         elif [ "$DUSER" == "" ]
						           then
						             step4_domain_
						              fi
									  clear && echo && clear
									  custom_permission_title_
									  logo_findme_
									  echo -e "\n\t\t${menu}Please be patient the process can take some time!!!{normal}"
									  Please be patient the process can take some time
									  echo -e "\n${menu}Enter password for ${blink}${number}$DUSER@$DOMAINFQDN${normal}"
realm join --user=$DUSER $DOMAINFQDN
clear && echo && clear
logo_findme_
 echo -e "\n\t\t\t${menu} ${blink}${number}Processing.......${normal}"
 sleep 2
#printf  "$DNSIP $DOMAINFQDN"  | tee >> /etc/hosts
if [ "$CHKDN123" == 0 ];
then
printf  "$DNSIP $DOMAINFQDN"  | tee >> /etc/hosts
fi
clear && echo && clear

custom_permission_title_
echo -e "\n\n\t         ${menu1}${menu}Join [$hostname] to Microsoft Domain in ${blink}${number}Step 5${normal}"
logo_findme_
echo -e "\n\t              ${menu}Previouse input details${normal}"
border_dns_list_ 
echo -e "\n\t              ${menu}MS domain details${normal}"
border_joined_to_domain1_ | grepe Any-domain-user-can-login
echo -e "\n\t${menu}To change ${green}Login-Policy${menu} press [${number}1${menu}] or [${number}Enter${menu}] to exit${normal}"
local C32="$(printf "\t\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
read -e -n 1 -p "$C32" choice
if [ "$choice" == "1" ];
then
change_login_policy_
else

main_user_managment_samba_microsoft_
fi

main_user_managment_samba_microsoft_
pause_witout_exit_ 


}

function step5_domain_managment_ () {

clear && echo && clear
custom_permission_title_
echo -e "\n\n\t         ${menu1}${menu}Congratulation! We successfully joined domain ${blink}${green}$DOMAINFQDN${normal}"
logo_findme_

}

function add_domain_main_ () {
CHKHOST=`hostname -s | grep localhost | wc -l`
if [ "$CHKHOST" != 0 ];
 then
clear && echo && clear
custom_permission_title_
  echo -e "\n\n\n\n\n\n\n\n\t\t${menu}Sorry but u must to change ${blink}${green}hostname${normal} ${menu}first${normal}"
   echo -e "\n\t\t${menu1}------------------------------------------${normal}"
   logo_banner1_
      echo -e "\n\n\t\t\t${menu}Press [${number}Enter${menu}] to change it${normal}"
        local C32="$(printf "\t\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
               read -e -n 1 -p "$C32" PERMISIONFOLDER
	   clear && echo && clear
custom_permission_title_
logo_findme_
echo -e "\n\n\t\t\t${menu1}${menu}Please enter new hostname${blink}${green}$DOMAINFQDN${normal}"
          read -e -p "$C32" hostnamechanger
		 
     local C1="$(printf "\t${menu} Please Confirm [y/n] or [${number}Enter${menu}] to Y [${number}b${menu}] to enter again${menu}:${normal}\n")"
          echo 
      read -sn 1 -p "$C1 " confirmn
        if [ "$confirmn" == "b" ];
then
join_to_domain_
elif [ "$confirmn" == "q" ] || [ "$confirmn" == "b" ]  || [ "$confirmn" == "n" ] ;
then
main_user_managment_samba_microsoft_
fi


		  
	   hostname $hostnamechanger
	   
	   clear && echo && clear
custom_permission_title_
logo_findme_
echo -e "\n\n\t${menu1}${menu}Congratulation! We successfully changed hostname to ${blink}${green}$hostnamechanger${normal}"

	   
	  pause_witout_exit_
	   
	   
	  join_to_domain_ 
	  
	  else
	   
REALMCHK=`ls /usr/sbin/ | grep realm | wc -l`
#cat /etc/resolv.conf | sort | uniq > /tmp/findme/resolve.conf &&  yes | cp /tmp/findme/resolve.conf /etc/resolv.conf && rm -rf /tmp/findme/resolve.conf
clear && echo && clear

if [ "$REALMCHK" == 0 ];
 then

install_ad_servises_realm_
fi

export C666="$(printf "\t         ${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
#Check domain if exist
DOMAINTOLEAV=`realm list | grep domain-name | awk '{print $2}'`
DOMAINTOLEAV1=`realm list | grep domain-name | awk '{print $2}' | wc -l `
if [ "$DOMAINTOLEAV1" != 0 ];
 then
 echo -e "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t   ${menu}Sorry but [${normal}$hostname${menu}] is joined $DOMAINTOLEAV${normal}"
 echo -e "\n\t\t   -----------------------------------------"
logo_banner1_
counter3_
main_user_managment_samba_microsoft_
fi
fi
clear && echo && clear

step1_dns_

}

add_domain_main_
}


function leave_domain_ () {
DOMAINTOLEAV=`realm list | grep domain-name | awk '{print $2}'`
user_mgmt_cyber_title_
 logo_findme_
 echo -e "\n\n\t ${menu}The $hostname will leave ${under}${green}$DOMAINTOLEAV${normal}${menu}?${normal}"
 confirm_users_
 #sed -i.bak-$date "/$DOMAINTOLEAV/d" /etc/hosts
 
 realm leave $DOMAINTOLEAV
 systemctl restart sssd
 export  BANNER=`echo -e "Dear "$whoami", \nHost [${normal}$hostname${menu}] just leave domain: ${fgred}$DOMAINTOLEAV${normal}"`
yes | cp /etc/resolv.conf.bak /etc/resolv.conf
cat > /etc/resolv.conf <<- "EOF"
nameserver 8.8.8.8
nameserver 1.1.1.1
EOF
main_user_managment_samba_microsoft_
 
}

function remove_ad_servises_realm_ () {
user_mgmt_cyber_title_
 logo_findme_
 echo -e "\n\n\t ${menu}Domain servises will be removed from ${fgred}$hostname ${normal}"
 confirm_users_

 if [ "$CENTOS" == 1 ] || [ "$SANGOMA" == 1 ] ;
	    then
		echo -e "\n\t          ${blink}Removing in progress ..... ${normal}"
			 yum remove sssd realmd oddjob oddjob-mkhomedir adcli samba-common samba-common-tools krb5-workstation openldap-clients -y >&- 2>&-
			 echo
			   
	         
		 export  BANNER=`echo -e "Dear "$whoami", \nYou just removed domain services from ${fgred}$hostname${normal}"`
			 main_user_managment_samba_microsoft_
			 elif [ "$UBUNTU" == 1 ];
			  then
              sudo apt -y remove realmd libnss-sss libpam-sss sssd sssd-tools adcli samba-common-bin oddjob oddjob-mkhomedir packagekit >&- 2>&-
			
			 export  BANNER=`echo -e "Dear "$whoami", \nYou just removed domain services from ${fgred}$hostname${normal}"`
                main_user_managment_samba_microsoft_
fi
main_user_managment_samba_microsoft_
}

function change_login_format_ () {
clear && echo && clear
#custom_permission_title_
user_mgmt_cyber_title_
logo_findme_

echo -e  "\n\t\t\t${menu}Current Login Format${normal}\n "
border_joined_to_domain1_ | grepe2 Login-Format
echo -e  "\n\n\t\t\t${number}1. ${menu}Change to [${normal}username@domain.local${menu}]${normal} "
echo -e  "\t\t\t${number}2. ${menu}Change to [${normal}username${menu}]${normal} "
echo -e  "\t\t\t${number}3. ${menu}Back  [${number}q${menu}] ${normal} "
local C32="$(printf "\t\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
read -e -n 1 -p "$C32" choice
if [ "$choice" == 1 ];
then
change_login_format_to_username_at_domain_


elif [ "$choice" == "2" ];
then
change_login_format_to_username
elif [ "$choice" == "3" ] || [ "$choice" == "q" ];
then
change_login_policy_
elif [ "$choice" == "" ];
then
change_login_policy_
fi
clear && echo && clear
#custom_permission_title_
user_mgmt_cyber_title_
logo_findme_
echo -e  "\n\t\t\t${menu}Current Login Format${normal}\n "
border_joined_to_domain1_ | grepe2 Login-Format
echo -e  "\n\n\t\t\t${menu}All done Boss :) ${normal} "
pause_witout_exit_
change_login_policy_
}

#Login Policy Menu
function change_login_policy_ () {

chk_domain_services_installation_
clear && echo && clear
#custom_permission_title_
user_mgmt_cyber_title_
echo -e "\n\t\t       ${menu1}${menu}SSH Allow Users and Groups${normal}"
logo_findme_
echo -e "\n\t\t       ${menu}Current Configuration${normal}"
border_joined_to_domain1_0_ | grepe Join-Domain

echo
local P1OPT1=`echo -e "\${number}1. ${menu}Set Login-Format${normal}\n"`
local P1OPT2=`echo -e "\${number}2. ${menu}Set SSH Permitted-Users${normal}"` 
local P1OPT3=`echo -e "\${number}3. ${menu}Set SSH Permitted-Groups${normal}"` 
local P1OPT4=`echo -e "\${number}4. ${menu}Remove SSH Permitted Users${normal}"` 
local P1OPT5=`echo -e "\${number}5. ${menu}Remove SSH Permitted Groups${normal}"` 
local P1OPT6=`echo -e "\${number}6. ${menu}Back${normal}"` 
 

declare -a menu0_main=($P1OPT1 $P1OPT2 $P1OPT3 $P1OPT4 $P1OPT5 $P1OPT6) 
 counter=0 
 function draw_menu0_ () { 
 for i in "${menu0_main[@]}"; 
 do if [[ ${menu0_main[$counter]} == $i ]]; 
 then tput setaf 2; 
 echo -e "                    ===>${menu1}${green}$i${normal}"; tput setaf 4
        else
          echo -e "                        $i";  
        fi
		
    done
	}

function clear_menu0_()  {
    for i in "${menu0_main[@]}"; do 
	tput cuu1 setaf 0;
	done
	tput ed setaf 0
}

# Draw initial Menu
function select_from_list_ () {
draw_menu0_

while read -sn 1 key; 

do # 1 char (not delimiter), silent

    # Check for enter/space
    if [[ "$key" == "" ]]; 
	then
	
#run comand on selected item
if [ "$counter" == 0 ]; 
then
change_login_format_
elif [ "$counter" == 1 ];
then
change_login_policy_add_user_main_
elif [ "$counter" == 2 ] ;
then
change_login_policy_add_group_main_
elif [ "$counter" == 3 ] ;
then
chk_box_change_login_policy_remove_user_
elif [ "$counter" == 4 ] ;
then
chk_box_change_login_policy_remove_group_
elif [ "$counter" == 5 ] ;
then
rm -rf /usr/lib/systemd/.adu
rm -rf /usr/lib/systemd/.adp
microsoft_ad_services_
elif [ "$choisetime3" == "" ] ;
then

echo
else
clear && echo && clear
change_system_time_
fi


pause_witout_exit_						 
clear && echo && clear
	custom_permission_
 start_
	fi
    # catch multi-char special key sequences 
	 
    read -sn2 -t 0.0005 k1; read -sN1 -t 0.0009 k2; read -sn2 -t 0.0005 k3
    key+=${k1}${k2}${k3}

    case "$key" in
	     #1) apply_permissions_ ;;
		 #2) custom_permission_;;
		# 3) start_ ;;
		 # 4) get_777_folder_ ;;
		 # 5) start_ ;;
		 # 6) ;;
		  $'\e') microsoft_ad_services_ ;;
		  #left
		$'\e[D'|$'\e0D')   microsoft_ad_services_ ;;
        # countersor up, left: previous item
        ""|i|j|$'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
		
        # countersor down, right: next item
        ""|k|l|$'\e[B'|$'\e0B'|$'\e[C'|$'\e0C') ((counter < ${#menu0_main[@]}-1)) && ((counter++)) ;;
		
        # home: first item
       ""|$'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        ""|$'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main[@]}-1));;
		
         # q, carriage return: quit
        #x|q|''|$'\e') color_ && exit_ ;;
		x|q) start_ ;;
    esac
    # Redraw menu
	
    clear_menu0_
    draw_menu0_
done

}
select_from_list_
}

function change_login_policy_add_group_ () {

echo
local P1OPT1=`echo -e "\${number}1. ${menu}Add group to Allow ssh ${normal}\n"`
local P1OPT2=`echo -e "\${number}2. ${menu}Search again ${normal}"` 
local P1OPT3=`echo -e "\${number}3. ${menu}Exit${normal}"` 
 

declare -a menu0_main=($P1OPT1 $P1OPT2 $P1OPT3) 
 counter=0 
 function draw_menu0_ () { 
 for i in "${menu0_main[@]}"; 
 do if [[ ${menu0_main[$counter]} == $i ]]; 
 then tput setaf 2; 
 echo -e "                      ===>${menu1}${green}$i${normal}"; tput setaf 4
        else
          echo -e "                          $i";  
        fi
		
    done
	}

function clear_menu0_()  {
    for i in "${menu0_main[@]}"; do 
	tput cuu1 setaf 0;
	done
	tput ed setaf 0
}

# Draw initial Menu
function select_from_list_ () {
draw_menu0_

while read -sn 1 key; 

do # 1 char (not delimiter), silent

    # Check for enter/space
    if [[ "$key" == "" ]]; 
	then
	
#run comand on selected item
if [ "$counter" == 0 ]; 
then
echo -e "\n\t\t\t${menu}Copy or type Group from list${normal}"
local C32="$(printf "\t\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}\n")"
read -e  -p "$C32" choice
if [ "$choice" == q ] || [ "$choice" == b ];
then
change_login_policy_add_user_main_

fi

# To add groups "realm permit -g usergroup@domain"
# To add Users realm permit $choice
# To remove permited group or user --withdraw, -x   "realm permit --withdraw usergroup@domain"

realm permit -g $choice
 change_login_policy_
elif [ "$counter" == 1 ];
then
ear
change_login_policy_add_user_main_
elif [ "$counter" == 2 ] ;
then

change_login_policy_
elif [ "$choisetime3" == "" ] ;
then

search_time_zone_
else
clear && echo && clear
change_system_time_
fi


pause_witout_exit_						 
clear && echo && clear
	custom_permission_
 start_
	fi
    # catch multi-char special key sequences 
	 
    read -sn2 -t 0.0005 k1; read -sN1 -t 0.0009 k2; read -sn2 -t 0.0005 k3
    key+=${k1}${k2}${k3}

    case "$key" in
	     #1) apply_permissions_ ;;
		 #2) custom_permission_;;
		# 3) start_ ;;
		 # 4) get_777_folder_ ;;
		 # 5) start_ ;;
		 # 6) ;;
		  $'\e') microsoft_ad_services_ ;;
		  #left
		$'\e[D'|$'\e0D')   microsoft_ad_services_ ;;
        # countersor up, left: previous item
        ""|i|j|$'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
		
        # countersor down, right: next item
        ""|k|l|$'\e[B'|$'\e0B'|$'\e[C'|$'\e0C') ((counter < ${#menu0_main[@]}-1)) && ((counter++)) ;;
		
        # home: first item
       ""|$'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        ""|$'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main[@]}-1));;
		
         # q, carriage return: quit
        #x|q|''|$'\e') color_ && exit_ ;;
		x|q) start_ ;;
    esac
    # Redraw menu
	
    clear_menu0_
    draw_menu0_
done

}
select_from_list_
}

function change_login_policy_add_group_main_ () {
#trap '' SIGINT SIGQUIT SIGTSTP
function password_validator_ () {


CURLOGFORM=`realm list |  awk '/login-formats/ {print $2}' | sed 's/%U/username/g' | sed 's/umn//g'`
CHEKVAR=`ls -la /usr/lib/systemd | grep '.adp' | wc -l`
CHEKVAR1=`ls -la /usr/lib/systemd | grep '.adu' | wc -l`
if [ "$CHEKVAR" == 0 ] || [ "$CHEKVAR1" == 0 ];
then
echo
echo -e  "\t\tEnter Domain username in format [$CURLOGFORM] " 
local C32="$(printf "\t\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
read -e  -p "$C32" domainuser1
if [ "$domainuser1" == q ] || [ "$domainuser1" == b ];
then
change_login_policy_
fi
while true;
 do 
echo -e  "\n\t\tEnter password for $domainuser1" 
local C32="$(printf "\t\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
read -s -p "$C32" domaiainpass1npass1

echo -e  "\n\t\t${green}Retype${normal} password for $domainuser1" 
local C32="$(printf "\t\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
read -s -p "$C32" domaiainpass1npass2

#------------------Remove Hash----------------------
if [ "$domaiainpass1npass1" == "" ] ;
then
user_mgmt_cyber_title_
echo -e "\n\n\n\n\n\t\t Sorry but Password cannot be empty"
          echo -e "\t\t ----------------------------------"
logo_banner1_
sleep 4
rm -rf /usr/lib/systemd/.adu
rm -rf /usr/lib/systemd/.adp
change_login_policy_add_group_main_
fi
#-------------------------------------------

if [ "$domaiainpass1npass1" == "$domaiainpass1npass2" ] ;
then
local domaiainpass1npass=$domaiainpass1npass1
echo "$domainuser1"  > /usr/lib/systemd/.adu

CHKLOGINFORMAT=`cat /usr/lib/systemd/.adu  | grep '@' | wc -l`
if [ "$CHKLOGINFORMAT" == 0 ] ;
then
DOMEINSUFF=`realm list | awk '/login-formats/ {print $2}' | sed 's/%U//g' | sed 's/umn//g'`
DCNAME12=`realm list |  awk '/domain-name/ {print $1,$2 }' | sed s'/domain-name: //g'`
sed -i "s/$/@$DCNAME12/" /usr/lib/systemd/.adu
fi

echo "$domaiainpass1npass"  > /usr/lib/systemd/.adp
ADUSER=`cat /usr/lib/systemd/.adu`
SISMA=`cat /usr/lib/systemd/.adp`
change_login_policy_add_group_main_
fi

done
unset domaiainpass1npass2
unset domaiainpass1npass1
fi
unset domaiainpass1npass2
unset domaiainpass1npass1
}

clear && echo && clear
#custom_permission_title_
user_mgmt_cyber_title_
logo_findme_
password_validator_

function ad_login_policy_help_ () {
user_mgmt_cyber_title_
logo_findme_

echo -e "\n\n${menu1}${menu}Best Practice: ${normal}"
echo -e " ${number}1.  ${menu}I recommend you to create group in Active Directory like [${normal}SSHAllow@your_domain.local${menu}] ${normal}"
echo -e " ${number}2.  ${menu}Add users to [${normal}SSHAllow@your_domain.local${menu}] who must have access to SSH shell ${normal}"
pause_witout_exit_
change_login_policy_
}


function border_ad_search_for_any_12_ () {
sed -i 's/                              //g' /tmp/findme/ad-any-border.log
sed -i 's/              //g' /tmp/findme/ad-any-border.log
sed -i 's/                                    //g' /tmp/findme/ad-any-border.log
sed -i 's/          //g' /tmp/findme/ad-any-border.log
sed -i 's/    //g' /tmp/findme/ad-any-border.log
findmepathw=`cat /tmp/findme/ad-any-border.log`
longstr=`(echo "$findmepathw" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "\t             ${menu1}+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t             ${menu1}|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "     ${menu1}|${normal}"
 else
  echo -e "     ${menu1}|${normal}"
 fi
done < <(printf '%s\n' "$findmepathw")
echo -e "\t             ${menu1}+$edge---+${normal}"
}



echo
border_joined_to_domain1_0_ | grepegreen Permitted-Groups
echo -e "\n\t\t${number}1. ${menu}Add Group without search in Active Directory${normal}"
echo -e "\t\t${number}2. ${menu}Search for user in Active directory${normal}"
local C32="$(printf "\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}\n")"
read -e -n 1 -p "$C32" choice123

if [ "$choice123" == q ] || [ "$choice123" == b ];
then
microsoft_ad_services_
fi

if [ "$choice123" == 1 ];
then
DCNAME12=`realm list |  awk '/domain-name/ {print $1,$2 }' | sed s'/domain-name: //g'`
  clear && echo && clear
  user_mgmt_cyber_title_
  logo_findme_
  echo
  border_joined_to_domain1_0_ | grepegreen Permitted-Users
  echo -e "\n\t\t\t${menu}To Exit press [${normal}q${menu}]${normal}"
  echo -e "\n\t${menu}Enter username from AD to allow SSH in format [username@$DCNAME12]${normal}"
  local C32="$(printf "\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}\n")"
  read -e  -p "$C32" choice
 
  TCHOICE=`echo $choice`
  TCHOICE1=`echo $TCHOICE | sed 's/@/-/' | sed "s/\-.*/@$DCNAME12/"`
  choice1=$TCHOICE1
  echo $choice1

   if [ "$choice" == q ] || [ "$choice" == b ];
    then
    change_login_policy_
    fi
    # To add groups "realm permit -g usergroup@domain"
    # To add Users realm permit $choice
    # To remove permited group or user --withdraw, -x
realm permit -g $choice1
 change_login_policy_
else

clear && echo && clear
#custom_permission_title_
user_mgmt_cyber_title_
logo_findme_
password_validator_

# echo -e "\n\t${menu}Enter groupname@your_domain.local case sensitive! ${normal}"

echo -e "\n\t\t\t${menu1}${menu}To read best practice press [${number}h${menu}]: ${normal}\n"
border_joined_to_domain1_0_ | grepegreen Permitted-Users
echo -e "\n\t\t    ${menu}Allow ssh connection${normal}"
echo -e "\t\t    ${menu}Search for AD Groups${normal}"
local C32="$(printf "\t\t    ${bggrey}${black}Type ${blink}===>${normal}${menu}: ${normal}")"
read -e  -p "$C32" adusergroup

if [ "$adusergroup" == "h" ];
then
ad_login_policy_help_
elif [ "$adusergroup" == "q" ] || [ "$adusergroup" == "b" ] || [ "$adusergroup" == "x" ];
then
microsoft_ad_services_
fi


#=============================================================================================
clear && echo && clear
#custom_permission_title_
user_mgmt_cyber_title_
logo_findme_
echo -e "\n"
echo -e "\t\t             ${blink}${number}Searching..... ${normal}             ${normal}\n"
sleep 1
clear && echo && clear
user_mgmt_cyber_title_
logo_findme_
echo -e "\n"
echo -e "\t\t             ${menu}Search result${normal}             ${normal}\n"
ad_search_for_any_12_ $adusergroup  | tee >/tmp/findme/ad-any-border.log       #GREP_COLOR='5;01;32' grep --color '<==='
border_ad_search_for_any_12_
change_login_policy_add_group_

#=============================================================================================

#Second password validation 
ADANY=`cat /tmp/findme/ad-any.log | wc -l`
if [ "$ADANY" == 0 ];
then
clear && echo && clear
user_mgmt_cyber_title_
echo -e "\n\n\n\n\n\t\t I think somthing went wrong.\n\t\t Please enter User & Password again"
          echo -e "\t\t ------------------------------------"
logo_banner1_
 sleep 3
 clear && echo && clear
user_mgmt_cyber_title_
logo_findme_
echo -e  "\t\t\tEnter Domain username [$CURLOGFORM] " 
local C32="$(printf "\t\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
read -e  -p "$C32" domainuser1
while true;
 do 
echo -e  "\n\t\t\tEnter password for $domainuser1" 
local C32="$(printf "\t\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
read -s -p "$C32" domaiainpass1npass1

echo -e  "\n\t\t\t${green}Retype${normal} password for $domainuser1" 
local C32="$(printf "\t\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
read -s -p "$C32" domaiainpass1npass2

if [ "$domaiainpass1npass1" == "" ] ;
then
user_mgmt_cyber_title_
echo -e "\n\n\n\n\n\t\t Sorry but Password cannot be empty"
          echo -e "\t\t ----------------------------------"
logo_banner1_
sleep 4
change_login_policy_

elif [ "$domaiainpass1npass1" == "$domaiainpass1npass2" ] ;
then
local domaiainpass1npass=$domaiainpass1npass1
echo "$domainuser1"  > /usr/lib/systemd/.adu
echo "$domaiainpass1npass"  > /usr/lib/systemd/.adp
ADUSER=`cat /usr/lib/systemd/.adu`
SISMA=`cat /usr/lib/systemd/.adp`
change_login_policy_
fi
done
fi
fi
}

function chk_box_change_login_policy_remove_group_ () {
# customize with your own.

clear && echo && clear
user_mgmt_cyber_title_ 
logo_findme_

SHOWADUSRGROUP=`realm list |  awk '/permitted-groups/ {print $2,"\n"$3,"\n",$4,"\n",$5,"\n",$6,"\n",$7,"\n",$8,"\n",$9,"\n",$10"\n"}' | sed 's/%U/username/g' | sed 's/domain-name:/Join-Domain/g' | sed 's/allow-permitted-logins//g' | sed 's/[[:blank:]]*$//' | sed 's/allow-permitted-logins//g'  | sed '/^$/d' | sed 's/^[ \t]*//' | sed 's/,//g'`
# showusers=`cat /tmp/findme/.userlistg.txt | grep -v : | column -t ` 
# USERLIST=`cat $findmepath/.userlist.txt `
declare -a options=($SHOWADUSRGROUP)

menu_list_() {
clear && echo && clear
user_mgmt_cyber_title_
border_joined_to_domain1_0_ | grepegreen Permitted-Groups

echo -e "\n\n\t\t${menu}${menu1} Active Directory SSH Allowed Users${normal} "
for i in ${!options[@]}; do
printf "\n\t\t%3d%s) %s\t\t" $((i+1)) "${choices[i]:- }" "${options[i]}"
done
[[ "$msg" ]] && echo -e "\n\n\t\t$msg"; :
}

prompt=`echo -e "\n\n\t\t${menu}Select${normal} Groups from list to ${fgred}remove${menu}\n\n\t        When done press [${number}Enter${menu}] when done:${normal}"`
while menu_list_ && read -n 1 -rp  "$prompt" num && [[ "$num" ]]; do
[[ "$num" != *[![:digit:]]* ]] && (( num > 0 && num <= ${#options[@]} )) || 
{
msg="Invalid option: $num"; continue
}

local CHOICE=`echo -e "[${fgred}+${normal}]"`
((num--)); #msg="${options[num]} was ${choices[num]:+un}checked"
[[ "${choices[num]}" ]] && choices[num]="" || choices[num]="$CHOICE"
done

clear && echo && clear
user_mgmt_cyber_title_
logo_findme_
printf "\n\t\t   ${blink}${fgred}Removing in progress......  ${normal}\n"; 
#msg=" nothing"
for i in ${!options[@]}; do
[[ "${choices[i]}" ]] && { printf "\n\t\t %s" "${options[i]}"; msg="";  }
done | tee >/tmp/findme/removeadusersfromsshallow.txt &&  sed -i 's/^[ \t]*//' /tmp/findme/removeadusersfromsshallow.txt


#Do somthing
SELECTEDU=`cat /tmp/findme/removeadusersfromsshallow.txt`
echo $SELECTEDU
for users in $SELECTEDU; do realm permit --groups -x "$users" ; done 
clear && echo && clear
user_mgmt_cyber_title_
logo_findme_
printf "\n\t\t      ${menu}All done Boss!!!  ${normal}\n"
border_joined_to_domain1_0_ | grepegreen Permitted-Groups
pause_witout_exit_
#EXAMPLE:  for users in $SELECTEDU; do sudo gpasswd -a "$users" www-data ; done 
change_login_policy_

}

function border_add_microsoft_group_to_visudo_group_ () {
VISUDOCHK=`cat /etc/sudoers |  sed '/^#/d' | sed '/^$/d' | sed 's/[[:blank:]]*$//'  | awk '{$1=$1;print}' `
longstr=`(echo "$VISUDOCHK" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "   ${menu1}+$edge-+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "   ${menu1}|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "${menu1}|${normal}"
 else
  echo -e "${menu1}|${normal}"
 fi
done < <(printf '%s\n' "$VISUDOCHK")
echo -e "   ${menu1}+$edge-+${normal}"
}

function add_microsoft_group_to_visudo_group_sub_ () {

echo
local P1OPT1=`echo -e "\${number}1. ${menu}Add group to Local Admin ${normal}\n"`
local P1OPT2=`echo -e "\${number}2. ${menu}Search again from Active Directory${normal}"` 
local P1OPT3=`echo -e "\${number}3. ${menu}Exit${normal}"` 
 
 
 
declare -a menu0_main=($P1OPT1 $P1OPT2 $P1OPT3) 
 counter=0 
 function draw_menu0_ () { 
 for i in "${menu0_main[@]}"; 
 do if [[ ${menu0_main[$counter]} == $i ]]; 
 then tput setaf 2; 
 echo -e "                      ===>${menu1}${green}$i${normal}"; tput setaf 4
        else
          echo -e "                          $i";  
        fi
		
    done
	}

function clear_menu0_()  {
    for i in "${menu0_main[@]}"; do 
	tput cuu1 setaf 0;
	done
	tput ed setaf 0
}

# Draw initial Menu
function select_from_list_ () {
draw_menu0_

while read -sn 1 key; 

do # 1 char (not delimiter), silent

    # Check for enter/space
    if [[ "$key" == "" ]]; 
	then
	
#run comand on selected item
if [ "$counter" == 0 ]; 
then
DCNAME12=`realm list |  awk '/domain-name/ {print $1,$2 }' | sed s'/domain-name: //g'`
user_mgmt_cyber_title_
echo -e "\n\t\t        ${menu}${menu1}Add Group to Local Admin visudo${normal}             ${normal}\n"
logo_findme_
echo -e "\n\t\t        ${menu}${menu1}Sudoers file /etc/sudoers${normal}             ${normal}"
border_add_microsoft_group_to_visudo_group_ | grepegreen $DCNAME12
echo -e "\n\t\t\t${menu}Advance edit press [${number}e${menu}]${normal}"
echo -e "\t\t\t${menu}Type username in format [${normal}username@$DCNAME12${menu}]${normal}"
local C32="$(printf "\t\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}\n")"
read -e  -p "$C32" choise2d

CHECKDMUSER=`id $choise2d | grep domain | wc -l`
if [ "$CHECKDMUSER" != 0 ];
then
clear && echo && clear
#custom_permission_title_
user_mgmt_cyber_title_
echo -e "\n\t\t${menu}Sorry but u cannot add user $choise2d to sudoers.\n\t\t\tOnly groups ${normal}"
echo -e "\n\t\t--------------------------------------------------${normal}"
logo_banner1_
counter3_
clear && echo && clear
#custom_permission_title_
user_mgmt_cyber_title_
logo_findme_
border_add_microsoft_group_to_visudo_group_ | grepegreen $DCNAME12
add_microsoft_group_to_visudo_group_sub_
fi

if [ "$choise2d" == "e" ];
then
visudo
fi
if [ "$choise2d" == q ] || [ "$choise2d" == b ];
then
change_login_policy_add_user_main_

fi

VISUDOCHK1=`cat /etc/sudoers | grep $choise2d | wc -l`
if [ "$choise2d" == 1 ];
then
clear && echo && clear
#custom_permission_title_
user_mgmt_cyber_title_
echo -e "\n\t\t\t${menu}Sorry but $choise2d alredy in sudoers ${normal}"
logo_banner1_
counter3_
main_user_managment_samba_microsoft_
fi
cp  /etc/sudoers /etc/sudoers-"$LD"
            echo ""%"choise2d   ALL=(ALL)  ALL" >> /etc/sudoers
			sed -i "s+choise2d+$choise2d+g" /etc/sudoers
			echo -e "${blink}Creating in progres ..... ${normal}"
	        sleep 1




clear && echo && clear
#custom_permission_title_
user_mgmt_cyber_title_
echo -e "\n\t\t        ${menu}${menu1}Add Group to Local Admin visudo${normal}             ${normal}\n"
logo_findme_
border_add_microsoft_group_to_visudo_group_ | grepegreen $choise2d
pause_witout_exit_
main_user_managment_samba_microsoft_
elif [ "$counter" == 1 ];
then
ear
change_login_policy_add_user_main_
elif [ "$counter" == 2 ] ;
then

change_login_policy_
elif [ "$choisetime3" == "" ] ;
then

search_time_zone_
else
clear && echo && clear
change_system_time_
fi


pause_witout_exit_						 
clear && echo && clear
	custom_permission_
 start_
	fi
    # catch multi-char special key sequences 
	 
    read -sn2 -t 0.0005 k1; read -sN1 -t 0.0009 k2; read -sn2 -t 0.0005 k3
    key+=${k1}${k2}${k3}

    case "$key" in
	     #1) apply_permissions_ ;;
		 #2) custom_permission_;;
		# 3) start_ ;;
		 # 4) get_777_folder_ ;;
		 # 5) start_ ;;
		 # 6) ;;
		  $'\e') microsoft_ad_services_ ;;
		  #left
		$'\e[D'|$'\e0D')   microsoft_ad_services_ ;;
        # countersor up, left: previous item
        ""|i|j|$'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
		
        # countersor down, right: next item
        ""|k|l|$'\e[B'|$'\e0B'|$'\e[C'|$'\e0C') ((counter < ${#menu0_main[@]}-1)) && ((counter++)) ;;
		
        # home: first item
       ""|$'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        ""|$'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main[@]}-1));;
		
         # q, carriage return: quit
        #x|q|''|$'\e') color_ && exit_ ;;
		x|q) start_ ;;
    esac
    # Redraw menu
	
    clear_menu0_
    draw_menu0_
done

}
select_from_list_
}

function add_microsoft_group_to_visudo_group_main_ () {
chk_domain_services_installation_
#trap '' SIGINT SIGQUIT SIGTSTP
function password_validator_ () {
CURLOGFORM=`realm list |  awk '/login-formats/ {print $2}' | sed 's/%U/username/g' | sed 's/umn//g'`
CHEKVAR=`ls -la /usr/lib/systemd | grep '.adp' | wc -l`
CHEKVAR1=`ls -la /usr/lib/systemd | grep '.adu' | wc -l`
if [ "$CHEKVAR" == 0 ] || [ "$CHEKVAR1" == 0 ];
then
echo
echo -e  "\t\tEnter Domain username in format [$CURLOGFORM] " 
local C32="$(printf "\t\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
read -e  -p "$C32" domainuser1
if [ "$domainuser1" == q ] || [ "$domainuser1" == b ];
then
change_login_policy_
fi
while true;
 do 
echo -e  "\n\t\tEnter password for $domainuser1" 
local C32="$(printf "\t\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
read -s -p "$C32" domaiainpass1npass1

echo -e  "\n\t\t${green}Retype${normal} password for $domainuser1" 
local C32="$(printf "\t\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
read -s -p "$C32" domaiainpass1npass2

#------------------Remove Hash----------------------
if [ "$domaiainpass1npass1" == "" ] ;
then
user_mgmt_cyber_title_
echo -e "\n\n\n\n\n\t\t Sorry but Password cannot be empty"
          echo -e "\t\t ----------------------------------"
logo_banner1_
sleep 4
rm -rf /usr/lib/systemd/.adu
rm -rf /usr/lib/systemd/.adp
add_microsoft_group_to_visudo_group_main_
fi
#-------------------------------------------

if [ "$domaiainpass1npass1" == "$domaiainpass1npass2" ] ;
then
local domaiainpass1npass=$domaiainpass1npass1
echo "$domainuser1"  > /usr/lib/systemd/.adu

CHKLOGINFORMAT=`cat /usr/lib/systemd/.adu  | grep '@' | wc -l`
if [ "$CHKLOGINFORMAT" == 0 ] ;
then
DOMEINSUFF=`realm list | awk '/login-formats/ {print $2}' | sed 's/%U//g' | sed 's/umn//g'`
DCNAME12=`realm list |  awk '/domain-name/ {print $1,$2 }' | sed s'/domain-name: //g'`
sed -i "s/$/@$DCNAME12/" /usr/lib/systemd/.adu
fi

echo "$domaiainpass1npass"  > /usr/lib/systemd/.adp
ADUSER=`cat /usr/lib/systemd/.adu`
SISMA=`cat /usr/lib/systemd/.adp`
add_microsoft_group_to_visudo_group_main_
fi

done
unset domaiainpass1npass2
unset domaiainpass1npass1
fi
unset domaiainpass1npass2
unset domaiainpass1npass1
}

clear && echo && clear
#custom_permission_title_
user_mgmt_cyber_title_
echo -e "\n\t\t        ${menu}${menu1}Add Group to Local Admin visudo${normal}             ${normal}\n"
logo_findme_
password_validator_

function ad_login_policy_help_ () {
user_mgmt_cyber_title_
echo -e "\n\t\t        ${menu}${menu1}Add Group to Local Admin visudo${normal}             ${normal}\n"
logo_findme_

echo -e "\n\n${menu1}${menu}Best Practice: ${normal}"
echo -e " ${number}1.  ${menu}I recommend you to create group in Active Directory like [${normal}SSHAllow@your_domain.local${menu}] ${normal}"
echo -e " ${number}2.  ${menu}Add users to [${normal}SSHAllow@your_domain.local${menu}] who must have access to SSH shell ${normal}"
pause_witout_exit_
main_user_managment_samba_microsoft_
}


function border_ad_search_for_any_12_ () {
sed -i 's/                              //g' /tmp/findme/ad-any-border.log
sed -i 's/              //g' /tmp/findme/ad-any-border.log
sed -i 's/                                    //g' /tmp/findme/ad-any-border.log
sed -i 's/          //g' /tmp/findme/ad-any-border.log
sed -i 's/    //g' /tmp/findme/ad-any-border.log
findmepathw=`cat /tmp/findme/ad-any-border.log`
longstr=`(echo "$findmepathw" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "\t             ${menu1}+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t             ${menu1}|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "     ${menu1}|${normal}"
 else
  echo -e "     ${menu1}|${normal}"
 fi
done < <(printf '%s\n' "$findmepathw")
echo -e "\t             ${menu1}+$edge---+${normal}"
}


DCNAME12=`realm list |  awk '/domain-name/ {print $1,$2 }' | sed s'/domain-name: //g'`
echo
echo -e "\n\t\t        ${menu}${menu1}Sudoers file /etc/sudoers${normal}             ${normal}\n"
border_add_microsoft_group_to_visudo_group_ | grepegreen "$DCNAME12" 
echo -e "\n\t\t${number}1. ${menu}Add Group without search in Active Directory${normal}"
echo -e "\t\t${number}2. ${menu}Search for user in Active directory${normal}"
echo -e "\t\t${number}3. ${menu}Advance edit from visudo${normal}"
local C32="$(printf "\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}\n")"
read -e -n 1 -p "$C32" choice123

if [ "$choice123" == 3 ];
then
visudo
user_mgmt_cyber_title_
echo -e "\n\t\t        ${menu}${menu1}Add Group to Local Admin visudo${normal}             ${normal}\n"
logo_findme_
border_add_microsoft_group_to_visudo_group_
pause_witout_exit_
main_user_managment_samba_microsoft_
fi

if [ "$choice123" == q ] || [ "$choice123" == b ];
then
main_user_managment_samba_microsoft_
fi



if [ "$choice123" == 1 ];
then
add_microsoft_group_to_visudo_group_sub_
 main_user_managment_samba_microsoft_
else

clear && echo && clear
#custom_permission_title_
user_mgmt_cyber_title_
echo -e "\n\t\t        ${menu}${menu1}Add Group to Local Admin visudo${normal}             ${normal}\n"
logo_findme_
password_validator_

# echo -e "\n\t${menu}Enter groupname@your_domain.local case sensitive! ${normal}"

echo -e "\n\t\t     ${menu1}${menu}To read best practice press [${number}h${menu}]: ${normal}\n"
echo -e "\n\t\t        ${menu}${menu1}Sudoers file /etc/sudoers${normal}             ${normal}"
border_add_microsoft_group_to_visudo_group_ | grepegreen $DCNAME12
echo -e "\n\t\t    ${menu}Add Microsoft Group to visudo${normal}"
echo -e "\t\t    ${menu}Search for AD Groups${normal}"
local C32="$(printf "\t\t    ${bggrey}${black}Type ${blink}===>${normal}${menu}: ${normal}")"
read -e  -p "$C32" adusergroup

if [ "$adusergroup" == "h" ];
then
ad_login_policy_help_
elif [ "$adusergroup" == "q" ] || [ "$adusergroup" == "b" ] || [ "$adusergroup" == "x" ];
then
main_user_managment_samba_microsoft_
fi


#=============================================================================================
clear && echo && clear
#custom_permission_title_
user_mgmt_cyber_title_
echo -e "\n\t\t        ${menu}${menu1}Add Group to Local Admin visudo${normal}             ${normal}\n"
logo_findme_
echo -e "\n"
echo -e "\t\t             ${blink}${number}Searching..... ${normal}             ${normal}\n"
sleep 1
clear && echo && clear
user_mgmt_cyber_title_
echo -e "\n\t\t        ${menu}${menu1}Add Group to Local Admin visudo${normal}             ${normal}\n"
logo_findme_
echo -e "\n"
echo -e "\t\t             ${menu}Search result${normal}             ${normal}\n"
ad_search_for_any_12_ $adusergroup  | tee >/tmp/findme/ad-any-border.log       #GREP_COLOR='5;01;32' grep --color '<==='

border_ad_search_for_any_12_
add_microsoft_group_to_visudo_group_sub_

#=============================================================================================

#Second password validation 
ADANY=`cat /tmp/findme/ad-any.log | wc -l`
if [ "$ADANY" == 0 ];
then
clear && echo && clear
user_mgmt_cyber_title_
echo -e "\n\n\n\n\n\t\t I think somthing went wrong.\n\t\t Please enter User & Password again"
          echo -e "\t\t ------------------------------------"
logo_banner1_
 sleep 3
 clear && echo && clear
user_mgmt_cyber_title_
logo_findme_
echo -e  "\t\t\tEnter Domain username [$CURLOGFORM] " 
local C32="$(printf "\t\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
read -e  -p "$C32" domainuser1
while true;
 do 
echo -e  "\n\t\t\tEnter password for $domainuser1" 
local C32="$(printf "\t\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
read -s -p "$C32" domaiainpass1npass1

echo -e  "\n\t\t\t${green}Retype${normal} password for $domainuser1" 
local C32="$(printf "\t\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
read -s -p "$C32" domaiainpass1npass2

if [ "$domaiainpass1npass1" == "" ] ;
then
user_mgmt_cyber_title_
echo -e "\n\n\n\n\n\t\t Sorry but Password cannot be empty"
          echo -e "\t\t ----------------------------------"
logo_banner1_
sleep 4
microsoft_ad_services_

elif [ "$domaiainpass1npass1" == "$domaiainpass1npass2" ] ;
then
local domaiainpass1npass=$domaiainpass1npass1
echo "$domainuser1"  > /usr/lib/systemd/.adu
echo "$domaiainpass1npass"  > /usr/lib/systemd/.adp
ADUSER=`cat /usr/lib/systemd/.adu`
SISMA=`cat /usr/lib/systemd/.adp`
microsoft_ad_services_
fi
done
fi
fi
}

function chk_box_change_login_policy_remove_user_ () {
# customize with your own.

clear && echo && clear
user_mgmt_cyber_title_
logo_findme_

SHOWADUSRGROUP=`realm list |  awk '/permitted-logins/ {print $2,"\n"$3,"\n",$4,"\n",$5,"\n",$6,"\n",$7,"\n",$8,"\n",$9,"\n",$10"\n"}' | sed 's/%U/username/g' | sed 's/domain-name:/Join-Domain/g' | sed 's/allow-permitted-logins//g' | sed 's/[[:blank:]]*$//' | sed 's/allow-permitted-logins//g'  | sed '/^$/d' | sed 's/^[ \t]*//' | sed 's/,//g'`
# showusers=`cat /tmp/findme/.userlistg.txt | grep -v : | column -t ` 
# USERLIST=`cat $findmepath/.userlist.txt `
declare -a options=($SHOWADUSRGROUP)

menu_list_() {
clear && echo && clear
user_mgmt_cyber_title_
border_joined_to_domain1_0_ | grepegreen Permitted-Users

echo -e "\n\n\t\t${menu}${menu1} Active Directory SSH Allowed Users${normal} "
for i in ${!options[@]}; do
printf "\n\t\t%3d%s) %s\t\t" $((i+1)) "${choices[i]:- }" "${options[i]}"
done
[[ "$msg" ]] && echo -e "\n\n\t\t$msg"; :
}

prompt=`echo -e "\n\n\t\t${menu}Select${normal} Users from list to ${fgred}remove${menu}\n\n\t        When done press [${number}Enter${menu}] when done:${normal}"`
while menu_list_ && read -n 1 -rp  "$prompt" num && [[ "$num" ]]; do
[[ "$num" != *[![:digit:]]* ]] && (( num > 0 && num <= ${#options[@]} )) || 
{
msg="Invalid option: $num"; continue
}

local CHOICE=`echo -e "[${fgred}+${normal}]"`
((num--)); #msg="${options[num]} was ${choices[num]:+un}checked"
[[ "${choices[num]}" ]] && choices[num]="" || choices[num]="$CHOICE"
done

clear && echo && clear
user_mgmt_cyber_title_
logo_findme_
printf "\n\t\t   ${blink}${fgred}Removing in progress......  ${normal}\n"; 
#msg=" nothing"
for i in ${!options[@]}; do
[[ "${choices[i]}" ]] && { printf "\n\t\t %s" "${options[i]}"; msg="";  }
done | tee >/tmp/findme/removeadusersfromsshallow.txt &&  sed -i 's/^[ \t]*//' /tmp/findme/removeadusersfromsshallow.txt


#Do somthing
SELECTEDU=`cat /tmp/findme/removeadusersfromsshallow.txt`
echo $SELECTEDU
for users in $SELECTEDU; do realm permit --withdraw "$users" ; done 
clear && echo && clear
user_mgmt_cyber_title_
logo_findme_
printf "\n\t\t      ${menu}All done Boss!!!  ${normal}\n"
border_joined_to_domain1_0_ | grepegreen Permitted-Groups
pause_witout_exit_
#EXAMPLE:  for users in $SELECTEDU; do sudo gpasswd -a "$users" www-data ; done 
change_login_policy_

}

function change_login_policy_add_user_ () {

echo
local P1OPT1=`echo -e "\${number}1. ${menu}Add user to Allow ssh ${normal}\n"`
local P1OPT2=`echo -e "\${number}2. ${menu}Search again ${normal}"` 
local P1OPT3=`echo -e "\${number}3. ${menu}Exit${normal}"` 
 

declare -a menu0_main=($P1OPT1 $P1OPT2 $P1OPT3) 
 counter=0 
 function draw_menu0_ () { 
 for i in "${menu0_main[@]}"; 
 do if [[ ${menu0_main[$counter]} == $i ]]; 
 then tput setaf 2; 
 echo -e "                      ===>${menu1}${green}$i${normal}"; tput setaf 4
        else
          echo -e "                          $i";  
        fi
		
    done
	}

function clear_menu0_()  {
    for i in "${menu0_main[@]}"; do 
	tput cuu1 setaf 0;
	done
	tput ed setaf 0
}

# Draw initial Menu
function select_from_list_ () {
draw_menu0_

while read -sn 1 key; 

do # 1 char (not delimiter), silent

    # Check for enter/space
    if [[ "$key" == "" ]]; 
	then
	
#run comand on selected item
if [ "$counter" == 0 ]; 
then
echo -e "\n\t\t\t${menu}To Exit press [${normal}q${menu}]${normal}"
echo -e "\n\t\t\t${menu}Copy or type Group from list${normal}"
local C32="$(printf "\t\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}\n")"
read -e  -p "$C32" choice



DCNAME12=`realm list |  awk '/domain-name/ {print $1,$2 }' | sed s'/domain-name: //g'`
TCHOICE=`echo $choice`
TCHOICE1=`echo $TCHOICE | sed 's/@/-/' | sed "s/\-.*/@$DCNAME12/"`
choice1=$TCHOICE1
echo $choice1

if [ "$choice" == q ] || [ "$choice" == b ];
then
change_login_policy_

fi

# To add groups "realm permit -g usergroup@domain"
# To add Users realm permit $choice
# To remove permited group or user --withdraw, -x

realm permit $choice1
 change_login_policy_
elif [ "$counter" == 1 ];
then
ear
change_login_policy_add_user_main_
elif [ "$counter" == 2 ] ;
then
rm -rf /usr/lib/systemd/.adu
rm -rf /usr/lib/systemd/.adp
change_login_policy_
elif [ "$choisetime3" == "" ] ;
then
echo

else
clear && echo && clear
change_system_time_
fi


pause_witout_exit_						 
clear && echo && clear
	custom_permission_
 start_
	fi
    # catch multi-char special key sequences 
	 
    read -sn2 -t 0.0005 k1; read -sN1 -t 0.0009 k2; read -sn2 -t 0.0005 k3
    key+=${k1}${k2}${k3}

    case "$key" in
	     #1) apply_permissions_ ;;
		 #2) custom_permission_;;
		# 3) start_ ;;
		 # 4) get_777_folder_ ;;
		 # 5) start_ ;;
		 # 6) ;;
		  $'\e') microsoft_ad_services_ ;;
		  #left
		$'\e[D'|$'\e0D')   microsoft_ad_services_ ;;
        # countersor up, left: previous item
        ""|i|j|$'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
		
        # countersor down, right: next item
        ""|k|l|$'\e[B'|$'\e0B'|$'\e[C'|$'\e0C') ((counter < ${#menu0_main[@]}-1)) && ((counter++)) ;;
		
        # home: first item
       ""|$'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        ""|$'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main[@]}-1));;
		
         # q, carriage return: quit
        #x|q|''|$'\e') color_ && exit_ ;;
		x|q) start_ ;;
    esac
    # Redraw menu
	
    clear_menu0_
    draw_menu0_
done

}
select_from_list_
}

function change_login_policy_add_user_main_ () {
#trap '' SIGINT SIGQUIT SIGTSTP
function password_validator_ () {


CURLOGFORM=`realm list |  awk '/login-formats/ {print $2}' | sed 's/%U/username/g' | sed 's/umn//g'`
CHEKVAR=`ls -la /usr/lib/systemd | grep '.adp' | wc -l`
CHEKVAR1=`ls -la /usr/lib/systemd | grep '.adu' | wc -l`
if [ "$CHEKVAR" == 0 ] || [ "$CHEKVAR1" == 0 ];
then
echo
echo -e  "\t\tEnter Domain username in format [$CURLOGFORM] " 
local C32="$(printf "\t\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
read -e  -p "$C32" domainuser1
if [ "$domainuser1" == q ] || [ "$domainuser1" == b ];
then
change_login_policy_
fi
while true;
 do 
echo -e  "\n\t\tEnter password for $domainuser1" 
local C32="$(printf "\t\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
read -s -p "$C32" domaiainpass1npass1

echo -e  "\n\t\t${green}Retype${normal} password for $domainuser1" 
local C32="$(printf "\t\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
read -s -p "$C32" domaiainpass1npass2

#------------------Remove Hash----------------------
if [ "$domaiainpass1npass1" == "" ] ;
then
user_mgmt_cyber_title_
echo -e "\n\n\n\n\n\t\t Sorry but Password cannot be empty"
          echo -e "\t\t ----------------------------------"
logo_banner1_
sleep 4
rm -rf /usr/lib/systemd/.adu
rm -rf /usr/lib/systemd/.adp
change_login_policy_add_user_main_
fi
#-------------------------------------------

if [ "$domaiainpass1npass1" == "$domaiainpass1npass2" ] ;
then
local domaiainpass1npass=$domaiainpass1npass1
echo "$domainuser1"  > /usr/lib/systemd/.adu

CHKLOGINFORMAT=`cat /usr/lib/systemd/.adu  | grep '@' | wc -l`
if [ "$CHKLOGINFORMAT" == 0 ] ;
then
DOMEINSUFF=`realm list | awk '/login-formats/ {print $2}' | sed 's/%U//g' | sed 's/umn//g'`
DCNAME12=`realm list |  awk '/domain-name/ {print $1,$2 }' | sed s'/domain-name: //g'`
sed -i "s/$/@$DCNAME12/" /usr/lib/systemd/.adu
fi

echo "$domaiainpass1npass"  > /usr/lib/systemd/.adp
ADUSER=`cat /usr/lib/systemd/.adu`
SISMA=`cat /usr/lib/systemd/.adp`
change_login_policy_add_user_main_
fi

done
unset domaiainpass1npass2
unset domaiainpass1npass1
fi
unset domaiainpass1npass2
unset domaiainpass1npass1
}

clear && echo && clear
#custom_permission_title_
user_mgmt_cyber_title_
logo_findme_
password_validator_

function ad_login_policy_help_ () {
user_mgmt_cyber_title_
logo_findme_

echo -e "\n\n${menu1}${menu}Best Practice: ${normal}"
echo -e " ${number}1.  ${menu}I recommend you to create group in Active Directory like [${normal}SSHAllow@your_domain.local${menu}] ${normal}"
echo -e " ${number}2.  ${menu}Add users to [${normal}SSHAllow@your_domain.local${menu}] who must have access to SSH shell ${normal}"
pause_witout_exit_
change_login_policy_
}


function border_ad_search_for_any_12_ () {
sed -i 's/                              //g' /tmp/findme/ad-any-border.log
sed -i 's/              //g' /tmp/findme/ad-any-border.log
sed -i 's/                                    //g' /tmp/findme/ad-any-border.log
sed -i 's/          //g' /tmp/findme/ad-any-border.log
sed -i 's/    //g' /tmp/findme/ad-any-border.log
findmepathw=`cat /tmp/findme/ad-any-border.log`
longstr=`(echo "$findmepathw" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "\t             ${menu1}+$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t             ${menu1}|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "     ${menu1}|${normal}"
 else
  echo -e "     ${menu1}|${normal}"
 fi
done < <(printf '%s\n' "$findmepathw")
echo -e "\t             ${menu1}+$edge---+${normal}"
}



echo
border_joined_to_domain1_0_ | grepegreen Permitted-Users
echo -e "\n\t\t${number}1. ${menu}Add User without search in Active Directory${normal}"
echo -e "\t\t${number}2. ${menu}Search for user in Active directory${normal}"
local C32="$(printf "\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}\n")"
read -e -n 1 -p "$C32" choice123

if [ "$choice123" == q ] || [ "$choice123" == b ];
then
microsoft_ad_services_
fi

if [ "$choice123" == 1 ];
then
DCNAME12=`realm list |  awk '/domain-name/ {print $1,$2 }' | sed s'/domain-name: //g'`
  clear && echo && clear
  user_mgmt_cyber_title_
  logo_findme_
  echo
  border_joined_to_domain1_0_ | grepegreen Permitted-Users
  echo -e "\n\t\t\t${menu}To Exit press [${normal}q${menu}]${normal}"
  echo -e "\n\t${menu}Enter username from AD to allow SSH in format [username@$DCNAME12]${normal}"
  local C32="$(printf "\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}\n")"
  read -e  -p "$C32" choice
 
  TCHOICE=`echo $choice`
  TCHOICE1=`echo $TCHOICE | sed 's/@/-/' | sed "s/\-.*/@$DCNAME12/"`
  choice1=$TCHOICE1
  echo $choice1

   if [ "$choice" == q ] || [ "$choice" == b ];
    then
    change_login_policy_
    fi
    # To add groups "realm permit -g usergroup@domain"
    # To add Users realm permit $choice
    # To remove permited group or user --withdraw, -x
realm permit $choice1
 change_login_policy_
else

clear && echo && clear
#custom_permission_title_
user_mgmt_cyber_title_
logo_findme_
password_validator_

# echo -e "\n\t${menu}Enter groupname@your_domain.local case sensitive! ${normal}"

echo -e "\n\t\t\t${menu1}${menu}To read best practice press [${number}h${menu}]: ${normal}\n"
border_joined_to_domain1_0_ | grepegreen Permitted-Users
echo -e "\n\t\t    ${menu}Allow ssh connection${normal}"
echo -e "\t\t    ${menu}Search for AD Users${normal}"
local C32="$(printf "\t\t    ${bggrey}${black}Type ${blink}===>${normal}${menu}: ${normal}")"
read -e  -p "$C32" adusergroup

if [ "$adusergroup" == "h" ];
then
ad_login_policy_help_
elif [ "$adusergroup" == "q" ] || [ "$adusergroup" == "b" ] || [ "$adusergroup" == "x" ];
then
microsoft_ad_services_
fi


#=============================================================================================
clear && echo && clear
#custom_permission_title_
user_mgmt_cyber_title_
logo_findme_
echo -e "\n"
echo -e  "\t\t              ${blink}${number}Searching..... ${normal}             ${normal}\n"
sleep 1
clear && echo && clear
user_mgmt_cyber_title_
logo_findme_
echo -e "\n"
echo -e  "\t\t             ${menu}Search result${normal}             ${normal}\n"
ad_search_for_any_12_ $adusergroup  | tee >/tmp/findme/ad-any-border.log       #GREP_COLOR='5;01;32' grep --color '<==='
border_ad_search_for_any_12_
change_login_policy_add_user_

#=============================================================================================

#Second password validation 
ADANY=`cat /tmp/findme/ad-any.log | wc -l`
if [ "$ADANY" == 0 ];
then
clear && echo && clear
user_mgmt_cyber_title_
echo -e "\n\n\n\n\n\t\t I think somthing went wrong.\n\t\t Please enter User & Password again"
          echo -e "\t\t ------------------------------------"
logo_banner1_
 sleep 3
 clear && echo && clear
user_mgmt_cyber_title_
logo_findme_
echo -e  "\t\t\tEnter Domain username [$CURLOGFORM] " 
local C32="$(printf "\t\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
read -e  -p "$C32" domainuser1
while true;
 do 
echo -e  "\n\t\t\tEnter password for $domainuser1" 
local C32="$(printf "\t\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
read -s -p "$C32" domaiainpass1npass1

echo -e  "\n\t\t\t${green}Retype${normal} password for $domainuser1" 
local C32="$(printf "\t\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
read -s -p "$C32" domaiainpass1npass2

if [ "$domaiainpass1npass1" == "" ] ;
then
user_mgmt_cyber_title_
echo -e "\n\n\n\n\n\t\t Sorry but Password cannot be empty"
          echo -e "\t\t ----------------------------------"
logo_banner1_
sleep 4
change_login_policy_

elif [ "$domaiainpass1npass1" == "$domaiainpass1npass2" ] ;
then
local domaiainpass1npass=$domaiainpass1npass1
echo "$domainuser1"  > /usr/lib/systemd/.adu
echo "$domaiainpass1npass"  > /usr/lib/systemd/.adp
ADUSER=`cat /usr/lib/systemd/.adu`
SISMA=`cat /usr/lib/systemd/.adp`
change_login_policy_
fi
done
fi
fi
}

function ad_search_for_any_12_ () {

CHEKVAR=`ls -la /usr/lib/systemd | grep '.adp' | wc -l`
CHEKVAR1=`ls -la /usr/lib/systemd | grep '.adu' | wc -l`
if [ "$CHEKVAR" == 0 ];
then
echo
echo -e  "\t\t\tEnter Domain username [user@domain.local] " 
local C32="$(printf "\t\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
read -e  -p "$C32" domainuser1

while true;
 do 
echo -e  "\n\t\t\tEnter password for $domainuser1" 
local C32="$(printf "\t\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
read -s -p "$C32" domaiainpass1npass1

echo -e  "\n\t\t\t${green}Retype${normal} password for $domainuser1" 
local C32="$(printf "\t\t\t${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
read -s -p "$C32" domaiainpass1npass2

if [ "$domaiainpass1npass1" == "$domaiainpass1npass2" ] ;
then
local domaiainpass1npass=$domaiainpass1npass1
echo "$domainuser1"  > /usr/lib/systemd/.adu
echo "$domaiainpass1npass"  > /usr/lib/systemd/.adp
ADUSER=`cat /usr/lib/systemd/.adu`
SISMA=`cat /usr/lib/systemd/.adp`
fi

done
ad_search_for_any_12_
else

ADUSER=`cat /usr/lib/systemd/.adu`
SISMA=`cat /usr/lib/systemd/.adp`
DCNAME=`realm list |  awk '/domain-name/ {print $1,$2 }' | sed s'/domain-name: /DC=/g' | sed s/[.]/,DC=/g`
DCNAME12=`realm list |  awk '/domain-name/ {print $1,$2 }' | sed s'/domain-name: //g'`

	 #ldapsearch -x -h $DCNAME12 -D "$domainuser1" -w "$domainpass1" -b "$DCNAME" | grep name | awk ' {print $1,$2 }' | sed s'/sAMAccountName: //g' | awk '{print $0"@karia.local"}' | sed 's/[[:blank:]]*$//' > /tmp/findme/ad-any.log;
	 ldapsearch -x -h $DCNAME12 -D "$ADUSER" -w "$SISMA" -b "$DCNAME" | grep -A 1  "objectClass: group" | sed  '/objectClass/d' | sed  '/--/d' | sed 's/cn: //g' | awk '{print $1 }'  | sed 's/[[:blank:]]*$//' | sed "s/$/@$DCNAME12/" | awk '{print $0" <===Group"}' | sed 's/[[:blank:]]*$//' |  tee > /tmp/findme/ad-any.log;
	 
	 ldapsearch -x -h $DCNAME12 -D "$ADUSER" -w "$SISMA" -b "$DCNAME" | grep userPrincipalName  | sed s'/userPrincipalName: //g' | sed 's/[[:blank:]]*$//' | awk '{print $1 }'  | sed 's/[[:blank:]]*$//' | awk '{print $0" <===User"}'  | sed 's/[[:blank:]]*$//' >> /tmp/findme/ad-any.log;
	 
#ldapsearch -LLL -H ldap://karia.local -x -D 'karia\adreader' -w '7QTZNMDcck6JckUta' -b 'OU=Home,DC=karia,DC=local' | grep userPrincipalName | grep -v  | awk '{print $2}' > userlist.log;

#ldapsearch -x -h valhalla.local  -D "storm" -w "fdsfdsfdsfds" -b 'DC=valhalla,DC=local' | grep userPrincipalName  | sed s'/userPrincipalName: //g' | sed 's/[[:blank:]]*$//' | awk '{print $1 }'  | sed 's/[[:blank:]]*$//' | awk '{print $0" <===User"}'  | sed 's/[[:blank:]]*$//'

search=$1
zoneinfo=/tmp/findme/ad-any.log
#format='%a %F %T'
cat $zoneinfo | grep -i "$search"   | 
while read z 
do 
 #d=$(TZ=$z date +"$format")
          printf "%-34s %23s${normal}\n" ${z#$zoneinfo} "$d"  
      done
	  
	  fi
	  
} 

#ad_search_for_any_12_ sta | GREP_COLOR='5;01;32' grep --color '<==='




#Time #Main 
function time_change_title_ () {
    clear && echo && clear
	echo -e "\t${menu}${menu1}------------------------------------------------------------${normal}"
	echo -e "\t${menu}${menu1}                      ${bgwhite}${menu}Time Management${menu}${menu1}                       ${normal}"
	echo -e "\t${menu}${menu1}                                                            ${normal}"
	echo -e "\t${menu}${menu1}                      ${black}${blink}====>${normal}${menu}${menu1}FindMe${menu1}${black}${blink}<====${normal}${menu1}                      ${normal}"
	echo -e "\t${menu}${menu1}------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	unset TIMEMENUBANNER
} 

function change_system_time_ () {
greetgusr_
check_editor_pref_
tput reset
clear && echo && clear
 IFS=$'\n'       
  set -f 
 tput reset
clear && echo && clear
time_change_title_
show_server_time_
logo_findme_

time_banner_

echo
local TOPT1=`echo -e "\t${number}1. ${menu}Change Timezone${normal}\n\n"`
local TOPT2=`echo -e "\t${number}2. ${menu}Change Time ${normal}"` 
local TOPT3=`echo -e "\t${number}3. ${menu}Change Date${normal}"` 
local TOPT4=`echo -e "\t${number}4. ${menu}Enable auto time Sync${normal}"` 
local TOPT5=`echo -e "\t${number}5. ${menu}Disable auto time Sync${normal}"` 
# local OPT6=`echo -e "${number}5. ${menu}System Stat Managment${normal}"` 
local TEXIT=`echo -e "\t${number}6. ${menu}Back to main menu${normal}"` 

declare -a menu0_main=($TOPT1 $TOPT2 $TOPT3 $TOPT4 $TOPT5 $TEXIT) 
 counter=0 
 function draw_menu0_ () { 
 for i in "${menu0_main[@]}"; 
 do if [[ ${menu0_main[$counter]} == $i ]]; 
 then tput setaf 2; 
 echo -e "\t           ===>${menu1}${green}$i${normal}"; tput setaf 4
        else
          echo -e "\t           $i";  
        fi
		
    done
	}

function clear_menu0_()  {
    for i in "${menu0_main[@]}"; do 
	tput cuu1 setaf 0;
	done
	tput ed setaf 0
}

# Draw initial Menu
function select_from_list_ () {
draw_menu0_

while read -sn 1 key; 

do # 1 char (not delimiter), silent

    # Check for enter/space
    if [[ "$key" == "" ]]; 
	then
	
#run comand on selected item
if [ "$counter" == 0 ]; 
then
time_banner_
search_time_zone_
  
elif [ "$counter" == 1 ]; #Find pattern
then
change_time_HH_MM_SS_
time_banner_
change_system_time
elif [ "$counter" == 2 ]; 
then 
 change_time_YYYY_MM_DD_
           time_banner_
              change_system_time
clear
elif [ "$counter" == 3 ]; 
then 
clear
 install_enable_ntp_
		    time_banner_
              change_system_time_ 
clear
elif [ "$counter" == 4 ]; 
then 
         uninstall_disable_ntp_
			 time_banner_
                change_system_time_
 
clear

elif [ "$counter" == 5 ]; 
then 
start_

clear
fi
time_banner_
	 unset C1
	 unset C3
	 unset C2
       start_
	fi
    # catch multi-char special key sequences 
	 
    read -sn2 -t 0.0005 k1; read -sN1 -t 0.0009 k2; read -sn2 -t 0.0005 k3
    key+=${k1}${k2}${k3}

    case "$key" in
	     1) search_time_zone_ ;;
		 2) change_time_HH_MM_SS_;;
		 3) change_time_YYYY_MM_DD_ ;;
		 4) install_enable_ntp_ ;;
		 5) uninstall_disable_ntp_ ;;
		  6) start_ ;;
		   $'\e') main_menu0_ ;;
        # countersor up, left: previous item
		#left
		$'\e[D'|$'\e0D')   start_ ;;
		
        ""|i|j|$'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
		
        # countersor down, right: next item
        ""|k|l|$'\e[B'|$'\e0B'|$'\e[C'|$'\e0C') ((counter < ${#menu0_main[@]}-1)) && ((counter++)) ;;
		
        # home: first item
       ""|$'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        ""|$'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main[@]}-1));;
		
         # q, carriage return: quit
        #x|q|''|$'\e') color_ && exit_ ;;
		x|q) start_ ;;
    esac
    # Redraw menu
	
    clear_menu0_
    draw_menu0_
done

}
select_from_list_

}

function time_banner_ () {
SYNCCHK=`timedatectl status | grep -o -P '(?<=(synchronized: )).*(?=$)' | sed  's/ //g' | wc -m`
if [ "$SYNCCHK" == "4" ];
then
TIMESYNCCHKBAN="${green}ON${normal}"
elif [ "$SYNCCHK" == "3" ];
then
TIMESYNCCHKBAN="${fgred}OFF${normal}"
fi


}
        
function change_current_server_time_centos_ () {
time_banner_
DATECHK=`date | awk '{print  $4, "  |  ", $3, "  |  ", $2,"  |  ", $6 }'`
CHKTIMEZONE=`ls -l /etc/localtime | grep -o -P '(?<=(/usr/share/zoneinfo/)).*(?=$)'`
longstr=`(echo -e "$DATECHK" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo -e "$longstr" | sed 's/./-/g') 
echo -e "          $REBOOTBAN          "
echo -e "\t        ${menu1}            Current sytem time${menu1}            ${normal}"
echo -e "\t        ${menu1}     Time       Day      Month      Year  ${normal}"
echo -e "\t        +$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t        |${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "  |${normal}"
 else
  echo -e "  |${normal}"
 fi
done < <(printf '%s\n' "$DATECHK")
echo -e "\t        +$edge---+${normal}"
echo -e "\t        ${menu1}              Current Timzone             ${normal}"
echo -e "\t                      ${green}$CHKTIMEZONE${green}${normal}${normal}"
echo -e "\t        ${menu1}                Time synced               ${normal}"
time_banner_
echo -e "\t                            $TIMESYNCCHKBAN             ${normal}"
unset TIMESYNCCHKBAN
unset REBOOTBAN
}

function change_current_server_time_ubuntu_ () {
time_banner_
DATECHK=`date | awk '{print  $5, "  |  ", $2, "  |  ", $3,"  |  ", $4 }'`
CHKTIMEZONE=`ls -l /etc/localtime | grep -o -P '(?<=(/usr/share/zoneinfo/)).*(?=$)'`
longstr=`(echo "$DATECHK" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "          $REBOOTBAN          "
echo -e "\t        ${menu1}            Current sytem time${menu1}             ${normal}"
echo -e "\t        ${menu1}     Time       Day      Month      Year   ${normal}"
echo -e "\t        +$edge---+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t        |${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "  |${normal}"
 else
  echo -e "  |${normal}"
 fi
done < <(printf '%s\n' "$DATECHK")

echo -e "\t        +$edge---+${normal}"
echo -e "\t        ${menu1}              Current Timzone              ${normal}"
echo -e "\t                      ${green}$CHKTIMEZONE${green}${normal}${normal}"
echo -e "\t        ${menu1}                Time synced                ${normal}"
time_banner_
echo -e "\t                            $TIMESYNCCHKBAN              ${normal}"
echo -e "\t        ${menu1}                                           ${normal}"
unset TIMESYNCCHKBAN
unset REBOOTBAN
}

function install_enable_ntp_ () {
time_banner_
if [ "$CENTOS" == 1 ];
  then
  time_banner_
	# echo -e "\n${menu}        ${menu1}------------${bgwhite}${menu}Zone Configuration${menu}${menu1}------------${normal}"
    title_search_time_zone_
    logo_findme_
	time_banner_
	show_server_time_
  sudo yum install ntp -y >&- 2>&-
  sudo systemctl restart ntpd
  sudo timedatectl set-ntp true
  sudo timedatectl set-ntp yes
  sudo timedatectl set-ntp 1
  #echo -e "\n\t${menu}${green}${blink}Enabling time sync.... ${normal}${menu}${normal}\n "
             sleep 3
			 echo -e "\t        ${menu1}Refresh this menu with enter few times    ${normal}\n"
			 echo -e "\t        ${menu1}to check sync status                      ${normal}\n"
			 counter3_
  export REBOOTBAN="${fgred}              Please reboot if needed${normal}"
  time_banner_
  clear && echo && clear
  time_banner_
change_system_time_
time_banner_

elif [ "$UBUNTU" == 1 ];
    then
	time_banner_
	# echo -e "\n${menu}        ${menu1}------------${bgwhite}${menu}Zone Configuration${menu}${menu1}------------${normal}"
    title_search_time_zone_
    logo_findme_
	time_banner_
	show_server_time_
	sudo apt-get install ntp -y >&- 2>&-
	sudo systemctl restart ntp
	sudo timedatectl set-ntp true
	sudo timedatectl set-ntp yes
	sudo timedatectl set-ntp 1
	sudo systemctl restart systemd-timedated
	#echo -e "\n\t${menu}${green}${blink}Enabling time sync.... ${normal}${menu}${normal}\n "
             sleep 3
			 echo -e "\t        ${menu1}Refresh this menu with enter few times    ${normal}\n"
			 echo -e "\t        ${menu1}to check sync status                      ${normal}\n"
			 counter_
  export REBOOTBAN="${fgred}              Please reboot if needed${normal}"
	time_banner_
	clear && echo && clear
	time_banner_
	change_system_time_
	time_banner_
	fi
	time_banner_
change_system_time_
}

function uninstall_disable_ntp_ () {
time_banner_
if [ "$CENTOS" == 1 ];
  then
 time_banner_
	# echo -e "\n${menu}        ${menu1}------------${bgwhite}${menu}Zone Configuration${menu}${menu1}------------${normal}"
    title_search_time_zone_
    logo_findme_
	time_banner_
	show_server_time_
  sudo yum remove ntp -y >&- 2>&-
  #sudo systemctl restart ntpd
  sudo timedatectl set-ntp false
  sudo timedatectl set-ntp no
  sudo timedatectl set-ntp 0
  sudo systemctl restart systemd-timedated
  #echo -e "\n\t${menu}${green}${blink}Enabling time sync.... ${normal}${menu}${normal}\n "
             sleep 3
			 echo -e "\t        ${menu1}Refresh this menu with enter few times    ${normal}\n"
			 echo -e "\t        ${menu1}to check sync status                      ${normal}\n"
			 counter3_
  export REBOOTBAN="${fgred}              Please reboot if needed${normal}"
  time_banner_
  clear && echo && clear
  time_banner_
change_system_time_
time_banner_

elif [ "$UBUNTU" == 1 ];
    then
	time_banner_
	# echo -e "\n${menu}        ${menu1}------------${bgwhite}${menu}Zone Configuration${menu}${menu1}------------${normal}"
    title_search_time_zone_
    logo_findme_
	time_banner_
	show_server_time_
	sudo apt-get remove ntp -y
	sudo timedatectl set-ntp false
    sudo timedatectl set-ntp no
    sudo timedatectl set-ntp 0
    sudo systemctl restart systemd-timedated
	
	#echo -e "\n\t${menu}${green}${blink}Enabling time sync.... ${normal}${menu}${normal}\n "
             sleep 3
			 echo -e "\t        ${menu1}Refresh this menu with enter few times    ${normal}\n"
			 echo -e "\t        ${menu1}to check sync status                      ${normal}\n"
			 counter_
  export REBOOTBAN="${fgred}              Please reboot if needed${normal}"
	time_banner_
	clear && echo && clear
	time_banner_
	change_system_time_
	time_banner_
	fi
	time_banner_
change_system_time_
}

function chk_ntp_ () {
#Check if system is syncronithed

timedatectl status | grep -o -P '(?<=(synchronized: )).*(?=$)'

#Daylight Saving Time–DST–Summer Time  
#Last DST
DSTLAST=`timedatectl status | grep -A 1 "Last DST change:" > $TIMETMPLOG1 && sed '1d' $TIMETMPLOG1`
DSTEND=`cat $TIMETMPLOG1`
echo -e "$DSTEND" 

#DST END
DSTEND=`timedatectl status | grep -A 1 "Next DST change" > $TIMETMPLOG && sed '1d' $TIMETMPLOG `
echo -e "$DSTEND" 

RTC = Real Time Clock
UTC = Universal Time Coordinated

}

function show_server_time_ () {
time_banner_
  if [ "$CENTOS" == 1 ];
  then
 time_banner_
  change_current_server_time_centos_
 
elif [ "$UBUNTU" == 1 ];
    then
	time_banner_
	change_current_server_time_ubuntu_
	fi
	time_banner_
}

function get_time_zone_wdate_ () {
search=$1
zoneinfo=/usr/share/zoneinfo/posix/
format='%a %F %T'
find -L $zoneinfo -type f \
    | grep -i "$search" \
    | while read z
      do
          d=$(TZ=$z date +"$format")
          printf "\t${menu1}%-34s %23s${normal}\n" ${z#$zoneinfo} "$d"
      done
}

function change_time_HH_MM_SS_ () {
local SYNCCHK1=`timedatectl status | grep -o -P '(?<=(synchronized: )).*(?=$)' | sed  's/ //g' | wc -m`
if [ "$SYNCCHK1" == 4 ];
then
clear && echo && clear
echo -e "\n\n\n\n\n\n\n\n\t        ${menu}You cannot change Time\n\t        if Time sync is enabled [${green}ON${menu}]${normal}"
echo -e "\t        ${menu}First of all disable time sync                     ${normal}\n"
logo_banner_
counter3_
change_system_time_
else
 clear && echo && clear
	echo -e "\t${menu}${menu1}------------------------------------------------------------${normal}"
	echo -e "\t${menu}${menu1}                         ${bgwhite}${menu}Change Time${menu}${menu1}                        ${normal}"
	echo -e "\t${menu}${menu1}                                                            ${normal}"
	echo -e "\t${menu}${menu1}                      ${black}${blink}====>${normal}${menu}${menu1}FindMe${menu1}${black}${blink}<====${normal}${menu1}                      ${normal}"
	echo -e "\t${menu}${menu1}------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
    echo -e "   "
show_server_time_
echo -e ""
echo -e "\t        ${menu1}Example: HH=15 MM=35 SS=03 result 15:35:03${normal}"
 local C1="$(printf "\n\t        ${menu}Enter ${under}Hour${normal} ${green}HH${menu} like [15] & press [Enter]: ${normal}\n")"
 read -e -p  "$C1" THH
 if [ "$THH" == "q" ] ; then
change_system_time_
fi
 local C2="$(printf "\n\t        ${menu}Enter ${under}Minuts${normal} ${green}MM${menu} like [35] & press [Enter]: ${normal}\n")"
 read -e -p  "$C2" TMM
 local C3="$(printf "\n\t        ${menu}Enter ${under}Seconds${normal} ${green}SS${menu} like [03] & press [Enter]: ${normal}\n")"
 read -e -p  "$C3" TSS
 timedatectl set-time $THH:$TMM:$TSS
 local CHKTHS=`date | awk '{print $4 }'`
 echo -e "\n\t        All done time successfully changed to $CHKTHS"
  counter3_
clear && echo && clear
change_system_time_
fi
}

function change_time_YYYY_MM_DD_ () {
local SYNCCHK1=`timedatectl status | grep -o -P '(?<=(synchronized: )).*(?=$)' | sed  's/ //g' | wc -m`
if [ "$SYNCCHK1" == 4 ];
then
clear && echo && clear
echo -e "\n\n\n\n\n\n\n\n\t        ${menu}You cannot change Date\n\t        if Time sync is enabled [${green}ON${menu}]${normal}"
echo -e "\t        ${menu}First of all disable time sync                     ${normal}\n"
logo_banner_
counter3_
change_system_time_
else


 clear && echo && clear
	echo -e "\t${menu}${menu1}------------------------------------------------------------${normal}"
	echo -e "\t${menu}${menu1}                         ${bgwhite}${menu}Change Date${menu}${menu1}                        ${normal}"
	echo -e "\t${menu}${menu1}                                                            ${normal}"
	echo -e "\t${menu}${menu1}                      ${black}${blink}====>${normal}${menu}${menu1}FindMe${menu1}${black}${blink}<====${normal}${menu1}                      ${normal}"
	echo -e "\t${menu}${menu1}------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"

show_server_time_

echo -e ""
echo -e "\t        ${menu1}Example: YYYY=2020 MM=05 DD=24 result 15:35:03${normal}"
 local C1="$(printf "\n\t        ${menu}Enter ${under}Year${normal} ${green}YYYY${menu} like [2020] & press [Enter]: ${normal}\n")"
 read -e -p  "$C1" DYYYY
 if [ "$DYYYY" == "q" ] ; then
change_system_time_
fi
 local C2="$(printf "\n\t        ${menu}Enter ${under}Month${normal} ${green}MM${menu} like [05] & press [Enter]: ${normal}\n")"
 read -e -p  "$C2" DMM
 local C3="$(printf "\n\t        ${menu}Enter ${under}Day${normal} ${green}DD${menu} like [24] & press [Enter]: ${normal}\n")"
 read -e -p  "$C3" DDD

 timedatectl set-time $DYYYY-$DMM-$DDD
 local CHKTHS=`date | awk '{print $4 }'`
 echo -e "\n\t        All done Date successfully changed"
  counter3_
#pause_witout_exit_
change_system_time_
#timedatectl set-time HH:MM:SS
fi
}

function title_search_time_zone_ () {
 clear && echo && clear
	echo -e "\t${menu}${menu1}------------------------------------------------------------${normal}"
	echo -e "\t${menu}${menu1}                     ${bgwhite}${menu}Zone Configuration${menu}${menu1}                     ${normal}"
	echo -e "\t${menu}${menu1}                                                            ${normal}"
	echo -e "\t${menu}${menu1}                      ${black}${blink}====>${normal}${menu}${menu1}FindMe${menu1}${black}${blink}<====${normal}${menu1}                      ${normal}"
	echo -e "\t${menu}${menu1}------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
    echo -e "                                 "
}

function timzone_choice_ () {

echo
local P1OPT1=`echo -e "\${number}1. ${menu}Continue to change timezone ${normal}\n"`
local P1OPT2=`echo -e "\${number}2. ${menu}Search again ${normal}"` 
local P1OPT3=`echo -e "\${number}3. ${menu}Exit${normal}"` 
 

declare -a menu0_main=($P1OPT1 $P1OPT2 $P1OPT3) 
 counter=0 
 function draw_menu0_ () { 
 for i in "${menu0_main[@]}"; 
 do if [[ ${menu0_main[$counter]} == $i ]]; 
 then tput setaf 2; 
 echo -e "          ===>${menu1}${green}$i${normal}"; tput setaf 4
        else
          echo -e "              $i";  
        fi
		
    done
	}

function clear_menu0_()  {
    for i in "${menu0_main[@]}"; do 
	tput cuu1 setaf 0;
	done
	tput ed setaf 0
}

# Draw initial Menu
function select_from_list_ () {
draw_menu0_

while read -sn 1 key; 

do # 1 char (not delimiter), silent

    # Check for enter/space
    if [[ "$key" == "" ]]; 
	then
	
#run comand on selected item
if [ "$counter" == 0 ]; 

  then
    echo
     printf "\t        ${menu}Type timezone from search list ${normal}"
	 local C4="$(printf "\n\t        ${bggrey}${black}${blink}===>${normal}${menu}: ${normal}")"
       read -e -p  "$C4" timzonesearch
	    if [ -z "$timzonesearch" ] || [ "$timzonesearch" == "" ];
		then
		time_banner_
        clear && echo && clear
	    search_time_zone_
		fi
        timedatectl set-timezone $timzonesearch
          clear && echo && clear

time_banner_
show_server_time_
echo -e "\n\t${menu}                   ${under}       All done       ${normal}\n"
echo		  
counter3_ 
clear && echo && clear
time_banner_
clear && echo && clear
change_system_time_
elif [ "$counter" == 1 ];
then
time_banner_
clear && echo && clear
search_time_zone_
elif [ "$counter" == 2 ] ;
then

time_banner_
clear && echo && clear
change_system_time_
elif [ "$choisetime3" == "" ] ;
then

search_time_zone_
else
clear && echo && clear
change_system_time_
fi


pause_witout_exit_						 
clear && echo && clear
	custom_permission_
 start_
	fi
    # catch multi-char special key sequences 
	 
    read -sn2 -t 0.0005 k1; read -sN1 -t 0.0009 k2; read -sn2 -t 0.0005 k3
    key+=${k1}${k2}${k3}

    case "$key" in
	     #1) apply_permissions_ ;;
		 #2) custom_permission_;;
		# 3) start_ ;;
		 # 4) get_777_folder_ ;;
		 # 5) start_ ;;
		 # 6) ;;
		  $'\e') main_menu0_ ;;
		  #left
		$'\e[D'|$'\e0D')   start_ ;;
        # countersor up, left: previous item
        ""|i|j|$'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
		
        # countersor down, right: next item
        ""|k|l|$'\e[B'|$'\e0B'|$'\e[C'|$'\e0C') ((counter < ${#menu0_main[@]}-1)) && ((counter++)) ;;
		
        # home: first item
       ""|$'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        ""|$'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main[@]}-1));;
		
         # q, carriage return: quit
        #x|q|''|$'\e') color_ && exit_ ;;
		x|q) start_ ;;
    esac
    # Redraw menu
	
    clear_menu0_
    draw_menu0_
done

}
select_from_list_
}

function search_time_zone_ () {
clear && echo && clear
time_banner_
	# echo -e "\n${menu}        ${menu1}------------${bgwhite}${menu}Zone Configuration${menu}${menu1}------------${normal}"
    title_search_time_zone_
    logo_findme_
	time_banner_
	show_server_time_	
	echo -e "\n\t        ${menu1}${menu}How to find your timezone?                ${normal}"
	echo -e "\t        ${menu1}For ${under}Amsterdam${normal}${menu1} type [ams] or [amster]      ${normal}"
	echo -e "\t        ${menu1}For ${under}TelAviv${normal}${menu1} type [tel] or [aviv] or [Tel] ${normal}"
	echo -e "\t        ${menu1}For ${under}Canada${normal}${menu1} type [Can] or [can]            ${normal}"
	echo -e "\t        ${menu1}For ${under}whole${normal}${menu1} list press [enter]              ${normal}\n"
	local C2="$(printf "\t        ${menu}Google it: ${normal}\n")"
	read -e -p  "$C2" choisetime1
if [ "$choisetime1" == "x" ] || [ "$choisetime1" == "q" ];
      then
         change_system_time_
 fi
	echo
	 title_search_time_zone_
 	time_banner_
	show_server_time_
	echo
    get_time_zone_wdate_ $choisetime1
    timzone_choice_



unset C3
unset C2
unset C1

while true
do
if [ "$choisetime3" == 1 ];
  then
    echo
     local C4="$(printf "\t        ${menu}Type timezone from search list: ${normal}\n")"
       read -e -p  "$C4" timzonesearch
	    if [ -z "$timzonesearch" ] || [ "$timzonesearch" == "" ];
		then
		time_banner_
        clear && echo && clear
	    search_time_zone_
		fi
        timedatectl set-timezone $timzonesearch
          clear && echo && clear
echo -e "\n\t${menu}          All done${normal}\n"
time_banner_
show_server_time_
echo		  
counter3_ 
clear && echo && clear
time_banner_
clear && echo && clear
change_system_time_
elif [ "$choisetime3" == 2 ];
then
time_banner_
clear && echo && clear
search_time_zone_
elif [ "$choisetime3" == 3 ] || [ "$choisetime3" == "q" ] ;
then

time_banner_
clear && echo && clear
change_system_time_
elif [ "$choisetime3" == "" ] ;
then

search_time_zone_
else
clear && echo && clear
change_system_time_
fi
done
clear && echo && clear
change_system_time_
 }
 
 function start_time_search_ (){
 logo_clock_
 sleep 1
 change_system_time_
 }
 
function time_banner_ () {
SYNCCHK=`timedatectl status | grep -o -P '(?<=(synchronized: )).*(?=$)' | sed  's/ //g' | wc -m`
if [ "$SYNCCHK" == "4" ];
then
TIMESYNCCHKBAN="${green}ON${normal}"
elif [ "$SYNCCHK" == "3" ];
then
TIMESYNCCHKBAN="${fgred}OFF${normal}"
fi


}




#FIND Pattern /folder & file / find and replace
function main_search_replace_ () {
tput reset
clear && echo && clear
greetgusr_
check_editor_pref_
clear
 IFS=$'\n'       
  set -f 
custom_permission_title_
logo_findme_
local FOPT1=`echo -e "${number}1. ${fgred}Replace${menu} pattern in whole file or whole DataBase${normal}\n\n"`
local FOPT2=`echo -e "${number}2. ${green}Find${menu} any pattern in all files and all folders${normal}"` 
local FOPT3=`echo -e "${number}3. ${green}Find${menu} any file or any folder${normal}"` 
local FOPT4=`echo -e "${number}4. ${green}Find${menu} system large files${normal}"` 
# local OPT5=`echo -e "${number}4. ${menu}Time Managment ${normal}"` 
# local OPT6=`echo -e "${number}5. ${menu}System Stat Managment${normal}"` 
local FEXIT=`echo -e "${number}5. ${menu}Back to Main Menu${normal}"` 
declare -a menu0_main=($FOPT1 $FOPT2 $FOPT3 $FOPT4 $FEXIT) 
 counter=0 
 function draw_menu0_ () { 
 for i in "${menu0_main[@]}"; 
 do if [[ ${menu0_main[$counter]} == $i ]]; 
 then tput setaf 2; 
 echo -e "\t===>${menu1}${green}$i${normal}"; tput setaf 4
        else
          echo -e "\t    $i";  
        fi
		
    done
	}

function clear_menu0_()  {
    for i in "${menu0_main[@]}"; do 
	tput cuu1 setaf 0;
	done
	tput ed setaf 0
}

# Draw initial Menu
function select_from_list_ () {
draw_menu0_

while read -sn 1 key; 

do # 1 char (not delimiter), silent

    # Check for enter/space
    if [[ "$key" == "" ]]; 
	then
	
#run comand on selected item
if [ "$counter" == 0 ]; 
then
find_and_replace_
elif [ "$counter" == 1 ]; #Find pattern
then
find_pattern_
elif [ "$counter" == 2 ]; 
then 
find_file_folder_
clear
elif [ "$counter" == 3 ]; 
then 
clear
find_large_files_ 
clear
elif [ "$counter" == 4 ]; 
then 
clear
start_ 
clear
fi

	fi
    # catch multi-char special key sequences 
	 
    read -sn2 -t 0.0005 k1; read -sN1 -t 0.0009 k2; read -sn2 -t 0.0005 k3
    key+=${k1}${k2}${k3}

  
    case "$key" in
	     1) find_and_replace_ ;;
		 2) find_pattern_;;
		 3) find_file_folder_ ;;
		 4) find_large_files_ ;;
		 5) main_menu0_ ;;
		 # 6) ;;
		 $'\e') main_menu0_ ;;
        # countersor up, left: previous item
        ""|i|j|$'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
		
        # countersor down, right: next item
        ""|k|l|$'\e[B'|$'\e0B'|$'\e[C'|$'\e0C') ((counter < ${#menu0_main[@]}-1)) && ((counter++)) ;;
		
        # home: first item
       ""|$'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        ""|$'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main[@]}-1));;
		$'\e[D'|$'\e0D')   start_ ;;
         # q, carriage return: quit
        #x|q|''|$'\e') color_ && exit_ ;;
		x|q) start_ ;;
    esac
    # Redraw menu
	
    clear_menu0_
    draw_menu0_
done

}
select_from_list_

}

function go_to_file_or_folder_ () {
#unset_banner_
GOTOFOLDER=1
echo
unset copypast
history -r script_history
history -s "$copypast"

#Find Pattern
if [ "$finds" == 0 ];
  then
     printf "\n\t${menu1}${menu}Press [${number}Enter${menu}]${menu} to continue search or [${number}q${menu}] to main menu      ${normal}\n"
	 echo -e "\t${menu1}${menu}Copy pattern & past or type + use TAB to edit             ${normal}"
     local C14="$(echo -e "\t===> :" )"
	 read -e -p "$C14" copypast 
 if [ "$copypast" == 0 ] ||  [ "$copypast" == "O" ] ;
  then 
     find_and_replace_
  elif [ "$copypast" == "" ] ;
  then 
    find_pattern_
elif [ "$copypast" == "x" ] || [ "$copypast" == "q" ]; 
then
menu0_
fi
fi
  
  
if [ "$finds" == 1 ];
  then
     printf "\n\t${menu1}${menu}Press [${number}Enter${menu}]${menu} to continue search or [${number}q${menu}] to main menu      ${normal}\n"
	 echo -e "\t${menu1}${menu}Copy pattern & past or type + use TAB to edit             ${normal}"
     local C15="$(echo -e "\t===> :" )"
   read -e -p "$C15 " copypast
if [ "$copypast" == "" ] ;
  then 
    find_pattern_
elif [ "$copypast" == 0 ] ||  [ "$copypast" == "O" ] ;
  then 
     find_and_replace_
	elif [ "$copypast" == "x" ] || [ "$copypast" == "q" ]; 
then
menu0_
fi
fi
  
#Find Folder or files  
if [ "$finds" == 2 ];
 then
     printf "\n\t${menu1}${menu}Press [${number}Enter${menu}]${menu} to continue search or [${number}q${menu}] to main menu      ${normal}\n"
	 echo -e "\t${menu1}${menu}Copy pattern & past or type + use TAB to edit             ${normal}"
     local C11="$(echo -e "\t===> :" )"
	 read -e -p "$C11" copypast 
if [ "$copypast" == "" ] ;
  then 
   find_file_folder_
   elif [ "$copypast" == 0 ] ||  [ "$copypast" == "O" ] ;
  then 
     find_and_replace_
   elif [ "$copypast" == "q" ]; 
then
menu0_
fi
fi


export COPYPASTE=$copypast
if  [ -f "$copypast" ] ;
  then
    echo "file"
     clear
       echo -e "${menu}Boss,\nThis is a file ${green}${menu0_main2[$counter]}${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n"
         cat "$copypast" | more
           local ENT=`echo -e "${menu}Press [${number}Enter${menu}] to continue [${number}e${menu}] to edit: ${normal}\n"`
             read -s -n1 -p "$ENT " itemchoice
			 history -s "$itemchoice"
if [ "$itemchoice" == "" ]; 
  then
  menu0_
 elif [ "$itemchoice" == "e" ]; 
   then
     $EDITOR "$copypast"
	 unset_banner_
	 export  BANNER=`echo -e "Dear "$whoami", \nYou just changed file ${fgred}$copypast${normal}"`
    menu0_
else
echo -e "\n Sorry but this is a folder\n Unfortunately for now my dad is not learn me to work with folders from this menu\n Please follow the blinking banner ${blink}${green}^${normal} to navigate to wished folder "
sleep 3

  menu0_
fi
else
cyber_title_good_folder_search_
echo -e "\n Dear $whoami,\n Sorry for this inconvenience but this is a folder.\n Unfortunately for now my dad is not learn me to work with folders from this menu\n Please follow the blinking banner ${blink}${green}^${normal} to navigate to wished folder\n\n "


history -w script_history

pause_witout_exit_
menu0_
fi

}

function border_find_and_replace_bckp_ () {
 PATHDIR=`dirname $path`
 BCKPCHK=`ls $PATHDIR | grep FindMe`
longstr=`(echo "$BCKPCHK" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "+$edge-------------+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "            |${normal}"
 else
  echo -e "            |${normal}"
 fi
done < <(printf '%s\n' "$BCKPCHK")
echo -e "+$edge-------------+${normal}"
}

function border_find_and_replace_before_ () {
PATTCHK=`cat $path | grep -A 2 -B 2  "$oldpattern"`
longstr=`(echo "$PATTCHK" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo
echo
echo -e "\t+$edge-------------+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t|${normal} $line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "            |${normal}"
 else
  echo -e "            |${normal}"
 fi
done < <(printf '%s\n' "$PATTCHK")
echo -e "\t+$edge-------------+${normal}"
}

function border_find_and_replace_ () {
PATT=`cat $path | grep $newpattern`
longstr=`(echo "$PATT" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "+$edge-------------+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "            |${normal}"
 else
  echo -e "            |${normal}"
 fi
done < <(printf '%s\n' "$PATT")
echo -e "+$edge-------------+${normal}"
}

function find_and_replace_ () {

PATHDIR=`dirname $path`
    unset BANNER
	unset FIND
	#unset GREPBANN #find pattern
	unset COUNTFIND
	export finds=0
   
  #Step1 
   custom_permission_title_
   logo_finds_
   echo
   echo
    echo -e "\t "
    echo
	echo -e "\t\t\tWhat to raplace ? "
	echo -e "\t\t  It can be ${under}database.sql file${normal} :) "
	echo -e "\n\t\t         And dont worry. \n\t\tI will backup file before in same folder"
   printf "\n\t${menu}Enter ${normal}Path${menu} to file like [${normal}/etc/httpd/conf/${green}httpd.conf${menu}] ${normal}\n"
		  local C3="$(printf "\t${menu}===> : ${normal}")"
             read -e -p "$C3" path
                 if [ "$path" == "q" ] ; then
                     main_search_replace_
					   fi
					    if [ "$path" == "" ] ; then
                     find_and_replace_
					   fi
					     #help
       if [ "$path" == "h" ] ; 
        then
         custom_permission_title_
		   echo -e "\n\n\n\n\t${under}The find and replace function is case sensitive!!!${normal}\n\n\n"
		   echo -e "\n\tThis function cat replace spesific pattern in ${green}file${normal} or ${fgred}database${normal} file like mysql.sql"
		   echo -e "\n\t${under}The procedure have 4 steps:${normal}"
		   echo -e "\tStep 1: Provide path to file like [/etc/file.php] or [/home/admin/database.sql] ${fgred}without${normal} [spaces] or [/]${normal} in the end of file "
		   echo -e "\tStep 2: Provide [${green}Old${normal}] pattern you wish to replace"
		   echo -e "\tStep 3: Provide [${green}New${normal}] pattern"
		   echo -e "\tStep 4: Confirm and [apply] your changes"
           
	       
           
		   pause_witout_exit_
		   clear && echo && clear
		   logo_big_
		   sleep 1
		   find_and_replace_
            fi

   
   
#Step2  
    printf "\n\n\t${menu}Enter ${normal}Old ${menu}pattern like [${normal}https://muzi.com${menu}] or [${normal}Port 22${menu}] ${normal}\n"
    local C1="$(printf "\t${menu}===> : ${normal}")"
      read -e -p "$C1" oldpattern
	  
#Exit
        if [ "$oldpattern" == "q" ] ; then
          main_search_replace_
            elif [ "$oldpattern" == "" ]; then
              find_and_replace_
                fi

#help
     

#Step3   
  printf "\n\t${menu}Enter ${normal}New${menu} pattern like [${normal}https://muzipuzi.com${menu}] or [${normal}Port 33${menu}] ${normal}\n"
   local C2="$(printf "\t${menu}===> : ${normal}")"
     read -e -p "$C2" newpattern
      if [ "$newpattern" == "q" ] ; then
       main_search_replace_
        fi

		
         

PATTCHK=`cat $path | grep -A 2 -B 2  "$oldpattern"`
custom_permission_title_
echo -e "\n\t${menu}Current configuration of file ${green}$path ${normal}\n"
logo_banner_


border_find_and_replace_before_ $PATTCHK | grepe2 $oldpattern
echo -e "\n\n\t${green}${under}Old${menu} pattern:           ${normal}${under}$oldpattern${normal}\n" 
echo -e "\t${menu}Will be changed to\n" 
echo -e "\t${green}${under}New${menu} pattern:           ${normal}${under}$newpattern${normal}\n"

local C1="$(printf "\t${menu}Please Confirm (y/n) or ${number}[ Enter ] ${menu}to Y ${menu}:${normal}\n")"
echo 
read -sn 1 -p "$C1 " confirmn
if [ "$confirm" == "y" ]  || [ "$confirm" == "" ]  ; 
 then
  echo
   local CHK=`ls $path | wc -l `
if [ "$CHK" != 0 ];
 then
    custom_permission_title_
     printf "\n\t         ${blink}${number} Backuping ${normal}${number}$oldpattern${normal} ${normal}\n"
      #echo -e "\n\n\n\n\n\n\n\n\t${green}            Hi there, Please enter valid name${normal}"
							    logo_banner_
								 counter3_
	  echo  
	    #backup old file
          cp $path $path:"$D"-"$T"-FindMe
		  #Replace
            sed -i -e "s+$oldpattern+$newpattern+g" "$path"
 else
 custom_permission_title_
 echo
   logo_p_not_good_ 
    echo -e "\n\t${menu} Old pattern: ${normal}$oldpattern\n\t${menu} New pattern:${normal} $newpattern\n\t${menu} Path:       ${normal} $path\n" 
     pause_find_
       find_and_replace_
fi
 PATT=`cat $path | grep -o "$newpattern"`
 
 
if [ "$PATT" == "$newpattern" ];
 then
 PATHDIR=`dirname $path`
 BCKPCHK=`ls $PATHDIR | grep FindMe`
  custom_permission_title_
   echo -e "\n${menu}All done you successfully chenged:"
   echo -e "\n\n\t${green}${under}Old${menu} pattern:           ${normal}${under}$oldpattern${normal}\n" 
   echo -e "\t${menu}Will be changed to\n" 
   echo -e "\t${green}${under}New${menu} pattern:           ${normal}${under}$newpattern${normal}\n"

   logo_banner_
    border_find_and_replace_ $PATT
	
	echo -e "\n I did check and found backup files of $path \n"
	border_find_and_replace_bckp_ $BCKPCHK
	
	go_to_file_or_folder_ 
menu0_
else
  custom_permission_title_
  echo
  logo_p_not_good_ 
    echo -e "\n\t${menu}   Old pattern: ${normal}$oldpattern\n\t${menu}   New pattern:${normal} $newpattern\n\t${menu}   Path:       ${normal} $path\n" 
     pause_find_
       find_and_replace_
fi
pause_witout_exit_
menu0_
fi
}

function border_find_pattern_ () {
GREP=`grep -rnw --exclude-dir={proc,sys,boot,}  "/${dir%/}" -i -e "$pattern" | grep -v "Binary file"`
longstr=`(echo "$GREP" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo -e "\t+$edge-------------+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t|${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "            |${normal}"
 else
  echo -e "            |${normal}"
 fi
done < <(printf '%s\n' "$GREP")
echo -e "\t+$edge-------------+${normal}"
}

function find_pattern_ () {
unset_banner_
export finds=1
custom_permission_title_
   logo_finds_
   printf "\n\n\t   ${menu}The search is not case sensitive [${normal}h${menu}] for help${normal}"
   printf "\n\t   ${menu}Enter Pattern for example [${normal}Port 22${menu}] or [${normal}port 22${menu}] ${normal}\n"
   local C1="$(printf "\t   ${menu}===> : ${normal}")"

#Ask and explain
read -e -p "$C1" pattern
 if [ "$pattern" == "" ] ;
                    then
                   find_pattern_
                              fi

if [ "$pattern" == "q" ] ; then
main_search_replace_
elif [ "$pattern" == "b" ] ; then
find_pattern_
fi


if [ "$pattern" == "h" ] ; 
   then
    custom_permission_title_
      logo_finds_
         echo -e "\n\tThe search is case sensitive\n"
            echo -e "\n\tTo find pattern in all files with spaces like [${green}port 22${normal}] [${green}Port 22${normal}] you can type:\n\t[${green}Port *${normal}] or [${green}P* 22${normal}] or [${green}p* 22${normal}]\n"
		      pause_witout_exit_
		        clear && echo && clear
		           logo_big_
		              sleep 1
		                 
 
fi






 printf "\n\t   ${menu}Enter path for example [${normal}/etc${menu}] or [${normal}etc${menu}] or [${normal}/etc/${menu}]${normal}"
   local C2="$(printf "\n\t   ${menu}===> : ${normal}")"
      read -e -p "$C2" dir
	   # if [ -d "$dir" ] ;
                    # then
				      # echo dir
				        # else
                          # clear && echo && clear
                              # echo -e "\n\n\n\n\n\n\n\n\t${green}            Hi there, Please enter valid name${normal}"
							    # logo_banner_
								# counter3_
                                 # find_pattern_
                                  # fi
	  

#main query
if [ -n "$pattern" ] || [ -n "$dir" ]; then
   echo
     COUNTGREP=`grep  -rnw --exclude-dir={proc,sys,boot,}  "/${dir%/}" -i -e "$pattern" | grep -v "Binary file" | wc -l`
       GREP=`grep -rnw --exclude-dir={proc,sys,boot,}  "/${dir%/}" -i -e "$pattern" | grep -v "Binary file"`
         grep  --color=always -rnw --exclude-dir={proc,sys,boot,}  "/${dir%/}" -e "$pattern" | grep -v "Binary file" | tee >$CATTMP1


n=10 
if [ "$COUNTGREP" == 0 ];
  then
     custom_permission_title_
	 
	 echo -e "\n\n\t                    Ups nothing found "
         logo_banner_
             echo -e "\n\t              ${menu} Pattern: ${normal}$pattern\n\t${menu}               Dir:${normal}     $dir${normal}\n" 
                 go_to_file_or_folder_
                    menu0_
fi



if [ "$COUNTGREP" -lt "$n" ];
   then
      clear		               
	      echo -e "\n\t           ${green}${blink}Proccesing ........... ${menu}${normal}\n\t           Its can take time.${normal}\n\t           Do not touch keyboard!"
             logo_banner_
		        
                   
	             	   x=3
	 	if [ "$COUNTGREP" -lt "$x" ];
		    then
			   local BAN="\n\t                 ${menu}I found only ${fgred}$COUNTGREP${menu} matches:${normal}"
		    else
			   local BAN="\n\t                 ${menu}I found ${fgred}$COUNTGREP${menu} matches ${normal}"
	    fi
           custom_permission_title_
			 echo -e "\n\t  "$BAN""
		        logo_banner_
		           border_find_pattern_ $GREP
                      GREPBANN=$GREP
		                 go_to_file_or_folder_
				    
else
    clear		               
	      echo -e "\n\t           ${green}${blink}Proccesing ........... ${menu}${normal}\n\t           Its can take time.${normal}\n\t           Do not touch keyboard!"
             logo_banner_
		        
        custom_permission_title_
   
          GREPBANN=`echo -e "${menu}I found ${fgred}$COUNTGREP${menu} matches to view all matches press [ ${number}v ${menu}]${normal}"`
		  
		    printf "\n\n\t  ${menu}I found ${fgred}$COUNTGREP${menu} matches to view all matches press [ ${number}v ${menu}]${normal}\n"
            local C3="$(printf "\n\t   ${menu}===> :${normal}")"
			logo_banner_
               read -s -n1 -p "$C3" v
if [ "$v" == v ]; 
    then
	clear && echo && clear
       custom_permission_title_
	   clear && echo && clear
         echo -e "\n\n\t       ${menu} That what i bring for you. Enjoy...${normal}"
		    logo_banner_   
		     counter3_
               cat -b $CATTMP1 | more 
			   go_to_file_or_folder_
else
menu0_
fi
fi


echo
go_to_file_or_folder_
else
echo -e "\nThe Pattern or Folder cannot be empty:"
sleep 1
find_pattern_
break
fi
menu0_
}

function border_find_file_folder_ () {
FIND=`find / -name "$findme" ;`
longstr=`(echo "$FIND" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
echo
echo
echo -e "\t  +$edge-------------+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n "\t  |${normal} ${green}$line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "            |${normal}"
 else
  echo -e "            |${normal}"
 fi
done < <(printf '%s\n' "$FIND")
echo -e "\t  +$edge-------------+${normal}"
}

function find_file_folder_ () {
unset_banner_
export finds=2
 unset COUNTFIND
  local C3="$(printf "\t${menu}We found ${fgred}$COUNTFIND${menu} matches to view all matches press [ ${number}v ${menu}]${normal}")"
   clear && echo
   custom_permission_title_
   #logo_finds_
   logo_findme_
   #echo -e "\n\n\t${menu}         ${menu1}To exit press [${number}q${menu}] + [${number}Enter${menu}]              ${normal}\n\t         ${menu}${menu1}To help press [${number}h${menu}] + [${number}Enter${menu}]              ${normal}\n"
     local C1="$(printf "\n\t         Enter ${menu}file ${normal}or ${menu}folder ${normal}you are looking for\n\t         ===> : ${normal}")"
       read -e -p "$C1" findme
	   if [ "$findme" == "" ];
	   then
	   find_file_folder_
	   fi
#Exit on q	   
if [ "$findme" == "q" ] ; 
   then
          main_search_replace_
fi

#Help
if [ "$findme" == "h" ] ; 
   then
    custom_permission_title_
   logo_findme_
        echo -e "\n\tIf you are loking for file ${under}muzipuzi.conf${normal} just type [${green}muzi${normal}]. Just Google it		${normal}\n\n\n"
          echo -e "\n\tTo find hidden file [${green}.htaccess${normal}] you can type [${fgred}.*acce*${normal}] or [${fgred}*htac*${normal}]"
		  echo -e "\n\tTo find all hidden files on system you can type for exaple [${fgred}.*.*${normal}]\n"
		   echo -e "\tTo find file with space [${green}1 2 3.txt${normal}] you can type [${fgred}1 2 3.*${normal}] or [${fgred}1 2*${normal}] or [${fgred}* 3.*${normal}]${normal}\n"
		   pause_witout_exit_
		   clear && echo && clear
		   logo_big_
		   sleep 0.5
		   find_file_folder_
 
fi
      
	  clear
				               
							    echo -e "\n\t           ${green}${blink}Proccesing ........... ${menu}${normal}\n\t           Its can take time.${normal}\n\t           Do not touch keyboard!"
                                 logo_banner_
	  findme="*$findme*"
	  
	  CENTER="$(printf "${menu}Press [ ${number}Enter ${menu}] to continue ....${normal}")"
     FIND="$(find / -name "$findme")" 
	find / -name "$findme" | tee >$CATTMP1
   COUNTFIND="$(find / -name "$findme" | wc -l)"
  COUNTFIND1="$(find / -name "$findme" | wc -l)"

n=10
if [ "$COUNTFIND" == 0 ];
then
custom_permission_title_
   
echo -e "\n\n\t               Ups nothing found "
echo -e "\t${menu}             Your last search: ${normal}$findme${normal}" 
logo_banner_
go_to_file_or_folder_
#pause_find_
find_file_folder_
fi


if [ "$COUNTFIND" -lt "$n" ]; #If less then 7 show me here
  then
      
                             
				               
							    echo -e "\n\t           ${green}${blink}Proccesing ........... ${menu}${normal}\n\t           Its can take time.${normal}\n\t           Do not touch keyboard!"
                                 logo_banner_
		     custom_permission_title_
             
           echo -e "\n\t${menu}                   I found only ${fgred}$COUNTFIND${menu} matches:  ${normal}"
		   logo_banner_
          border_find_file_folder_ $FIND
		  GREPBANN=$FIND 
		  go_to_file_or_folder_ #for test
     # pause_find_
  break
#menu0_



else #If more then 7 print to file and ask to show file
  find / -name "$findme" | tee >$CATTMP1
   custom_permission_title_
   
    local C4="$(printf "\n\n\t         ${menu}I found ${fgred}$COUNTFIND1${menu} matches to view all matches press [ ${number}v ${menu}]${normal}\n\n")"
	unset GREPBANN
	   GREPBANN=`echo -e "${menu}I found ${fgred}$COUNTFIND1${menu} matches to view all matches press [ ${number}v ${menu}]${normal}"` 
       read -s -n1 -p "$C4" v
if [ "$v" == v ]; 
   then				   
         #echo -e "\n\t             That what i bring for you. Enjoy...${normal}"
		 echo
		  logo_banner_
		border_find_file_folder_ $FIND
	go_to_file_or_folder_
   find_file_folder_
fi
fi
find_file_folder_
#Find Pattern
}

function find_large_files_ () {
cyber_title_good_

 local C1="$(printf "\n\t${normal}Please enter path or folder:\n\n\t${menu}Example:\n\tLike [${normal}var${menu}] or [${normal}/var/www${menu}]\n\n\t${menu}Enter${menu} for whole disk: ${normal}")"
 read -e -p "$C1" findpath
cyber_title_good_
 local C1="$(printf "\n\t${menu}If you have mounted NFS store this process can take more then 20 min.\n\tPress [${number}1${menu}] + [${number}Enter${menu}] to skip NFS.\n\t${menu}Standart search press [${number}Enter${menu}]: ${normal}")"
 read -e -p "$C1" nfs
if [ "$nfs" == "1" ];
 then
 
 clear
custom_permission_title_
echo -e "\n\t           ${green}${blink}Proccesing ........... ${menu}${normal}\n\t           Its can take time.${normal}\n\t           Do not touch keyboard!"
  logo_banner_
 cyber_title_good_folder_search_
 echo -e "\n\n"
 echo -e "  ${menu}Size      Path${normal}"
 echo -e "  ----      ----"
 border_find_large_files_ | grepe2 total
	else 
	cyber_title_good_folder_search_
	echo -e "\n\n"
	 echo -e "  ${menu}Size      Path${normal}"
 echo -e "  ----      ----"
border_find_large_files_ | grepe2 total
fi
pause_witout_exit_
menu0_
} 
 
function border_find_large_files_ () {
rexy=`for i in G M K; do   du -ahxc --exclude={proc,sys,boot} /var | grep [0-9]$i  | sort -nr -k 1 ; done | head -n 29 | uniq -w 12 | awk '{ print $1, " ==>",  $2 }' `
tttt=`echo -e "$rexy"`
longstr=`(echo "$tttt" | awk '{if(length>x){x=length;y=$0}}END{print y}')`
longlen=${#longstr}

n=${#longstr}
edge=$(echo "$longstr" | sed 's/./-/g') 
#echo -e "\n\n\n\n" 
#echo -e "      ${menu1}Date        Time of last change     Permission      User         Group              Path${normal}"
echo -e " ${menu1}+$edge-------+${normal}"
while IFS= read -r line; do
 strlen=${#line}  
 echo -e -n " ${menu1}|${normal} $line${normal}"
 gap=$((longlen - strlen))
 if [ "$gap" > 0 ]; then
  for i in $(seq 1 $gap); do echo -n " "; done
  echo -e "      ${menu1}|${normal}"
 else
  echo -e "     ${menu1}|${normal}"
 fi
done < <(printf '%s\n' "$tttt"  )
echo -e " ${menu1}+$edge-------+${normal}"
}




#Explorer 

#Next Dir 0

function menu0_dir1_ () {
local selector=0
     export DIR1=`echo "/${menu0_main[$counter]}" | awk '{print $1}'`
     export CURDIR1=`ls $lsopt  --full-time "$DIR1" |  sed 's/domain //g' |  sed 's/domain //g' | awk '{print  $9, " | "  $6, " | " , $3, " | " $4, " | " $1, " | " }'  | grep -v total  | column -t`
     menu1_
	 } 
	 
function menu0_1_dir1_ () {  
local selector=0
echo 

	#export CURDIR2=`ls $lsopt "$DIR1/$itemchoice1" -C -1` #<-----------------------------
	export CURDIR1=`ls $lsopt  --full-time "$itemchoice1"  |  sed 's/domain //g' |  sed 's/domain //g' | awk '{print  $9, " | "  $6, " | " , $3, " | " $4, " | " $1, " | " }'  | grep -v total  | column -t`
	export DIR1=`echo "/$itemchoice1"`
	menu2_
	echo
}
	 
function menu0_title_ () {
#check_editor_pref_
 nano_banner_
 vim_banner_
 vi_banner_
IFS=$'\n' 
  set -f 
 CAT=$GREP
#CURDIR=`ls $lsopt $PATH1 -C -1`
CURDIR=`ls $lsopt  --full-time $PATH1 |  sed 's/domain //g' | awk '{print  $9, " | "  $6, " | " , $3, " | " $4, " | " $1, " | " }'  | grep -v total  | column -t`

clear
	printf "${menu}${menu1}------------------------------------------${normal}0${menu}${menu1}-------------------------------------${normal}\n"
	echo -e  "${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}][${number}0${menu}]${normal}\n${number}*.${menu}Raplace pattern in file or DB ${menu}  [${number}O${menu}]${normal}       ${number}*.${menu}Back to Main Menu ${menu}      [${number}esc${menu}]${normal}     "       
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$du"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "\t===> :${green}$PATH1${normal}"
	echo
	echo -e "\t    Name      Size    Changed    User    Group     Rights "
	echo -e "\t   ------    ------  ---------  ------  -------   --------"
	export CURLOCATION1=/
} 

function menu0_file_check_ () {
export DIR1=`echo "/${menu0_main[$counter]}" | awk '{print $1}'`
 if [ -f "$DIR1" ]  ;
then
echo "file"
clear
echo -e "${menu}Boss,\nThis is a file [${green}${menu0_main[$counter]}${normal}] ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n"
cat $DIR1 | more
#To change----
local ENT=`echo -e "\n\n${menu}Press [${number}Enter${menu}] to continue or [${number}e${menu}] to edit ....${normal}\n"`
read -s -n1 -p "$ENT " filechoice
if [ "$filechoice" == "" ]; then
menu0_
elif [ "$filechoice" == "e" ]; then
$EDITOR $DIR1
else
menu0_
fi
menu0_
#To change-----
fi
}

function menu0_ () {
check_editor_pref_
 local selector=0
 menu0_title_

 

declare -a menu0_main=("<--" $CURDIR)
counter=0
function draw_menu0_ () {
    local DMENU=0
	
     for i in "${menu0_main[@]}"; do
	  
    if [[ ${menu0_main[$counter]} == $i ]]; 
	then
            tput setaf 2; 
	   echo -e "\t===>${menu1}${green}$i${normal}"; tput sgr0
	   
    else
       echo -e "\t    ${normal}$i ${normal}"   ;
		
     fi
	 
      done

}
export localitemname=${menu0_main[$counter]}
function clear_menu0_()  
{
      for i in "${menu0_main[@]}"; 
	     do 
	      tput cuu1 setaf 0;
	    done
	 tput ed setaf 0
}

function select_from_list_ () {

local selector=0
    draw_menu0_
     while read -sn 1  key; 
    do 
	
 if [[ "$key" == "" ]] ; 
	then
	    #echo "Debug1 menu 0" && sleep 1
		#ls -L $DIR1 --color=auto --group-directories-first
        export DIR1=`echo "/${menu0_main[$counter]}/"  | awk '{print $1}'`
		 # echo "/$DIR1" && sleep 3
		# cd /$DIR1 && ls -lhaF
		 # sleep 6
menu0_file_check_
if [[ "$counter" == 0 ]];
   then
     menu0_
	 break;
fi
	menu0_dir1_
	break;
fi
    read -sn2 -t 0.0005 k1 2>/dev/null >&2; read -sN1 -t 0.0009 k2 2>/dev/null >&2; read -sn2 -t 0.0005 k3 2>/dev/null >&2
    key+=${k1}${k2}${k3}
    case "$key" in
        # countersor up, previous item
       $'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
		"\e[?1000;1006;1015h") menu1_ ;;
		# call next menu with <> keys
		#left
		$'\e[D'|$'\e0D')   if [[ "$counter" == 0 ]];
                                           then
                                           menu0_
                                           fi
                                            ;; #menu12_      ;; #left  go back to main menu0_
		#right 
	    $'\e[C'|$'\e0C')  if [[ "$counter" == 0 ]];
                                           then
										          # menu0_file_check_
                                            share_this_folder_         #menu0_
                                           fi
		                                   share_this_folder_    #  menu0_file_check_ 
					                           #  menu0_dir1_ 
										   ;; #right  go to menu1_
		0) custom_permission_ ;;							   
		L) disable-hiden_ && menu0_ ;;
		H) enable-hiden_ && menu0_ ;;
		# use delete key on keybord to delete selected item
		3|$'\e[3~') delete_  ;;
		v) cat_ ;;
        a) vi_ && menu0_ && menu0_	;;
		b) vim_ && menu0_	&& menu0_ ;;
		c) nano_ && menu0_ && menu0_ ;;		
		1|d) create_dir_  ;; 
		2|f) create_file_  ;;
		6|i) find_file_folder_ ;;  
		v) cat_ ;;
		m|M) unset_banner_ && menu0_ ;;
        a) vi_ && menu0_	;;
		b) vim_ && menu0_	;;
		c) nano_ && menu0_ ;;
		k|K) clone_ ;;	
		U|u) main_user_managment_samba_microsoft_ ;;
        O) find_and_replace_ ;;	
		j) find_large_files_ ;;	
		k|K) clone_ ;;		
		5|r) rename_ ;;	
		P) permission_ ;;	
		7|p) find_pattern_ ;;
		$'\e') main_menu0_ ;;
		e) edit_file_ ;;
        # countersor down, next item
        $'\e[B'|$'\e0B') ((counter < ${#menu0_main[@]}-1)) && ((counter++)) ;;
        # home: first item
        $'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        $'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main[@]}-1));;
         # q, carriage return: quit
        x|q|'') exit_ ;;
    esac
	
    # Redraw menu
      clear_menu0_
      draw_menu0_
    done

}
select_from_list_
local selector=0
}



#Next Dir 1
function menu1_dir2_ () {  
local selector=1
echo  
     export DIR2=`echo "/${menu0_main1[$counter]}"  | awk '{print $1}'`
     export CURDIR2=`ls $lsopt  --full-time "$DIR1/$DIR2" |  sed 's/domain //g' |  sed 's/domain //g' | awk '{print  $9, " | "  $6, " | " , $3, " | " $4, " | " $1, " | " }'  | grep -v total  | column -t`
	 
	menu2_
	echo
}

function menu1_1_dir2_ () {  
local selector=1
echo 

	#export CURDIR2=`ls $lsopt "$DIR1/$itemchoice1" -C -1` #<-----------------------------
	export CURDIR2=`ls $lsopt  --full-time "$DIR1/$itemchoice1"  |  sed 's/domain //g' |  sed 's/domain //g' | awk '{print  $9, " | "  $6, " | " , $3, " | " $4, " | " $1, " | " }'  | grep -v total  | column -t`
	export DIR2=`echo "/$itemchoice1"`
	menu2_
	echo
}
 
function menu1_title_ () {
 nano_banner_
 vim_banner_
 vi_banner_
    clear && echo && clear 
	printf "${menu}${menu1}---------------------------------------${normal}1${menu}${menu1}----------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}][${number}0${menu}]${normal}"     
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}$FIND${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "\t===> :${green} $DIR1/ ${normal}"
	#echo -e "$du"
	export CURLOCATION1=$DIR1/
		echo -e "\t    Name      Size    Changed    User    Group     Rights "
	    echo -e "\t   ------    ------  ---------  ------  -------   --------"
	echo
}
#Function to check if file or folder and open relevant editor

function menu1_file_check_ () {	
export DIR2=`echo "/${menu0_main1[$counter]}"  | awk '{print $1}'`
	if  [ -f "$DIR1/$DIR2" ] ;
then
echo "file"
clear
echo -e "${menu}Boss,\nThis is a file [${green}${menu0_main1[$counter]}${normal}] ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n"
cat $DIR1/$DIR2 | more
#To change----
local ENT=`echo -e "\n\n${menu}Press [${number}Enter${menu}] to continue or [${number}e${menu}] to edit ....${normal}\n"`
read  -n 1 -p "$ENT " filechoice
if [ "$filechoice" == "" ]; then
menu1_
elif [ "$filechoice" == "e" ]; then
$EDITOR $DIR1/$DIR2
menu1_
else
menu1_ 
fi
menu1_
#To change----- 
fi
}
 
#function to check if folder mor then 50 items
function menu1_file1_check_ () {	#<------
unset choice


 ls -L $DIR1 --color=auto --group-directories-first  #<------
   printf "$ITEMS50"
	 read -e -p "$C1itemchoice" itemchoice1 #<------
	 #echo Huy1 && sleep 2
	if [ "$itemchoice1" == "" ] ; 
	then
	#echo Huy2 && sleep 2
	menu0_
	elif  [ -f "$DIR1/$itemchoice1" ] ;  #<------
then
#echo Huy3 && sleep 2
clear
echo -e "\n\n${menu}Boss,\nThis is a file [${green}$itemchoice1${normal}${menu}] ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n" #<------
cat "$DIR1/$itemchoice1" | more   #<------
pause_file_check_
if [ "$choice" == "" ]; then
#echo Huy1 && sleep 2
menu1_
elif [ "$choice" == "e" ]; then
$EDITOR "$DIR1/$itemchoice1"  #<------
menu1_    #<------
fi
else
menu1_1_dir2_   #<------
fi
}

function menu1_ () {
clear
local selector=1
IFS=$'\n' 
set -f 
menu1_title_
declare -a menu0_main1=("<--" $CURDIR1) 
counter=0
local n=100

function draw_menu1_ () {
 DIRCOUNT=`echo "$CURDIR1" | wc -l`
    for i in "${menu0_main1[@]}"; do
	if [ "$DIRCOUNT" -gt "$n" ];
		then
		menu1_file1_check_
		else
      
		if [[ ${menu0_main1[$counter]} == $i ]] ; then
		 tput setaf 2; 
			   echo -e "\t===>${menu1}${green}$i${normal}"; tput sgr0
	   
    else
       echo -e "\t    ${normal}$i ${normal}"   ;
        fi
		fi
		done
}
function clear_menu1_()  {
    for i in "${menu0_main1[@]}"; do 
	tput cuu1 setaf 0;
	done
	tput ed setaf 0
}
function select_from_list_ () {
local selector=1
draw_menu1_
while read -sn 1  key; 
do 
if [[ "$key" == "" ]]; 
	then
	

menu1_file_check_
	back_to_root_

	menu1_dir2_  
break;    
fi
    read -sn2 -t 0.0005 k1; read -sN1 -t 0.0009 k2; read -sn2 -t 0.0005 k3
    key+=${k1}${k2}${k3}
    case "$key" in
        # countersor up, left: previous item
       $'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
        # countersor down, right: next item
        $'\e[B'|$'\e0B') ((counter < ${#menu0_main1[@]}-1)) && ((counter++)) ;;
		
	    $'\e[D'|$'\e0D')  if [[ "$counter" == 0 ]];
                                           then
                                           menu0_
                                           fi   
		                                    menu0_       ;; #left back to main menu
	       $'\e[C'|$'\e0C')  if [[ "$counter" == 0 ]];
                                           then
										   menu1_file_check_
                                           menu1_
                                           fi
										   menu1_file_check_
										   menu1_dir2_ ;; #right  #<-----------------------------------------------------menu1_dir2_ go to menu menu2_
		3|$'\e[3~') delete_  ;;
		L) disable-hiden_ && menu0_ ;;
		H) enable-hiden_ && menu0_ ;;
		1|d) create_dir_  ;;
		2|f) create_file_  ;;
		6|i) find_file_folder_ ;;
		7|p) find_pattern_ ;;
		v) cat_ ;;
        a) vi_ && menu1_	;;
		b) vim_ && menu1_	;;
		c) nano_ && menu1_ ;;		
		5|r) rename_ ;;	
		P) permission_ ;;	
		k|K) clone_ ;;
		j) find_large_files_ ;;	
		k|K) clone_ ;;	
		$'\e') main_menu0_ ;;
		e) edit_file_ ;;
        # home: first item
        $'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        $'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main1[@]}-1));;
         # q, carriage return: quit
        x|q|'') exit_ ;;
    esac
    # Redraw menu
    clear_menu1_
    draw_menu1_
done
}

local selector=1
select_from_list_

}


#Next Dir 2
function menu2_dir3_ () { 
	echo
	export DIR3=`echo "/${menu0_main2[$counter]}" | awk '{print $1}'`
	export CURDIR3=`ls $lsopt  --full-time "$DIR1$DIR2/$DIR3"  | awk '{print  $9, " | "  $6, " | " , $3, " | " $4, " | " $1, " | " }'  | grep -v total | column -t`
    echo 
	menu3_
}

function menu2_2_dir3_ () {  
local selector=2
echo 
	#export CURDIR3=`ls $lsopt "$DIR1$DIR2/$itemchoice2" -C -1` #<-----------------------------
	export CURDIR3=`ls $lsopt  --full-time "$DIR1$DIR2/$itemchoice2" | awk '{print  $9, " | "  $6, " | " , $3, " | " $4, " | " $1, " | " }'  | grep -v total | column -t`
	export DIR3=`echo "/$itemchoice2"`
	menu3_
	echo
}

function menu2_title_ {
 nano_banner_
 vim_banner_
 vi_banner_
clear && echo && clear
local selector=2
 clear
	printf "${menu}${menu1}---------------------------------------${normal}2${menu}${menu1}----------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}][${number}0${menu}]${normal}"       
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "\t===> :${green}$DIR1$DIR2/${normal}"
	export CURLOCATION1=$DIR1$DIR2/
		echo -e "\t    Name      Size    Changed    User    Group     Rights "
	    echo -e "\t   ------    ------  ---------  ------  -------   --------"
	echo
}

function menu_2_file2_check_ () {  #<------
unset choice
 cd $DIR1$DIR2 && ls --color=auto --group-directories-first  #<------
   printf "$ITEMS50"
	 read -e -p "$C1itemchoice" itemchoice2 #<------
	if [ "$itemchoice2" == "" ] ;  #<------
	then
	menu1_
	elif  [ -f "$DIR1$DIR2/$itemchoice2" ] ;  #<------
then
clear
echo -e "\n\n${menu}Boss,\nThis is a file ${green}$itemchoice2${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n" #<------
cat "$DIR1$DIR2/$itemchoice2" | more   #<------
pause_file_check_
if [ "$choice" == "" ]; then
menu2_
elif [ "$choice" == "e" ]; then
$EDITOR $DIR1$DIR2/$itemchoice2  #<------
menu2_    #<------
fi
else
menu2_2_dir3_   #<------
fi
}

function menu2_file_check_ () {
export DIR3=`echo "/${menu0_main2[$counter]}" | awk '{print $1}'`
	if  [ -f "$DIR1$DIR2/$DIR3" ] ;
then
echo "file"
clear
echo -e "${menu}Boss,\nThis is a file ${green}${menu0_main2[$counter]}${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n"
cat $DIR1$DIR2/$DIR3 | more

#To change----
local ENT=`echo -e "\n\n${menu}Press [${number}Enter${menu}] to continue or [${number}e${menu}] to edit ....${normal}\n"`
read -s -n1 -p "$ENT " filechoice
if [ "$filechoice" == "" ]; then
menu2_
elif [ "$filechoice" == "e" ]; then
$EDITOR $DIR1$DIR2/$DIR3
menu2_
else
menu2_
fi
menu2_
fi
#To change-----
}

function menu2_ () {
local selector=2
IFS=$'\n'   
set -f 
menu2_title_
declare -a menu0_main2=("<--" $CURDIR2)
counter=0
n=60
function draw_menu0_ () {  #<------
DIRCOUNT=`echo "$CURDIR2" | wc -l`
    for i in "${menu0_main2[@]}"; do  #<------
	if [ "$DIRCOUNT" -gt "$n" ];
		then
		menu_2_file2_check_   #<------
		else
      
		if [[ ${menu0_main2[$counter]} == $i ]] ; then #<------
		 tput setaf 2; 
	   echo -e "\t===>${menu1}${green}$i${normal}"; tput sgr0
    else
       echo -e "\t    ${normal}$i ${normal}"   ;
        fi
		fi
		done
}

function clear_menu0_()  {
    for i in "${menu0_main2[@]}"; do 
	tput cuu1 setaf 0;
	done
	tput ed setaf 0
}

function select_from_list_ () {
local selector=2
draw_menu0_

while read -sn 1  key; 
do 
if [[ "$key" == "" ]]; 
	then

menu2_file_check_

	back_to_root_
menu2_dir3_ 
fi
    read -sn2 -t 0.0005 k1; read -sN1 -t 0.0009 k2; read -sn2 -t 0.0005 k3
    key+=${k1}${k2}${k3}
    case "$key" in
        # countersor up, left: previous item
       $'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
        # countersor down, right: next item
        $'\e[B'|$'\e0B') ((counter < ${#menu0_main2[@]}-1)) && ((counter++)) ;;
		3|$'\e[3~') delete_  ;;
	    $'\e[D'|$'\e0D')   if [[ "$counter" == 0 ]];
                                           then
                         ‏                  menu1_
                                           fi
										   menu1_      ;; #left back to previouse menu1_
	      $'\e[C'|$'\e0C')  if [[ "$counter" == 0 ]];
                                           then
										   menu2_file_check_
                                           menu2_
                                           fi
										   menu2_file_check_
										   menu2_dir3_ ;; #right  #<-----------------------------------------------------menu2_dir3_  go to menu menu3_
		1|d) create_dir_  ;;
		L) disable-hiden_ && menu1_ ;;
		H) enable-hiden_ && menu1_ ;;
		2|f) create_file_  ;;
		6|i) find_file_folder_ ;;
		7|p) find_pattern_ ;;
		v) cat_ ;;
        a) vi_ && menu2_	;;
		b) vim_ && menu2_	;;
		c) nano_ && menu2_ ;;
          O) find_and_replace_ ;;		
		5|r) rename_ ;;	
		P) permission_ ;;	
		j) find_large_files_ ;;	
		k|K) clone_ ;;	
		$'\e') main_menu0_ ;;
		e) edit_file_ ;;
        # home: first item
        $'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        $'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main2[@]}-1));;
         # q, carriage return: quit
        x|q|'') exit_ ;;
    esac
    # Redraw menu
    clear_menu0_
    draw_menu0_
done
}
select_from_list_
local selector=2

}


#Next Dir 3
function menu3_dir4_ () { 
	echo
	 export DIR4=`echo "/${menu0_main3[$counter]}" | awk '{print $1}' `  #<-----------------------------
     export CURDIR4=`ls $lsopt  --full-time "$DIR1$DIR2$DIR3/$DIR4"  |  sed 's/domain //g' | awk '{print  $9, " | "  $6, " | " , $3, " | " $4, " | " $1, " | " }'  | grep -v total  | column -t`
	  
    echo 
	menu4_ 
}

function menu3_3_dir4_ () {  
local selector=3
echo 
	#export CURDIR4=`ls $lsopt "$DIR1$DIR2$DIR3/$itemchoice3" -C -1` #<-----------------------------
	export CURDIR4=`ls $lsopt  --full-time "$DIR1$DIR2$DIR3/$itemchoice3"  |  sed 's/domain //g' | awk '{print  $9, " | "  $6, " | " , $3, " | " $4, " | " $1, " | " }'  | grep -v total  | column -t`
	export DIR4=`echo "/$itemchoice3"`
	menu4_
	echo
}

function menu3_title_ {
local selector=3
 nano_banner_
 vim_banner_
 vi_banner_
clear && echo && clear
	printf "${menu}${menu1}---------------------------------------${normal}3${menu}${menu1}----------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}][${number}0${menu}]${normal}"       
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
    echo -e "\t===> :${green}$DIR1$DIR2$DIR3/ ${normal}"
		echo -e "\t    Name      Size    Changed    User    Group     Rights "
	echo -e "\t   ------    ------  ---------  ------  -------   --------"
	echo
	export CURLOCATION1=$DIR1$DIR2$DIR3/
}

function menu3_file_check_ () {
export DIR4=`echo "/${menu0_main3[$counter]}" | awk '{print $1}' `
		if  [ -f "$DIR1$DIR2$DIR3/$DIR4" ] ;
then
echo "file"
clear
echo -e "${menu}Boss,\nThis is a file ${green}${menu0_main3[$counter]}${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n"
cat $DIR1$DIR2$DIR3/$DIR4 | more
#To change----
local ENT=`echo -e "\n\n${menu}Press [${number}Enter${menu}] to continue or [${number}e${menu}] to edit ....${normal}\n"`
read -s -n1 -p "$ENT " filechoice
if [ "$filechoice" == "" ]; then
menu3_
elif [ "$filechoice" == "e" ]; then
$EDITOR $DIR1$DIR2$DIR3/$DIR4
menu3_
else
menu3_
fi
menu3_
#To change-----
fi
}

function menu_3_file3_check_ () {  #<------d
unset choice
 cd $DIR1$DIR2$DIR3 && ls --color=auto --group-directories-first  #<------d
   printf "$ITEMS50"
	 read -e -p "$C1itemchoice" itemchoice3 #<------d
	if [ "$itemchoice3" == "" ] ;  #<------d
	then
	menu2_
	elif  [ -f "$DIR1$DIR2$DIR3/$itemchoice3" ] ;  #<------d
then
clear
echo -e "\n\n${menu}Boss,\nThis is a file ${green}$itemchoice3${number}${normal}${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n"
cat "$DIR1$DIR2$DIR3/$itemchoice3" | more   #<------d
pause_file_check_
if [ "$choice" == "" ]; then
menu3_   #<------d
elif [ "$choice" == "e" ]; then
$EDITOR $DIR1$DIR2$DIR3/$itemchoice3  #<------d
menu3_    #<------d
fi
else
menu3_3_dir4_   #<------d
fi
}

function menu3_ () {
IFS=$'\n'   
set -f 
local selector=3
menu3_title_
declare -a menu0_main3=("<--" $CURDIR3) #<-----------------------------
counter=0
function draw_menu0_ () {
DIRCOUNT=`echo "$CURDIR3" | wc -l` #<------d
    for i in "${menu0_main3[@]}"; do  #<------d
	if [ "$DIRCOUNT" -gt "$n" ];
		then
		menu_3_file3_check_   #<------d
		else
      
		if [[ ${menu0_main3[$counter]} == $i ]] ; then #<------d
		 tput setaf 2; 
	   echo -e "\t===>${menu1}${green}$i${normal}"; tput sgr0
    else
       echo -e "\t    ${normal}$i ${normal}"   ;
        fi
		fi
		done
}
function clear_menu0_()  {
    for i in "${menu0_main3[@]}"; do 
	tput cuu1 setaf 0;
	done
	tput ed setaf 0
}
function select_from_list_ () {
draw_menu0_
while read -sn 1  key; 
do  
    if [[ "$key" == "" ]]; 
	then

menu3_file_check_
	back_to_root_
	menu3_dir4_	#<-----------------------------------------------------menu3_dir4_  go to menu menu4_
	fi
    read -sn2 -t 0.0005 k1; read -sN1 -t 0.0009 k2; read -sn2 -t 0.0005 k3
    key+=${k1}${k2}${k3}
    case "$key" in
        # countersor up, left: previous item
       $'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
        # countersor down, right: next item
		3|$'\e[3~') delete_  ;;
        $'\e[B'|$'\e0B') ((counter < ${#menu0_main3[@]}-1)) && ((counter++)) ;;
		$'\e[D'|$'\e0D') if [[ "$counter" == 0 ]];
                                           then
                                           menu2_
                                           fi
		                                    menu2_       ;; #left back to previouse menu2_
	       $'\e[C'|$'\e0C')  if [[ "$counter" == 0 ]];
                                           then
										   menu3_file_check_
                                           menu3_
                                           fi
										   menu3_file_check_
										   menu3_dir4_   ;;  #<-----------------------------------------------------menu3_dir4_  go to menu menu4_
	    1|d) create_dir_  ;;
		L) disable-hiden_ && menu2_ ;;
		H) enable-hiden_ && menu2_ ;;
		2|f) create_file_  ;;
		6|i) find_file_folder_ ;;
		v) cat_ ;;
		 O) find_and_replace_ ;;
        a) vi_ && menu3_	;;
		b) vim_ && menu3_	;;
		c) nano_ && menu3_ ;;		
		7|p) find_pattern_ ;;
		5|r) rename_ ;;	
		P) permission_ ;;	
		j) find_large_files_ ;;	
		k|K) clone_ ;;	
		$'\e') main_menu0_ ;;
		e) edit_file_ ;;
        # home: first item
        $'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        $'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main3[@]}-1));;
         # q, carriage return: quit
        x|q|'') exit_ ;;
    esac
    # Redraw menu
    clear_menu0_
    draw_menu0_
done
}
select_from_list_
local selector=3
}


#Next Dir 4
function menu4_dir5_ () { 
	echo
	export DIR5=`echo "/${menu0_main4[$counter]}"  | awk '{print $1}' `
	export CURDIR5=`ls $lsopt  --full-time "$DIR1$DIR2$DIR3$DIR4/$DIR5"  |  sed 's/domain //g' | awk '{print  $9, " | "  $6, " | " , $3, " | " $4, " | " $1, " | " }'  | grep -v total  | column -t`
	
	echo
	menu5_  && break
}

function menu4_4_dir5_ () {  
local selector=4
echo 
	#export CURDIR5=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4/$itemchoice4" -C -1` #<-----------------------------
	export CURDIR5=`ls $lsopt  --full-time "$DIR1$DIR2$DIR3$DIR4/$itemchoice4"   |  sed 's/domain //g' | awk '{print  $9, " | "  $6, " | " , $3, " | " $4, " | " $1, " | " }'  | grep -v total  | column -t`
	export DIR5=`echo "/$itemchoice4"`
	menu5_
	echo
}

function menu4_title_ {
local selector=4
 nano_banner_
 vim_banner_
 vi_banner_
clear && echo && clear
	printf "${menu}${menu1}---------------------------------------${normal}4${menu}${menu1}----------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}][${number}0${menu}]${normal}"       
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
    echo -e "\t===> :${green} $DIR1$DIR2$DIR3$DIR4/ ${normal}"
		echo -e "\t    Name      Size    Changed    User    Group     Rights "
	echo -e "\t   ------    ------  ---------  ------  -------   --------"
	echo
	export CURLOCATION1=$DIR1$DIR2$DIR3$DIR4/
	}

function menu_4_file4_check_ () {  #<------d
unset choice
 cd $DIR1$DIR2$DIR3$DIR4 && ls --color=auto --group-directories-first  #<------d
   printf "$ITEMS50"
	 read -e -p "$C1itemchoice" itemchoice4 #<------d
	if [ "$itemchoice4" == "" ] ;  #<------d
	then
	menu3_
	elif  [ -f "$DIR1$DIR2$DIR3$DIR4/$itemchoice4" ] ;  #<------d
then
clear
echo -e "\n\n${menu}Boss,\nThis is a file ${green}$itemchoice4${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n" #<------d
cat "$DIR1$DIR2$DIR3$DIR4/$itemchoice4" | more   #<------d
pause_file_check_
if [ "$choice" == "" ]; then
menu3_   #<------d
elif [ "$choice" == "e" ]; then
$EDITOR $DIR1$DIR2$DIR3$DIR4/$itemchoice4  #<------d
menu4_    #<------d
fi
else
menu4_4_dir5_   #<------d
fi
}

function menu4_file_check_ () {
export DIR5=`echo "/${menu0_main4[$counter]}"  | awk '{print $1}' `
		if  [ -f "$DIR1$DIR2$DIR3$DIR4/$DIR5" ] ;
then
echo "file"
clear
echo -e "${menu}Boss,\nThis is a file ${green}${menu0_main4[$counter]}${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n"
cat $DIR1$DIR2$DIR3$DIR4/$DIR5 | more
local ENT=`echo -e "\n\n${menu}Press [${number}Enter${menu}] to continue or [${number}e${menu}] to edit ....${normal}\n"`
read -s -n1 -p "$ENT " filechoice
if [ "$filechoice" == "" ]; then
menu4_
elif [ "$filechoice" == "e" ]; then
$EDITOR $DIR1$DIR2$DIR3$DIR4/$DIR5
menu4_
else
menu4_
fi
menu4_
#To change-----
fi

}

function menu4_ () {
local selector=4
menu4_title_
IFS=$'\n'   
set -f 
declare -a menu0_main4=("<--" $CURDIR4) #<-----------------------------
counter=0
function draw_menu0_ () {  #<------4
DIRCOUNT=`echo "$CURDIR4" | wc -l` #<------4
    for i in "${menu0_main4[@]}"; do  #<------4
	if [ "$DIRCOUNT" -gt "$n" ];
		then
		menu_4_file4_check_   #<------d
		else
      
		if [[ ${menu0_main4[$counter]} == $i ]] ; then #<------d
		 tput setaf 2; 
	   echo -e "\t===>${menu1}${green}$i${normal}"; tput sgr0
    else
       echo -e "\t    ${normal}$i ${normal}"   ;
        fi
		fi
		done

}
function clear_menu0_()  {
    for i in "${menu0_main4[@]}"; do 
	tput cuu1 setaf 0;
	done
	tput ed setaf 0
}
function select_from_list_ () {
selector=4
draw_menu0_
while read -sn 1  key; 
do 
    if [[ "$key" == "" ]]; 
	then

menu4_file_check_
	back_to_root_
	menu4_file_check_
	menu4_dir5_  #<-----------------------------------------------------menu3_dir4_  go to menu menu4_
	fi
    read -sn2 -t 0.0005 k1; read -sN1 -t 0.0009 k2; read -sn2 -t 0.0005 k3
    key+=${k1}${k2}${k3}
    case "$key" in
        # countersor up, left: previous item
       $'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
        # countersor down, right: next item
		3|$'\e[3~') delete_  ;;
        $'\e[B'|$'\e0B') ((counter < ${#menu0_main4[@]}-1)) && ((counter++)) ;;
		$'\e[D'|$'\e0D') if [[ "$counter" == 0 ]];
                                           then
                                           menu3_
                                           fi
										   menu3_      ;; #left back to previouse menu1_
	    $'\e[C'|$'\e0C')  if [[ "$counter" == 0 ]];
                                           then
										   menu4_file_check_
                                           menu4_
                                           fi
										   menu4_file_check_
										   menu4_dir5_  ;; #<------------------------menu3_dir4_  go to menu menu4_
		1|d) create_dir_  ;;
		2|f) create_file_  ;;	
		L) disable-hiden_ && menu3_ ;;
		H) enable-hiden_ && menu3_ ;;
        6|i) find_file_folder_ ;;
		7|p) find_pattern_ ;;
		v) cat_ ;;
		O) find_and_replace_ ;;
		O) find_and_replace_ ;;
        a) vi_ && menu3_	;;
		b) vim_ && menu3_	;;
		c) nano_ && menu3_ ;;		
		5|r) rename_ ;;	
		P) permission_ ;;	
		j) find_large_files_ ;;	
		k|K) clone_ ;;	
		$'\e') main_menu0_ ;;
		e) edit_file_ ;;		
        # home: first item
        $'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        $'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main4[@]}-1));;
         # q, carriage return: quit
        x|q|'') exit_ ;;
    esac
    # Redraw menu
    clear_menu0_
    draw_menu0_
done
}
selector=4
select_from_list_
}


#Next Dir 5
function menu5_dir6_ () {
	echo
	export DIR6=`echo "/${menu0_main5[$counter]}"  | awk '{print $1}' `
	export CURDIR6=`ls $lsopt  --full-time "$DIR1$DIR2$DIR3$DIR4$DIR5/$DIR6" | sed -r 's/^.+\///'  |  awk '{print  $9, " | "  $6, " | " , $3, " | " $4, " | " $1, " | " }'  | grep -v total  | column -t`
    echo 
	menu6_
}

function menu5_5_dir6_ () {  
local selector=5
echo 
	#export CURDIR6=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4$DIR5/$itemchoice5" -C -1` #<-----------------------------
	export CURDIR6=`ls $lsopt  --full-time "$DIR1$DIR2$DIR3$DIR4$DIR5/$itemchoice5" | sed -r 's/^.+\///'  |  awk '{print  $9, " | "  $6, " | " , $3, " | " $4, " | " $1, " | " }'  | grep -v total  | column -t`
	export DIR6=`echo "/$itemchoice5"`
	menu6_
	echo
}

function menu5_title_ {
local selector=5
 nano_banner_
 vim_banner_
 vi_banner_

clear && echo && clear
	printf "${menu}${menu1}---------------------------------------${normal}5${menu}${menu1}----------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}][${number}0${menu}]${normal}"       
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
    echo -e "\t===> :${green} $DIR1$DIR2$DIR3$DIR4$DIR5/ ${normal}"
		echo -e "\t    Name      Size    Changed    User    Group     Rights "
	echo -e "\t   ------    ------  ---------  ------  -------   --------"
	echo
	export CURLOCATION1=$DIR1$DIR2$DIR3$DIR4$DIR5/
}

function menu_5_file5_check_ () {  #<------d
unset choice
 cd $DIR1$DIR2$DIR3$DIR4$DIR5 && ls --color=auto --group-directories-first  #<------d
   printf "$ITEMS50"
	 read -e -p "$C1itemchoice" itemchoice5 #<------d
	if [ "$itemchoice5" == "" ] ;  #<------d
	then
	menu4_  #<------d
	elif  [ -f "$DIR1$DIR2$DIR3$DIR4$DIR5/$itemchoice5" ] ;  #<------d
then
clear
echo -e "\n\n${menu}Boss,\nThis is a file ${green}$itemchoice5${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n" #<------d
cat "$DIR1$DIR2$DIR3$DIR4$DIR5/$itemchoice5" | more   #<------d
pause_file_check_
if [ "$choice" == "" ]; then
menu5_   #<------d
elif [ "$choice" == "e" ]; then
$EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5/$itemchoice5  #<------d
menu5_    #<------d
fi
else
menu5_5_dir6_   #<------d
fi
}

function menu5_file_check_ () {		
export DIR6=`echo "/${menu0_main5[$counter]}"  | awk '{print $1}' `
		if  [ -f "$DIR1$DIR2$DIR3$DIR4$DIR5/$DIR6" ] ;
then
echo "file"
clear
echo -e "${menu}Boss,\nThis is a file ${green}${menu0_main5[$counter]}${normal}${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n"
cat $DIR1$DIR2$DIR3$DIR4$DIR5/$DIR6 | more
#To change----
local ENT=`echo -e "\n\n${menu}Press [${number}Enter${menu}] to continue or [${number}e${menu}] to edit ....${normal}\n"`
read -s -n1 -p "$ENT " filechoice
if [ "$filechoice" == "" ]; then
menu5_
elif [ "$filechoice" == "e" ]; then
$EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5/$DIR6
menu5_
else
menu5_
fi
menu5_
#To change-----

fi
}

function menu5_ () {
local selector=5
menu5_title_
IFS=$'\n'   
set -f 
declare -a menu0_main5=("<--" $CURDIR5) #<-----------------------------
counter=0
function draw_menu0_ () {
 menu5_title_  #<------d
DIRCOUNT=`echo "$CURDIR5" | wc -l` #<------d
    for i in "${menu0_main5[@]}"; do  #<------d
	if [ "$DIRCOUNT" -gt "$n" ];
		then
		menu_5_file5_check_   #<------
		else
      
		if [[ ${menu0_main5[$counter]} == $i ]] ; then #<------
		 tput setaf 2; 
	   echo -e "\t===>${menu1}${green}$i${normal}"; tput sgr0
    else
       echo -e "\t    ${normal}$i ${normal}"   ;
        fi
		fi
		done
}
function clear_menu0_()  {
    for i in "${menu0_main5[@]}"; do #<-----------------------------
	tput cuu1 setaf 0; 
	done
	tput ed setaf 0
}
function select_from_list_ () {
selector=5
draw_menu0_
while read -sn 1  key; 
do # 1 char (not delimiter), silent
    # Check for enter/space
    if [[ "$key" == "" ]]; 
	then

menu5_file_check_	
	back_to_root_
    menu5_dir6_ #<-----------------------------------------------------menu5_dir6_  go to menu menu0_
	fi
	
    read -sn2 -t 0.0005 k1; read -sN1 -t 0.0009 k2; read -sn2 -t 0.0005 k3
    key+=${k1}${k2}${k3}
    case "$key" in
        # countersor up, left: previous item
       $'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
        # countersor down, right: next item
        $'\e[B'|$'\e0B') ((counter < ${#menu0_main5[@]}-1)) && ((counter++)) ;; 
		$'\e[D'|$'\e0D') if [[ "$counter" == 0 ]];
                                           then
                                           menu4_
                                           fi
										   menu4_      ;; #left back to previouse menu4_
	   $'\e[C'|$'\e0C')  if [[ "$counter" == 0 ]];
                                           then
										   menu5_file_check_
                                           menu5_
                                           fi 
										   menu5_file_check_
										   menu5_dir6_   ;;#<-----------------------------------------------------menu3_dir4_  go to menu menu0_
		1|d) create_dir_  ;;
		2|f) create_file_  ;;	
		L) disable-hiden_ && menu4_ ;;
		H) enable-hiden_ && menu4_ ;;
		6|i) find_file_folder_ ;;
		v) cat_ ;;
        a) vi_ && menu5_	;;
		b) vim_ && menu5_	;;
		c) nano_ && menu5_ ;;		
		5|r) rename_ ;;	
		 O) find_and_replace_ ;;
		P) permission_ ;;	
		j) find_large_files_ ;;	
		k|K) clone_ ;;	
		7|p) find_pattern_ ;;
		$'\e') main_menu0_ ;;
		e) edit_file_ ;;
        3|$'\e[3~') delete_  ;;		
        # home: first item
        $'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        $'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main5[@]}-1));; 
         # q, carriage return: quit
         x|q|'') exit_ ;;
    esac
    # Redraw menu
    clear_menu0_
    draw_menu0_
	#case_
done
}
selector=5
select_from_list_
}
 

#Next Dir 6
function menu6_dir7_ () { 
	#Replase:
#1. menu6_dir7_ to next one menu7_dir8_
#2. menu0_main6 to menu0_main7
#3. CURDIR6 to CURDIR7
#4. DIR6 to DIR7
#5. menu5_ to menu6_
#6. "Current location 6 is: $DIR1$DIR2$DIR3$DIR4$DIR5/${menu0_main5[$counter]}"    to   echo -e "Current location 6 is: $DIR1$DIR2$DIR3$DIR4$DIR5/${menu0_main5[$counter]}"

	echo
    export DIR7=`echo "/${menu0_main6[$counter]}"  | awk '{print $1}' `
	export CURDIR7=`ls $lsopt  --full-time "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/$DIR7" | sed -r 's/^.+\///'  |  sed 's/domain //g' | awk '{print  $9, " | "  $6, " | " , $3, " | " $4, " | " $1, " | " }'  | grep -v total  | column -t`
    echo 
	
	menu7_ && break
}

function menu6_6_dir7_ () {  
local selector=6
echo 
	#export CURDIR7=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/$itemchoice6" -C -1` #<-----------------------------
	export CURDIR7=`ls $lsopt  --full-time "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/$itemchoice6" | sed -r 's/^.+\///'  |  sed 's/domain //g' | awk '{print  $9, " | "  $6, " | " , $3, " | " $4, " | " $1, " | " }'  | grep -v total  | column -t`
	export DIR7=`echo "/$itemchoice6"`
	menu7_
	echo
}

function menu6_title_ {
local selector=3
 nano_banner_
 vim_banner_
 vi_banner_
IFS=$'\n'
set -f 
clear && echo && clear
	printf "${menu}${menu1}---------------------------------------${normal}6${menu}${menu1}----------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}][${number}0${menu}]${normal}"       
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
    echo -e "\t===> :${green} $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/ ${normal}"
		echo -e "\t    Name      Size    Changed    User    Group     Rights "
	echo -e "\t   ------    ------  ---------  ------  -------   --------"
	echo
export CURLOCATION1=$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/
}

function menu6_file_check_ () {	
 export DIR7=`echo "/${menu0_main6[$counter]}"  | awk '{print $1}' `
		if  [ -f "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/$DIR7" ] ;
then
echo "file"
clear
echo -e "${menu}Boss,\nThis is a file ${green}${menu0_main6[$counter]}${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n"
cat $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/$DIR7 | more
#To change----
local ENT=`echo -e "\n\n${menu}Press [${number}Enter${menu}] to continue or [${number}e${menu}] to edit ....${normal}\n"`
read -s -n1 -p "$ENT " filechoice
if [ "$filechoice" == "" ]; then
menu6_
elif [ "$filechoice" == "e" ]; then
$EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/$DIR7
menu6_
else
menu6_
fi
menu6_
#To change-----
fi
}

function menu6_ () {
local selector=6
menu6_title_
declare -a menu0_main6=("<--" $CURDIR6) #<-----------------------------
counter=0
function draw_menu0_ () {
local DMENU=0
    for i in "${menu0_main6[@]}"; do #<-----------------------------
        if [[ ${menu0_main6[$counter]} == $i ]]; then #<-----------------------------
            tput setaf 2; 
	   echo -e "\t===>${menu1}${green}$i${normal}"; tput sgr0
    else
       echo -e "\t    ${normal}$i ${normal}"   ;
        fi
		done
}
function clear_menu0_()  {
    for i in "${menu0_main6[@]}"; do #<-----------------------------
	tput cuu1 setaf 0; 
	done
	tput ed setaf 0
}
function select_from_list_ () {
local selector=6
draw_menu0_
while read -sn 1  key; 
do # 1 char (not delimiter), silent
    # Check for enter/space
    if [[ "$key" == "" ]]; 
	then

menu6_file_check_
	back_to_root_
	#!!!Next must be  chenged to | menu7_dir8_
    menu6_dir7_  #<-----------------------------------------------------menu6_dir7_  go to menu menu0_
	fi
	
    read -sn2 -t 0.0005 k1; read -sN1 -t 0.0009 k2; read -sn2 -t 0.0005 k3
    key+=${k1}${k2}${k3}
    case "$key" in
        # countersor up, left: previous item
       $'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
        # countersor down, right: next item
		3|$'\e[3~') delete_  ;;
        $'\e[B'|$'\e0B') ((counter < ${#menu0_main6[@]}-1)) && ((counter++)) ;; 
		#!!!Next must be  chenged to | 
		$'\e[D'|$'\e0D') if [[ "$counter" == 0 ]];
                                           then
                                           menu5_
                                           fi
										   menu5_     ;; #left back to previouse menu4_
	    $'\e[C'|$'\e0C')  if [[ "$counter" == 0 ]];
                                           then
										   menu6_file_check_
                                           menu6_
                                           fi 
										   menu6_file_check_
										   menu6_dir7_    ;;#<-----------------------------------------------------menu3_dir4_  go to menu menu0_
		1|d) create_dir_  ;;
		2|f) create_file_  ;;
		L) disable-hiden_ && menu5_ ;;
		H) enable-hiden_ && menu5_ ;;
        6|i) find_file_folder_ ;;
		v) cat_ ;;
        a) vi_ && menu6_	;;
		b) vim_ && menu6_	;;
		c) nano_ && menu6_ ;;		
		7|p) find_pattern_ ;;
		5|r) rename_ ;;	
		P) permission_ ;;	
		j) find_large_files_ ;;	
		k|K) clone_ ;;	
		$'\e') main_menu0_ ;;
		e) edit_file_ ;;		
        # home: first item
        $'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        $'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main6[@]}-1));; 
         # q, carriage return: quit
         x|q|'') exit_ ;;
    esac
    # Redraw menu
    clear_menu0_
    draw_menu0_
	#case_
done
}
local selector=6
select_from_list_
}


#Next Dir 7
function menu7_dir8_ () {  #<-----------------------------------------------------menu7_dir7_  go to menu menu0_
	#Replase:
#1. menu7_dir7_ to next one menu7_dir8_
#2. menu0_main7_ to menu0_main8
#3. CURDIR6 to CURDIR7
#4. DIR6 to DIR7
#5. menu5_ to menu7_
#6. "Current location 6 is: $DIR1$DIR2$DIR3$DIR4$DIR5/${menu0_main5[$counter]}"    to   echo -e "Current location 6 is: $DIR1$DIR2$DIR3$DIR4$DIR5/${menu0_main5[$counter]}"

	echo
    export DIR8=`echo "/${menu0_main7[$counter]}"  | awk '{print $1}' `
	export CURDIR8=`ls $lsopt  --full-time "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/$DIR8" | sed -r 's/^.+\///'  |  sed 's/domain //g' | awk '{print  $9, " | "  $6, " | " , $3, " | " $4, " | " $1, " | " }'  | grep -v total  | column -t`
    echo 
	
	menu8_  && break
}

function menu7_7_dir8_ () {  
local selector=7
echo 
	#export CURDIR7=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/$itemchoice7" -C -1` #<-----------------------------
	export CURDIR8=`ls $lsopt  --full-time "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6/$itemchoice7" | sed -r 's/^.+\///'  |  sed 's/domain //g' | awk '{print  $9, " | "  $6, " | " , $3, " | " $4, " | " $1, " | " }'  | grep -v total  | column -t`
	export DIR7=`echo "/$itemchoice7"`
	menu8_
	echo
}

function menu7_title_ {
local selector=7
 nano_banner_
 vim_banner_
 vi_banner_
IFS=$'\n'
set -f 
clear && echo && clear
	printf "${menu}${menu1}---------------------------------------${normal}7${menu}${menu1}----------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}][${number}0${menu}]${normal}"       
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
    echo -e "\t===> :${green} $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/ ${normal}"
		echo -e "\t    Name      Size    Changed    User    Group     Rights "
	echo -e "\t   ------    ------  ---------  ------  -------   --------"
	echo
	export CURLOCATION1=$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/ 
}

function menu7_file_check_ () {	
 export DIR8=`echo "/${menu0_main7[$counter]}"  | awk '{print $1}' `
		if  [ -f "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/$DIR8" ] ;
then
echo "file"
clear
echo -e "${menu}Boss,\nThis is a file ${green}${menu0_main7[$counter]}${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n"
cat $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/$DIR8 | more
#To change----
local ENT=`echo -e "\n\n${menu}Press [${number}Enter${menu}] to continue or [${number}e${menu}] to edit ....${normal}\n"`
read -n 1 -p "$ENT " filechoice
if [ "$filechoice" == "" ]; then
menu7_
elif [ "$filechoice" == "e" ]; then
$EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/$DIR8
menu7_
else
menu7_
fi
menu7_
#To change-----
fi
}

function menu7_ () {
local selector=7
menu7_title_
declare -a menu0_main7=("<--" $CURDIR7) #<-----------------------------
counter=0
function draw_menu0_ () {
local DMENU=0
    for i in "${menu0_main7[@]}"; do #<-----------------------------
        if [[ ${menu0_main7[$counter]} == $i ]]; then #<-----------------------------
            tput setaf 2; 
	   echo -e "\t===>${menu1}${green}$i${normal}"; tput sgr0
    else
       echo -e "\t    ${normal}$i ${normal}"   ;
        fi
		done
}

function clear_menu0_()  {
    for i in "${menu0_main7[@]}"; do #<-----------------------------
	tput cuu1 setaf 0; 
	done
	tput ed setaf 0
}
function select_from_list_ () {
local selector=7
draw_menu0_
while read -sn 1  key; 
do # 1 char (not delimiter), silent
    # Check for enter/space
    if [[ "$key" == "" ]]; 
	then

menu7_file_check_	
	back_to_root_
	#!!!Next must be  chenged to | menu7_dir8_
    menu7_dir8_  #<-----------------------------------------------------menu7_dir7_  go to menu menu0_
	fi
	
    read -sn2 -t 0.0005 k1; read -sN1 -t 0.0009 k2; read -sn2 -t 0.0005 k3
    key+=${k1}${k2}${k3}
    case "$key" in
        # countersor up, left: previous item
       $'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
        # countersor down, right: next item
		3|$'\e[3~') delete_  ;;
        $'\e[B'|$'\e0B') ((counter < ${#menu0_main7[@]}-1)) && ((counter++)) ;; 
		#!!!Next must be  chenged to | 
		$'\e[D'|$'\e0D') if [[ "$counter" == 0 ]];
                                           then
                                           menu6_
                                           fi
										   menu6_       ;; #left back to previouse menu4_
	    $'\e[C'|$'\e0C')  if [[ "$counter" == 0 ]];
                                           then
										   menu7_file_check_
                                           menu7_
                                           fi
										   menu7_file_check_
										   menu7_dir8_   ;;#<-----------------------------------------------------menu3_dir4_  go to menu menu0_
		1|d) create_dir_  ;;
		2|f) create_file_  ;;	
		L) disable-hiden_ && menu6_ ;;
		H) enable-hiden_ && menu6_ ;;
		7|p) find_pattern_ ;;
        6|i) find_file_folder_ ;;
		v) cat_ ;;
        a) vi_ && menu7_	;;
		b) vim_ && menu7_	;;
		c) nano_ && menu7_ ;;		
		5|r) rename_ ;;	
		P) permission_ ;;	
		j) find_large_files_ ;;	
		k|K) clone_ ;;	
		$'\e') main_menu0_ ;;
		e) edit_file_ ;;		
        # home: first item
        $'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        $'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main7[@]}-1));; 
         # q, carriage return: quit
        x|q|''|$'\e')echo "Aborted.${normal}" && exit;;
    esac
    # Redraw menu
    clear_menu0_
    draw_menu0_
	#case_
done
}
local selector=7
select_from_list_
}


#Next Dir 8
function menu8_dir9_ () {  #<-----------------------------------------------------menu7_dir7_  go to menu menu0_

	echo
    export DIR9=`echo "/${menu0_main8[$counter]}"  | awk '{print $1}' `
	export CURDIR9=`ls $lsopt  --full-time "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/$DIR9" | sed -r 's/^.+\///'  |  sed 's/domain //g' | awk '{print  $9, " | "  $6, " | " , $3, " | " $4, " | " $1, " | " }'  | grep -v total  | column -t`
    echo 
	
	menu9_ && break
}

function menu8_8_dir9_ () {  
local selector=8
echo 
	#export CURDIR9=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/$itemchoice8" -C -1` #<-----------------------------
	export CURDIR9=`ls $lsopt  --full-time "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7/$itemchoice8" | sed -r 's/^.+\///'  |  sed 's/domain //g' | awk '{print  $9, " | "  $6, " | " , $3, " | " $4, " | " $1, " | " }'  | grep -v total  | column -t`
	export DIR9=`echo "/$itemchoice8"`
	menu9_
	echo
}

function menu8_title_ {
 nano_banner_
 vim_banner_
 vi_banner_
local selector=8
IFS=$'\n'
set -f 
 clear && echo && clear
	printf "${menu}${menu1}---------------------------------------${normal}8${menu}${menu1}----------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}][${number}0${menu}]${normal}"       
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
    echo -e "\t===> :${green} $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/ ${normal}"
		echo -e "\t    Name      Size    Changed    User    Group     Rights "
	echo -e "\t   ------    ------  ---------  ------  -------   --------"
	echo
	export CURLOCATION1=$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/
}

function menu8_file_check_ () {			
export DIR9=`echo "/${menu0_main8[$counter]}"  | awk '{print $1}' `
		if  [ -f "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/$DIR9" ] ;
then
echo "file"
clear
echo -e "${menu}Boss,\nThis is a file ${green}${menu0_main8[$counter]}${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n"
cat $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/$DIR9 | more
#To change----
local ENT=`echo -e "\n\n${menu}Press [${number}Enter${menu}] to continue or [${number}e${menu}] to edit ....${normal}\n"`
read -s -n1 -p "$ENT " filechoice
if [ "$filechoice" == "" ]; then
menu8_
elif [ "$filechoice" == "e" ]; then
$EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/$DIR9
menu8_
else
menu8_
fi
menu8_
#To change-----
fi
}

function menu8_ () {
local selector=8
menu8_title_ 
declare -a menu0_main8=("<--" $CURDIR8) 
counter=0
function draw_menu0_ () {
local DMENU=0
    for i in "${menu0_main8[@]}"; do 
        if [[ ${menu0_main8[$counter]} == $i ]]; then 
            tput setaf 2; 
	   echo -e "\t===>${menu1}${green}$i${normal}"; tput sgr0
    else
       echo -e "\t    ${normal}$i ${normal}"   ;
        fi
		done
}

function clear_menu0_()  {
local selector=8
    for i in "${menu0_main8[@]}"; do 
	tput cuu1 setaf 0; 
	done
	tput ed setaf 0
}
function select_from_list_ () {
local selector=8
draw_menu0_
while read -sn 1  key; 
do # 1 char (not delimiter), silent
    # Check for enter/space
    if [[ "$key" == "" ]]; 
	then

menu8_file_check_	
	back_to_root_
    menu8_dir9_  
	fi
	
    read -sn2 -t 0.0005 k1; read -sN1 -t 0.0009 k2; read -sn2 -t 0.0005 k3
    key+=${k1}${k2}${k3}
    case "$key" in
        # countersor up, left: previous item
       $'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
        # countersor down, right: next item
		3|$'\e[3~') delete_  ;;
        $'\e[B'|$'\e0B') ((counter < ${#menu0_main8[@]}-1)) && ((counter++)) ;; 
		#!!!Next must be  chenged to | 
		$'\e[D'|$'\e0D')  if [[ "$counter" == 0 ]];
                                           then
                                           menu7_
                                           fi  
                                           menu7_										   ;; #left back to previouse menu4_
	    $'\e[C'|$'\e0C')  if [[ "$counter" == 0 ]];
                                           then
										   menu8_file_check_
                                           menu8_
                                           fi
										   menu8_file_check_
										   menu8_dir9_    ;;#<-----------------------------------------------------menu3_dir4_  go to menu menu0_
	    1|d) create_dir_  ;;
		L) disable-hiden_ && menu7_ ;;
		H) enable-hiden_ && menu7_ ;;
		2|f) create_file_  ;;
		6|i) find_file_folder_ ;;
		7|p) find_pattern_ ;;
		v) cat_ ;;
        a) vi_ && menu8_	;;
		b) vim_ && menu8_	;;
		c) nano_ && menu8_ ;;		
		5|r) rename_ ;;	
		P) permission_ ;;	
		j) find_large_files_ ;;	
		k|K) clone_ ;;	
		$'\e') main_menu0_ ;;
		e) edit_file_ ;;
        # home: first item
        $'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        $'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main8[@]}-1));; 
         # q, carriage return: quit
         x|q|'') exit_ ;;
    esac
    # Redraw menu
    clear_menu0_
    draw_menu0_
	#case_
done
}
local selector=8
select_from_list_
}


#Next Dir 9
function menu9_dir10_ () {  #<-----------------------------------------------------menu7_dir7_  go to menu menu0_
	echo
    export DIR10=`echo "/${menu0_main9[$counter]}"  | awk '{print $1}' `
	export CURDIR10=`ls $lsopt  --full-time "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/$DIR10" | sed -r 's/^.+\///'  |  awk '{print  $9, " | "  $6, " | " , $3, " | " $4, " | " $1, " | " }'  | grep -v total  | column -t`
    echo 
	
	menu10_ && break
}

function menu9_9_dir10_ () {  
local selector=9
echo 
	#export CURDIR10=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/$itemchoice9" -C -1` #<-----------------------------
	export CURDIR10=`ls $lsopt  --full-time "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8/$itemchoice9" | sed -r 's/^.+\///'  |  awk '{print  $9, " | "  $6, " | " , $3, " | " $4, " | " $1, " | " }'  | grep -v total  | column -t`
	export DIR10=`echo "/$itemchoice9"`
	menu10_
	echo
}

function menu9_title_ {
local selector=9
IFS=$'\n'
set -f 
 clear && echo && clear
	printf "${menu}${menu1}---------------------------------------${normal}9${menu}${menu1}----------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}][${number}0${menu}]${normal}"       
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
    echo -e "\t===> :${green} $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/ ${normal}"
		echo -e "\t    Name      Size    Changed    User    Group     Rights "
	echo -e "\t   ------    ------  ---------  ------  -------   --------"
	echo
	export CURLOCATION1=$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/
}

function menu9_file_check_ () {			
export DIR10=`echo "/${menu0_main9[$counter]}"  | awk '{print $1}' `
		if  [ -f "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/$DIR10" ] ;
then
echo "file"
clear
echo -e "${menu}Boss,\nThis is a file ${green}${menu0_main9[$counter]}${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n"
cat $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/$DIR10 | more
#To change----
local ENT=`echo -e "\n\n${menu}Press [${number}Enter${menu}] to continue or [${number}e${menu}] to edit ....${normal}\n"`
read -s -n1 -p "$ENT " filechoice
if [ "$filechoice" == "" ]; then
menu9_
elif [ "$filechoice" == "e" ]; then
$EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/$DIR10
menu9_
else
menu9_
fi
menu9_
#To change-----
fi
}

function menu9_ () {
local selector=9
menu9_title_ 
IFS=$'\n'       # make newlines the only separator
set -f 
declare -a menu0_main9=("<--" $CURDIR9) #<-----------------------------
counter=0
function draw_menu0_ () {
local DMENU=0
    for i in "${menu0_main9[@]}"; do #<-----------------------------
        if [[ ${menu0_main9[$counter]} == $i ]]; then #<-----------------------------
            tput setaf 2; 
	   echo -e "\t===>${menu1}${green}$i${normal}"; tput sgr0
    else
       echo -e "\t    ${normal}$i ${normal}"   ;  
        fi
		done
}

function clear_menu0_()  {
    for i in "${menu0_main9[@]}"; do #<-----------------------------
	tput cuu1 setaf 0; 
	done
	tput ed setaf 0
}
function select_from_list_ () {
local selector=9
draw_menu0_
while read -sn 1  key; 
do # 1 char (not delimiter), silent
    # Check for enter/space
    if [[ "$key" == "" ]]; 
	then

menu9_file_check_
	back_to_root_
	#!!!Next must be  chenged to | menu9_dir8_
    menu9_dir10_  #<-----------------------------------------------------menu9_dir7_  go to menu menu0_
	fi
	
    read -sn2 -t 0.0005 k1; read -sN1 -t 0.0009 k2; read -sn2 -t 0.0005 k3
    key+=${k1}${k2}${k3}
    case "$key" in
        # countersor up, left: previous item
       $'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
        # countersor down, right: next item
		3|$'\e[3~') delete_  ;;
        $'\e[B'|$'\e0B') ((counter < ${#menu0_main9[@]}-1)) && ((counter++)) ;; 
		#!!!Next must be  chenged to | 
		$'\e[D'|$'\e0D') if [[ "$counter" == 0 ]];
                                           then
                                           menu8_
                                           fi  
                                           menu8_    ;; #left back to previouse menu4_
	    $'\e[C'|$'\e0C')  if [[ "$counter" == 0 ]];
                                           then
										   menu9_file_check_
                                           menu9_
                                           fi
										   menu9_file_check_
										   menu9_dir10_    ;;#<-----------------------------------------------------menu3_dir4_  go to menu menu0_
        1|d) create_dir_  ;;
		L) disable-hiden_ && menu8_ ;;
		H) enable-hiden_ && menu8_ ;;
		7|p) find_pattern_ ;;
		2|f) create_file_  ;;
        6|i) find_file_folder_ ;;
		v) cat_ ;;
        a) vi_ && menu9_	;;
		b) vim_ && menu9_	;;
		c) nano_ && menu9_ ;;		
		5|r) rename_ ;;	
		P) permission_ ;;	
		j) find_large_files_ ;;	
		k|K) clone_ ;;	
		$'\e') main_menu0_ ;;
		e) edit_file_ ;;		
        # home: first item
        $'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        $'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main9[@]}-1));; 
         # q, carriage return: quit
        x|q|'') exit_ ;;
    esac
    # Redraw menu
    clear_menu0_
    draw_menu0_
	#case_
done
}
local selector=9
select_from_list_
}


#Next Dir 10
function menu10_dir11_ () {  #<-----------------------------------------------------menu7_dir7_  go to menu menu0_
	echo
    export DIR11=`echo "/${menu0_main10[$counter]}"  | awk '{print $1}' `
	export CURDIR11=`ls $lsopt  --full-time "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/$DIR11" | sed -r 's/^.+\///'  |  sed 's/domain //g' | awk '{print  $9, " | "  $6, " | " , $3, " | " $4, " | " $1, " | " }'  | grep -v total  | column -t`
    echo 
	
	menu11_ && break
}

function menu10_10_dir11_ () {  
local selector=10
echo 
export CURDIR11=`ls $lsopt  --full-time "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/$itemchoice10" | sed -r 's/^.+\///'  |  sed 's/domain //g' | awk '{print  $9, " | "  $6, " | " , $3, " | " $4, " | " $1, " | " }'  | grep -v total  | column -t`
	#export CURDIR11=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9/$itemchoice10" -C -1` #<-----------------------------
	export DIR11=`echo "/$itemchoice10"`
	menu11_
	echo
}

function menu10_title_ {
local selector=10
 nano_banner_
 vim_banner_
 vi_banner_
IFS=$'\n'
set -f 
 clear && echo && clear
	printf "${menu}${menu1}---------------------------------------${normal}10${menu}${menu1}----------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}][${number}0${menu}]${normal}"       
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
    echo -e "\t===> :${green} $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/ ${normal}"
		echo -e "\t    Name      Size    Changed    User    Group     Rights "
	echo -e "\t   ------    ------  ---------  ------  -------   --------"
	echo
	export CURLOCATION1=$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/
}

function menu10_file_check_ () {	
export DIR11=`echo "/${menu0_main10[$counter]}"  | awk '{print $1}' `			
		if  [ -f "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/$DIR11" ] ;
then
echo "file"
clear
echo -e "${menu}Boss,\nThis is a file ${green}${menu0_main10[$counter]}${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n"
cat $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/$DIR11 | more
#To change----
local ENT=`echo -e "\n\n${menu}Press [${number}Enter${menu}] to continue or [${number}e${menu}] to edit ....${normal}\n"`
read -s -n1 -p "$ENT " filechoice
if [ "$filechoice" == "" ]; then
menu10_
elif [ "$filechoice" == "e" ]; then
$EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/$DIR11
menu10_
else
menu10_
fi
menu10_
#To change-----
fi
	}

function menu10_ () {
local selector=10
menu10_title_
declare -a menu0_main10=("<--" $CURDIR10)
counter=0
function draw_menu0_ () {
local DMENU=0
    for i in "${menu0_main10[@]}"; do
        if [[ ${menu0_main10[$counter]} == $i ]]; then
            tput setaf 2; 
	   echo -e "\t===>${menu1}${green}$i${normal}"; tput sgr0
    else
       echo -e "\t    ${normal}$i ${normal}"   ;
        fi
		done
}

function clear_menu0_()  {
    for i in "${menu0_main10[@]}"; do
	tput cuu1 setaf 0; 
	done
	tput ed setaf 0
}
function select_from_list_ () {
local selector=10
draw_menu0_
while read -sn 1  key; 
do
    if [[ "$key" == "" ]]; 
	then
	

	menu10_file_check_
	back_to_root_
    menu10_dir11_
	fi
    read -sn2 -t 0.0005 k1; read -sN1 -t 0.0009 k2; read -sn2 -t 0.0005 k3
    key+=${k1}${k2}${k3}
    case "$key" in
        # countersor up, left: previous item
       $'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
        # countersor down, right: next item
        $'\e[B'|$'\e0B') ((counter < ${#menu0_main10[@]}-1)) && ((counter++)) ;; 
		#!!!Next must be  chenged to | 
		3|$'\e[3~') delete_  ;;
		$'\e[D'|$'\e0D') if [[ "$counter" == 0 ]];
                                           then
                                           menu9_
                                           fi  
                                           menu9_       ;; #left back to previouse menu4_
	    $'\e[C'|$'\e0C')  if [[ "$counter" == 0 ]];
                                           then
										   menu10_file_check_
                                           menu10_
                                           fi 
										   menu10_file_check_
										   menu10_dir11_    ;;#<-----------------------------------------------------menu3_dir4_  go to menu menu0_
        1|d) create_dir_  ;;
		2|f) create_file_  ;;	
		L) disable-hiden_ && menu9_ ;;
		H) enable-hiden_ && menu9_ ;;
          6|i) find_file_folder_ ;;
		  7|p) find_pattern_ ;;
		v) cat_ ;;
        a) vi_ && menu10_	;;
		b) vim_ && menu10_	;;
		c) nano_ && menu10_ ;;		
		5|r) rename_ ;;	
		P) permission_ ;;	
		j) find_large_files_ ;;	
		k|K) clone_ ;;	
		$'\e') main_menu0_ ;;
		e) edit_file_ ;;		
        # home: first item
        $'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        $'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main10[@]}-1));; 
         # q, carriage return: quit
         x|q|'') exit_ ;;
    esac
    # Redraw menu
    clear_menu0_
    draw_menu0_
	#case_
done
}
local selector=10
select_from_list_
}


#Next Dir 11
function menu11_dir12_ () { 
	echo
    export DIR12=`echo "/${menu0_main11[$counter]}"  | awk '{print $1}' `
	export CURDIR12=`ls $lsopt  --full-time "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11/$DIR12" | sed -r 's/^.+\///'  |  sed 's/domain //g' | awk '{print  $9, " | "  $6, " | " , $3, " | " $4, " | " $1, " | " }'  | grep -v total  | column -t`
    echo 
	
	menu12_
}

function menu11_11_dir12_ () {  
local selector=11
echo 
	#export CURDIR12=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/$itemchoice11" -C -1` #<-----------------------------
	export CURDIR12=`ls $lsopt  --full-time "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10/$itemchoice11" | sed -r 's/^.+\///'  |  sed 's/domain //g' | awk '{print  $9, " | "  $6, " | " , $3, " | " $4, " | " $1, " | " }'  | grep -v total  | column -t`
	export DIR12=`echo "/$itemchoice11"`
	menu12_
	echo
}

function menu11_title_ {
local selector=11
 nano_banner_
 vim_banner_
 vi_banner_
IFS=$'\n'
set -f 
 clear && echo && clear
	printf "${menu}${menu1}---------------------------------------${normal}11${menu}${menu1}----------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}][${number}0${menu}]${normal}"       
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
    echo -e "\t===> :${green} $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11/ ${normal}"
		echo -e "\t    Name      Size    Changed    User    Group     Rights "
	echo -e "\t   ------    ------  ---------  ------  -------   --------"
	echo
	export CURLOCATION1=$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11/
}

function menu11_file_check_ () {
export DIR12=`echo "/${menu0_main11[$counter]}"  | awk '{print $1}' `
			if  [ -f "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11/$DIR12" ] ;
then
echo "file"
clear
echo -e "${menu}Boss,\nThis is a file ${green}${menu0_main11[$counter]}${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n"
cat $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11/$DIR12 | more
#To change----
local ENT=`echo -e "\n\n${menu}Press [${number}Enter${menu}] to continue or [${number}e${menu}] to edit ....${normal}\n"`
read -s -n1 -p "$ENT " filechoice
if [ "$filechoice" == "" ]; then
menu11_
elif [ "$filechoice" == "e" ]; then
$EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11/$DIR12
menu11_
else
menu11_
fi
menu11_
#To change-----
fi
}

function menu11_ () {
local selector=11
 menu11_title_
declare -a menu0_main11=("<--" $CURDIR11) #<-----------------------------
counter=0
function draw_menu0_ () {
local DMENU=0
    for i in "${menu0_main11[@]}"; do #<-----------------------------
        if [[ ${menu0_main11[$counter]} == $i ]]; then #<-----------------------------
            tput setaf 2; 
	   echo -e "\t===>${menu1}${green}$i${normal}"; tput sgr0
    else
       echo -e "\t    ${normal}$i ${normal}"   ;
        fi
		done
}

function clear_menu0_()  {
    for i in "${menu0_main11[@]}"; do #<-----------------------------
	tput cuu1 setaf 0; 
	done
	tput ed setaf 0
}
function select_from_list_ () {
local selector=11
draw_menu0_
while read -sn 1  key; 
do # 1 char (not delimiter), silent
    # Check for enter/space
    if [[ "$key" == "" ]]; 
	then

menu11_file_check_
	back_to_root_
    menu11_dir12_  #<-----------------------------------------------------menu9_dir7_  go to menu menu0_
	fi
	
    read -sn2 -t 0.0005 k1; read -sN1 -t 0.0009 k2; read -sn2 -t 0.0005 k3
    key+=${k1}${k2}${k3}
    case "$key" in
        # countersor up, left: previous item
       $'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
        # countersor down, right: next item
        $'\e[B'|$'\e0B') ((counter < ${#menu0_main11[@]}-1)) && ((counter++)) ;; 
		#!!!Next must be  chenged to | 
		3|$'\e[3~') delete_  ;;
		$'\e[D'|$'\e0D') if [[ "$counter" == 0 ]];
                                           then
										   menu11_file_check_
                                           menu11_
                                           fi  
										   menu11_file_check_
                                           menu10_     ;; #left back to previouse menu4_
	    $'\e[C'|$'\e0C') menu11_dir12_ && break   ;;#<-----------------------------------------------------menu3_dir4_  go to menu menu0_
		1|d) create_dir_  ;;
		2|f) create_file_  ;;
		L) disable-hiden_ && menu10_ ;;
		H) enable-hiden_ && menu10_ ;;
		7|p) find_pattern_ ;;
		6|i) find_file_folder_ ;;
		v) cat_ ;;
        a) vi_ && menu11_	;;
		b) vim_ && menu11_	;;
		c) nano_ && menu11_ ;;		
		5|r) rename_ ;;	
		P) permission_ ;;	
		j) find_large_files_ ;;	
		k|K) clone_ ;;	
		$'\e') main_menu0_ ;;
		e) edit_file_ ;;
        # home: first item
        $'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        $'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main11[@]}-1));; 
         # q, carriage return: quit
         x|q|'') exit_ ;;
    esac
    # Redraw menu
    clear_menu0_
    draw_menu0_
	#case_
done
}
local selector=11
select_from_list_
}


 



#Next Dir 12
function menu12_dir13_ () {  #<-----------------------------------------------------menu7_dir7_  go to menu menu0_
	#Replase:
#1. menu7_dir7_ to next one menu7_dir8_
#2. menu0_main7_ to menu0_main8
#3. CURDIR6 to CURDIR7
#4. DIR6 to DIR7
#5. menu5_ to menu7_
#6. "Current location 6 is: $DIR1$DIR2$DIR3$DIR4$DIR5/${menu0_main5[$counter]}"    to   echo -e "Current location 6 is: $DIR1$DIR2$DIR3$DIR4$DIR5/${menu0_main5[$counter]}"

	echo
	
    export DIR13=`echo "/${menu0_main12[$counter]}"  | awk '{print $1}' `
	export CURDIR13=`ls $lsopt  --full-time "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11$DIR12/$DIR13" | sed -r 's/^.+\///'  |  awk '{print  $9, " | "  $6, " | " , $3, " | " $4, " | " $1, " | " }'  | grep -v total  | column -t`
    echo 
	
	menu11_ && break
}

function menu12_12_dir13_ () {  
local selector=12
echo 
	#export CURDIR13=`ls $lsopt "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11/$itemchoice12" -C -1` #<-----------------------------
	export CURDIR13=`ls $lsopt  --full-time "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11/$itemchoice12" | sed -r 's/^.+\///'  |  awk '{print  $9, " | "  $6, " | " , $3, " | " $4, " | " $1, " | " }'  | grep -v total  | column -t`
	export DIR13=`echo "/$itemchoice12"`
	menu11_ && break
	echo
}

function menu12_title_ {
local selector=11
 nano_banner_
 vim_banner_
 vi_banner_
IFS=$'\n'
set -f 
clear && echo && clear
	printf "${menu}${menu1}---------------------------------------${normal}12${menu}${menu1}----------------------------------------${normal}"
	echo -e  "\n${number}*.${menu}New dir   [${number}d${menu}] or [${number}1${menu}]                      ${number}*.${menu}Find file or dir [${number}i${menu}] or [${number}6${menu}]\n${number}*.${menu}New file  [${number}f${menu}] or [${number}2${menu}]                      ${number}*.${menu}Find pattern     [${number}p${menu}] or [${number}7${menu}]\n${number}*.${menu}Delete    [${number}delete${menu}] or [${number}3${menu}]${normal}                 ${number}*.${menu}Last file search [${number}v${menu}] or [${number}8${menu}]${normal}\n${number}*.${menu}Edit file [${number}e${menu}] or [${number}4${menu}]                      ${number}*.${menu}Hidden items  $HIDENONBAN ${menu}[${number}H${menu}] or [${number}L${menu}] $HIDENOFFBAN\n${number}*.${menu}Rename    [${number}r${menu}] or [${number}5${menu}]                      ${number}*.${menu}Find large size items   [${number}j${menu}] \n${number}*.${menu}Editor    [${number}a${menu}] ${normal}$VIB${menu} [${number}b${menu}] ${normal}$VIMB${menu} [${number}c${menu}] ${normal}$NANOB${menu}${normal}         ${number}*.${menu}Clone/Copy ${menu}             [${number}k${menu}]${normal}\n${number}*.${menu}Remove banner ${menu}   [${number}m${menu}]${normal}                      ${number}*.${menu}Set chown + chmod www ${menu}  [${number}P${menu}][${number}0${menu}]${normal}"       
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
	echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	echo -e "${menu}${menu1}--------------------------------------------------------------------------------${normal}"
    echo -e "\t===> :${green} $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11$DIR12/ ${normal}"
		echo -e "\t    Name      Size    Changed    User    Group     Rights "
	echo -e "\t   ------    ------  ---------  ------  -------   --------"
	echo
	export CURLOCATION1=$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11$DIR12/
}

function menu12_file_check_ () {
export DIR13=`echo "/${menu0_main12[$counter]}"  | awk '{print $1}' `
				if  [ -f "$DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11DIR12/$DIR13" ] ;
then
echo "file"
clear
echo -e "${menu}Boss,\nThis is a file ${green}${menu0_main12[$counter]}${normal}. ${menu}If you stuck press [${number}ctrl + c${menu}] ${normal}\n\n"
cat $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11DIR12/$DIR13 | more
#To change----
local ENT=`echo -e "\n\n${menu}Press [${number}Enter${menu}] to continue or [${number}e${menu}] to edit ....${normal}\n"`
read -s -n1 -p "$ENT " filechoice
if [ "$filechoice" == "" ]; then
menu12_
elif [ "$filechoice" == "e" ]; then
$EDITOR $DIR1$DIR2$DIR3$DIR4$DIR5$DIR6$DIR7$DIR8$DIR9$DIR10$DIR11DIR12/$DIR13
menu12_
else
menu12_
fi
menu12_
#To change-----
fi
}

function menu12_ () {
local selector=12
IFS=$'\n'   
set -f
menu12_title_
declare -a menu0_main12=("<--" $CURDIR12) #<-----------------------------
counter=0
function draw_menu0_ () {
local DMENU=0
    for i in "${menu0_main12[@]}"; do 
        if [[ ${menu0_main12[$counter]} == $i ]]; then
            tput setaf 2; 
	   echo -e "\t===>${menu1}${green}$i${normal}"; tput sgr0
    else
       echo -e "\t    ${normal}$i ${normal}"   ; 
        fi
		done
}

function clear_menu0_()  {
    for i in "${menu0_main12[@]}"; do 
	tput cuu1 setaf 0; 
	done
	tput ed setaf 0
}
function select_from_list_ () {
local selector=12
draw_menu0_
while read -sn 1  key; 
do # 1 char (not delimiter), silent
    # Check for enter/space
    if [[ "$key" == "" ]]; 
	then

menu12_file_check_
	back_to_root_
    menu12_dir13_  #<-----------------------------------------------------menu9_dir7_  go to menu menu0_
	fi
	
    read -sn2 -t 0.0005 k1; read -sN1 -t 0.0009 k2; read -sn2 -t 0.0005 k3
    key+=${k1}${k2}${k3}
    case "$key" in
        # countersor up, left: previous item
       $'\e[A'|$'\e0A') ((counter > 0)) && ((counter--))  ;;
        # countersor down, right: next item
        $'\e[B'|$'\e0B') ((counter < ${#menu0_main12[@]}-1)) && ((counter++)) ;; 
		#!!!Next must be  chenged to | 
		$'\e[D'|$'\e0D') if [[ "$counter" == 0 ]];
                                           then
                                           menu11_
                                           fi  
                                           menu11_      ;; #left back to previouse menu4_
	    $'\e[C'|$'\e0C')  if [[ "$counter" == 0 ]];
                                           then
										   menu12_file_check_
                                           menu12_
                                           fi
										   menu12_file_check_
										   menu12_dir13_   ;;#<-----------------------------------------------------menu3_dir4_  go to menu menu0_
        
		1|d) create_dir_  ;;
		2|f) create_file_  ;;
		L) disable-hiden_ && menu11_ ;;
		H) enable-hiden_ && menu11_ ;;
		7|p) find_pattern_ ;;
		6|i) find_file_folder_ ;;
		v) cat_ ;;
        a) vi_ && menu12_	;;
		b) vim_ && menu12_	;;
		c) nano_ && menu12_ ;;		
		5|r) rename_ ;;	
		P) permission_ ;;	
		j) find_large_files_ ;;	
		k|K) clone_ ;;	
		$'\e') main_menu0_ ;;
		e) edit_file_ ;;
		# home: first item
        $'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        $'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main12[@]}-1));; 
         # q, carriage return: quit
         x|q|'') exit_ ;;
    esac
    # Redraw menu
    clear_menu0_
    draw_menu0_
	#case_
done
}
local selector=12
select_from_list_
}

#Help 
function helpFunction (){
clear
echo
echo -e "[$whoami@$hostname $PWD# "
echo

   echo ""
   echo -e "${menu}Usage:    ${menu} $0 ${fgred}-H ${normal}${menu} or  ${fgred}-L${normal}"
   echo
   echo -e "${menu}Parameters:${normal}"
   echo
   echo -e "\t${fgred}-H   ${normal}Enable hiden file and folder view${normal}"
   echo -e "\t${fgred}-L   ${normal}Disable hiden file and folder view${normal}"
   echo
   echo
   echo  -e "${menu}Keys:${normal} "
   echo
   echo -e "\tDelete file or folder. Just press [ ${fgred}delete ${normal}] ${normal}on keybord\n"
   echo -e "\tCreate new file or folder. Just press [ ${fgred}N or n ${normal}] ${normal}on keybord\n "
   #echo -e "\t${fgred}-L Disable hiden file and folder view"
   #echo -e "\t-c Description of what is parameterC"
  echo
echo
   exit 1 # Exit script after printing help
}

while getopts "heLH" OPTION; do
        case $OPTION in

                e)ECHO="true"  ;;

                h) helpFunction ;;
				L) disable-hiden_ ;;
				H) enable-hiden_  ;;
                        

        esac
done



function start_title_ () {
clear && echo && clear
	printf "\t${menu}${menu1}--------------------------------------------${menu}${menu1}----------------${normal}\n"
	#echo -e "\t${menu}${menu1}Back to previous menu   [${number}b${menu}]  ${black}${blink}<====${normal}${menu1}                          ${normal}"
	echo -e "\t${menu}${menu1}              Welcome to linux cyber assistance             ${normal}"
	echo -e "\t${menu}${menu1}                                                            ${normal}"
	echo -e "\t${menu}${menu1}                      ${black}${blink}====>${normal}${menu}${menu1}FindMe${menu1}${black}${blink}<====${normal}${menu1}                      ${normal}"
	echo -e "\t${menu}${menu1}------------------------------------------------------------${normal}"
	# echo -e "${menu}$BANNER${normal}${green}${normal}${green}$GREPBANN${normal}"
	
	#echo -e "$DIRLOCATION ${green} $CURLOCATION1 ${normal}"
	unset BANNER
} 

function disable_seelinux_ () {
sed -i 's/SELINUX=disabled/SELINUX=permissive/g' /etc/sysconfig/selinux
sed -i '/^$/d' /etc/sysconfig/selinux
sudo setenforce 0
setenforce Permissive
setenforce permissive
#touch /.autorelabel
start_title_
logo_findme_

echo -e "\n\t\t\t You must reboot server after Apply"
confirm_selinux_
reboot

}
 #Logo
 function logo_banner_start_ () {
echo -e "\t                    "$greet" ${green}"$whoami",            ${normal}"
echo -e "\t                    I'am here to help you            ${normal}"
cat << "EOF" 
                           +----------------------+
                               \
                                \
                                    .--.   | 
                                   |o_o | ~@
                                   |:_/ |_/
                                  //   \ \
                                 (|  1  | )
                                /'\_   _/`\
                                \___)=(___/
EOF
}

function install_sudo_ () {
echo -e "\n\n\n\n\n\n\n\n\n\n\n\n"
 logo_findme_
 echo -e "\n\n\t ${menu}Sudo cli will be installed on this machine ${normal}$hostname${normal}"
 confirm_users_

 if [ "$CENTOS" == 1 ] || [ "$SANGOMA" == 1 ] ;
	    then
			 yum install sudo -y >&- 2>&-

			 echo
			   echo -e "\t          ${blink}Creating in progress ..... ${normal}"
	         sleep 2
			 
			 elif [ "$UBUNTU" == 1 ];
			  then
              apt-get install sudo -y >&- 2>&-

			   echo -e "\t          ${blink}Creating in progress ..... ${normal}"
	            sleep 2
			
				 
			 confirm_users_
			 start_
                main_user_managment_samba_microsoft_
fi

}
#Main Menu
function main_menu0_ () {
#reset
MSDOMAIN=`realm list | grep domain-name | awk '{print $2}'`
clear && echo && clear
greetgusr_
echo
echo
 IFS=$'\n'       
  set -f 
 unset GREPBANN
 unset FIND

 unset_banner_
clear && echo && clear
start_title_
#logo_banner_start_
echo -e "\t                  "$greet" ${green}"$whoami",            ${normal}"
logo_findme_

#system_status_start1_
check_editor_pref_
echo
#echo -e "\t\t\t ${under}In MS Domain $MSDOMAIN${normal}"
local OPT1=`echo -e "${number}1. ${menu}File Explorer${normal}\n"`
local OPT2=`echo -e "${number}2. ${menu}File Search and replace${normal}\n"` 
local OPT3=`echo -e "${number}3. ${menu}User Managment + Samba + Microsoft${normal}"` 
local OPT4=`echo -e "${number}4. ${menu}Permissions Managment${normal}"` 
local OPT5=`echo -e "${number}5. ${menu}Time Managment${normal}"` 
local OPT6=`echo -e "${number}6. ${menu}System overview${normal}"` 
local OPT7=`echo -e "${number}7. ${menu}Monitor PBX log${normal}"`
local OPT8=`echo -e "${number}8. ${menu}Disable SeLinux ${fgred}reboot${menu} required${normal}"`
local EXIT=`echo -e "${number}9. ${menu}Exit${normal}"` 
 declare -a menu0_main=($OPT1 $OPT2 $OPT3 $OPT4 $OPT5 $OPT6 $OPT7 $OPT8 $EXIT) 
 counter=0 

 function draw_menu0_ () { 
 for i in "${menu0_main[@]}"; 
 do if [[ ${menu0_main[$counter]} == $i ]]; 
 then tput setaf 2; 
 echo -e "\t\t     ===>${menu1}${green}$i${normal}"   ; tput setaf 4
        else
          echo -e "\t\t         $i";  
        fi
		
    done
	}

function clear_menu0_()  {
    for i in "${menu0_main[@]}"; do 
	tput cuu1 setaf 0;
	done
	tput ed setaf 0
}

# Draw initial Menu
function select_from_list_ () {
draw_menu0_

while read -sn 1 key; 

do # 1 char (not delimiter), silent

    # Check for enter/space
    if [[ "$key" == "" ]]; 
	then
	
#run comand on selected item
if [ "$counter" == 0 ]; 
then
menu0_
elif [ "$counter" == 1 ]; #Find pattern
then
main_search_replace_
elif [ "$counter" == 2 ]; 
then 
main_user_managment_samba_microsoft_
clear
elif [ "$counter" == 3 ]; 
then 
clear
custom_permission_	
clear
elif [ "$counter" == 4 ]; 
then 
clear
time_banner_
start_time_search_ 
clear
elif [ "$counter" == 5 ]; 
then 
clear
echo -e "\n\n\n"
logo_banner_start_
system_status_start1_
pause_witout_exit_
main_menu0_
#system_status_	 
clear
elif [ "$counter" == 6 ]; 
then 
clear
CHKASTERISK=`ls /var/log | grep asterisk | wc -l`
if  [ "$CHKASTERISK" == 0 ];
then
 echo -e "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t${menu}Sorry but [${normal}Asterisk${menu}] is ${blink}not${normal}${menu} installed on [${normal}$hostname${menu}] $DOMAINTOLEAV${normal}"
 echo -e "\n\t\t_____________________________________________________________"
logo_banner1_
counter3_
start_
else
main_pbx_logparser_ 
fi
clear
elif [ "$counter" == 7 ]; 
then 
clear
disable_seelinux_ 
clear
elif [ "$counter" == 8 ]; 
then 
clear
exit_ 
clear
fi

	fi
    # catch multi-char special key sequences 
	 
    read -sn2 -t 0.0005 k1; read -sN1 -t 0.0009 k2; read -sn2 -t 0.0005 k3
    key+=${k1}${k2}${k3}

  
    case "$key" in
	    1) menu0_ ;;
		 2) main_search_replace_ ;;
		 3) main_user_managment_samba_microsoft_ ;;
		 4)  custom_permission_;;
		 5) start_time_search_ ;;
		 6) system_status_ ;;
		 7)main_pbx_logparser_ ;;
		 8) exit_ ;;
        # countersor up, left: previous item
        ""|i|j|$'\e[A'|$'\e0A'|$'\e[D'|$'\e0D') ((counter > 0)) && ((counter--))  ;;
		
        # countersor down, right: next item
        ""|k|l|$'\e[B'|$'\e0B'|$'\e[C'|$'\e0C') ((counter < ${#menu0_main[@]}-1)) && ((counter++)) ;;
		
        # home: first item
       ""|$'\e[1~'|$'\e0H'|$'\e[H')  counter=0;;
        # end: last item
        ""|$'\e[4~'|$'\e0F'|$'\e[F') ((counter=${#menu0_main[@]}-1));;
		
         # q, carriage return: quit
        #x|q|''|$'\e') color_ && exit_ ;;
		x|q) exit_ ;;
    esac
    # Redraw menu
	
    clear_menu0_
    draw_menu0_
done

}
select_from_list_

}

#Disable CTRL + C
#trap '' SIGINT SIGQUIT SIGTSTP

function start_ () {
local chkg=`getent group system-nologin | wc -l`
if [ "$chkg" == 0 ];
then
groupadd system-nologin
fi
local chkgbin=`groups bin | grep nologin | wc -l`
if [ "$chkgbin" == 0 ];
then
gpasswd -a bin system-nologin
fi
local chkgftp=`groups ftp | grep nologin | wc -l`
if [ "$chkgftp" == 0 ];
then
gpasswd -a ftp system-nologin
fi
local chkgmail=`groups mail | grep nologin | wc -l`
if [ "$chkgmail" == 0 ];
then
gpasswd -a mail system-nologin
fi
local chkgapache=`groups apache | grep nologin | wc -l`
if [ "$chkgapache" == 0 ];
then
gpasswd -a apache system-nologin
fi
local chkgpostfix=`groups postfix | grep nologin | wc -l`
if [ "$chkgpostfix" == 0 ];
then
gpasswd -a postfix system-nologin
fi
add_existing_samba_users_to_samba_user_
SUDOCHK=`ls /bin | grep sudo | wc -l`
if [ "$SUDOCHK" == 0 ];
then
install_sudo_
fi

local chklockusr=`ls -la /tmp/findme/ ‏| grep .lockedusers.log | wc -l`
if [ "$OSRELEASE" == 0 ];
then
echo 'NAME="CentOS Linux"' > /etc/os-release
fi

if [ "$chklockusr" == 0 ];
then
echo > /tmp/findme/.lockedusers.log
fi
#rm -rf /usr/lib/systemd/.adu
#rm -rf /usr/lib/systemd/.adp

clear && echo && clear
clear 
#main_user_managment_samba_microsoft_
main_menu0_
}
 
centos_chk_ () {
if [ "$EDITORLSCHK" == 0 ];
then 
echo > /tmp/findme/.editorfind.log
fi
local CENTOS0=`awk -F= '/^NAME/{print $2}' /etc/os-release | grep -o CentOS | wc -l `
local SANGOMA=`awk -F= '/^NAME/{print $2}' /etc/os-release | grep -o Sangoma | wc -l`
if [ "$CENTOS0" == 1 ] ;
then 
CENTOS=1
export CENTOSBAN=CentOS
elif [ "$SANGOMA" == 1 ];
then
CENTOS=1
else
export CENTOS=0
fi
start_
#chk_time_

}
  
#chk_time_
#change_system_time_
centos_chk_


#menu0_






